// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zvelo/msg/apiv1.proto

/*
	Package msg is a generated protocol buffer package.

	zveloAPI

	It is generated from these files:
		zvelo/msg/apiv1.proto
		zvelo/msg/category.proto
		zvelo/msg/dataset.proto
		zvelo/msg/query.proto
		zvelo/msg/status.proto
		zvelo/msg/suggest.proto

	It has these top-level messages:
		DataSet
		RequestID
		QueryStatus
		QueryResult
		URLContent
		QueryRequests
		QueryReply
		QueryReplies
		Status
		Suggestion
*/
package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for APIv1 service

type APIv1Client interface {
	// Create new query
	Query(ctx context.Context, in *QueryRequests, opts ...grpc.CallOption) (*QueryReplies, error)
	// Results of active or unexpired query
	Result(ctx context.Context, in *RequestID, opts ...grpc.CallOption) (*QueryResult, error)
	// Suggest new datasets for a URL
	Suggest(ctx context.Context, in *Suggestion, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Stream returns all QueryResult messages processed by zveloAPI
	Stream(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (APIv1_StreamClient, error)
}

type aPIv1Client struct {
	cc *grpc.ClientConn
}

func NewAPIv1Client(cc *grpc.ClientConn) APIv1Client {
	return &aPIv1Client{cc}
}

func (c *aPIv1Client) Query(ctx context.Context, in *QueryRequests, opts ...grpc.CallOption) (*QueryReplies, error) {
	out := new(QueryReplies)
	err := grpc.Invoke(ctx, "/zvelo.msg.APIv1/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIv1Client) Result(ctx context.Context, in *RequestID, opts ...grpc.CallOption) (*QueryResult, error) {
	out := new(QueryResult)
	err := grpc.Invoke(ctx, "/zvelo.msg.APIv1/Result", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIv1Client) Suggest(ctx context.Context, in *Suggestion, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/zvelo.msg.APIv1/Suggest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIv1Client) Stream(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (APIv1_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_APIv1_serviceDesc.Streams[0], c.cc, "/zvelo.msg.APIv1/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIv1StreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type APIv1_StreamClient interface {
	Recv() (*QueryResult, error)
	grpc.ClientStream
}

type aPIv1StreamClient struct {
	grpc.ClientStream
}

func (x *aPIv1StreamClient) Recv() (*QueryResult, error) {
	m := new(QueryResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for APIv1 service

type APIv1Server interface {
	// Create new query
	Query(context.Context, *QueryRequests) (*QueryReplies, error)
	// Results of active or unexpired query
	Result(context.Context, *RequestID) (*QueryResult, error)
	// Suggest new datasets for a URL
	Suggest(context.Context, *Suggestion) (*google_protobuf1.Empty, error)
	// Stream returns all QueryResult messages processed by zveloAPI
	Stream(*google_protobuf1.Empty, APIv1_StreamServer) error
}

func RegisterAPIv1Server(s *grpc.Server, srv APIv1Server) {
	s.RegisterService(&_APIv1_serviceDesc, srv)
}

func _APIv1_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIv1Server).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.APIv1/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIv1Server).Query(ctx, req.(*QueryRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIv1_Result_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIv1Server).Result(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.APIv1/Result",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIv1Server).Result(ctx, req.(*RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIv1_Suggest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Suggestion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIv1Server).Suggest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.APIv1/Suggest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIv1Server).Suggest(ctx, req.(*Suggestion))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIv1_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf1.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIv1Server).Stream(m, &aPIv1StreamServer{stream})
}

type APIv1_StreamServer interface {
	Send(*QueryResult) error
	grpc.ServerStream
}

type aPIv1StreamServer struct {
	grpc.ServerStream
}

func (x *aPIv1StreamServer) Send(m *QueryResult) error {
	return x.ServerStream.SendMsg(m)
}

var _APIv1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zvelo.msg.APIv1",
	HandlerType: (*APIv1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _APIv1_Query_Handler,
		},
		{
			MethodName: "Result",
			Handler:    _APIv1_Result_Handler,
		},
		{
			MethodName: "Suggest",
			Handler:    _APIv1_Suggest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _APIv1_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zvelo/msg/apiv1.proto",
}

func init() { proto.RegisterFile("zvelo/msg/apiv1.proto", fileDescriptorApiv1) }

var fileDescriptorApiv1 = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xb1, 0x4a, 0xc3, 0x40,
	0x1c, 0xc6, 0x73, 0x85, 0x56, 0x7a, 0x16, 0x91, 0xa3, 0x4d, 0x4b, 0x94, 0x1b, 0x32, 0x3a, 0x5c,
	0xac, 0x6e, 0x0e, 0x82, 0xa2, 0x43, 0x17, 0xa9, 0x2d, 0x38, 0xb8, 0x48, 0x8a, 0x67, 0x08, 0x24,
	0xb9, 0x34, 0x77, 0x09, 0xa8, 0x08, 0xe2, 0x13, 0x08, 0xbe, 0x84, 0x8f, 0xe2, 0x58, 0xe8, 0xe2,
	0xd8, 0x9c, 0x0e, 0x8e, 0x7d, 0x04, 0xc9, 0xe5, 0xac, 0x85, 0xd2, 0x31, 0xdf, 0xf7, 0xff, 0xff,
	0xfe, 0xdf, 0x97, 0x83, 0xad, 0x87, 0x8c, 0x06, 0xcc, 0x09, 0xb9, 0xe7, 0xb8, 0xb1, 0x9f, 0x75,
	0x49, 0x9c, 0x30, 0xc1, 0x50, 0x5d, 0xc9, 0x24, 0xe4, 0x9e, 0xb5, 0x34, 0x31, 0x4e, 0x69, 0x72,
	0x5f, 0x4e, 0x58, 0xed, 0x7f, 0x99, 0xa7, 0x9e, 0x47, 0xb9, 0xd0, 0xc6, 0xae, 0xc7, 0x98, 0x17,
	0xd0, 0x02, 0xe7, 0xb8, 0x51, 0xc4, 0x84, 0x2b, 0x7c, 0x16, 0x71, 0xed, 0xee, 0x68, 0x57, 0x7d,
	0x8d, 0xd2, 0x3b, 0x87, 0x86, 0xb1, 0xd0, 0xcc, 0x83, 0x69, 0x05, 0x56, 0x4f, 0xfa, 0xbd, 0xac,
	0x8b, 0xfa, 0xb0, 0x7a, 0x59, 0x1c, 0x43, 0x1d, 0xb2, 0x48, 0x42, 0x94, 0x32, 0xa0, 0xe3, 0x94,
	0x72, 0xc1, 0xad, 0xf6, 0xaa, 0x13, 0x07, 0x3e, 0xe5, 0x76, 0xf3, 0x65, 0xfa, 0xfd, 0x56, 0xd9,
	0xb2, 0xeb, 0x4e, 0xd6, 0x2d, 0x23, 0x1f, 0x81, 0x3d, 0x74, 0x05, 0x6b, 0x03, 0xca, 0xd3, 0x40,
	0xa0, 0xe6, 0xd2, 0xa2, 0xa6, 0xf5, 0xce, 0x2c, 0x73, 0x15, 0x57, 0x4c, 0xdb, 0x58, 0xd1, 0x3a,
	0xc8, 0x5c, 0xd0, 0x9c, 0xc7, 0xa4, 0xdc, 0xba, 0xf1, 0x6f, 0x9f, 0x50, 0x1f, 0x6e, 0x0c, 0xcb,
	0xfe, 0xa8, 0xb5, 0x84, 0xd0, 0x9a, 0xcf, 0x22, 0xcb, 0x24, 0x65, 0x67, 0xf2, 0xd7, 0x99, 0x9c,
	0x17, 0x9d, 0x6d, 0x53, 0x91, 0xb7, 0xed, 0xcd, 0x82, 0xac, 0xff, 0x61, 0x91, 0xf4, 0x02, 0xd6,
	0x86, 0x22, 0xa1, 0x6e, 0x88, 0xd6, 0x6c, 0xae, 0xcd, 0x8a, 0x14, 0xb1, 0x81, 0xa0, 0x22, 0x2a,
	0xc6, 0x3e, 0x38, 0x3d, 0x9e, 0xe4, 0xd8, 0xf8, 0xcc, 0xb1, 0x31, 0xcb, 0x31, 0x98, 0xe7, 0x18,
	0x3c, 0x4b, 0x0c, 0xde, 0x25, 0x06, 0x1f, 0x12, 0x83, 0x89, 0xc4, 0x60, 0x26, 0x31, 0xf8, 0x91,
	0xd8, 0x98, 0x4b, 0x0c, 0x5e, 0xbf, 0xb0, 0x71, 0xdd, 0x28, 0xf1, 0xbe, 0x7a, 0xde, 0x51, 0x4d,
	0x5d, 0x3f, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x99, 0x5d, 0xd3, 0x2b, 0x02, 0x00, 0x00,
}
