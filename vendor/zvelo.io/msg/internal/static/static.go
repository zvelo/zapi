// Code generated by "esc "; DO NOT EDIT.

package static

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/apiv1.swagger.json": {
		local:   "apiv1.swagger.json",
		size:    19222,
		modtime: 1516784602,
		compressed: `
H4sIAAAAAAAC/9Rc3XPbtpZ/71+B0e7DvTOp3aQ7d2eyLwuCIImIJFgAlKzcdFJGgi3eyqRKUsl1M/7f
d0DKtnQOHdlpe/f2zT7Ex8H5/B186PM3hEyWddXurm07eU3+/g0hhEyK7XZTLouurKvzf7R1NfmGkB9f
uLbbpl7tlk9r2y7X9mjYdddt24Pvn4qrK9tMXpPJq7PvJj2trC7ryWvyeejQld3Guu+/frSbmmaibzSw
3BXL7r4lIZOquH5oum9HyGTXbBy1n/r1+Xn/9WxZXz+0sNdF2bdpd9tt3XT/+9Cmb3K7n3NTLm3V2kfn
JFlTb5vSdkVzc9zzo23asq5cy5fuS0+frOvWLWBSbMuzY7YmH4rWZkW3dp/PB9K26Nbtg2TOP748/2Vn
m5tDdrbDiHf/OwEWVw/y39NoJj6+nNxTfnzx0LzdXV8X/ZgT1tiis6Syn8gwz0GzemubXuFi5Zr+AL+3
drlryu4GzPz54G9nOLtuXTflr/1IoGnfYBDKquiK1naTo68/Hvx3O7qUbdEU17azTftlLu5U+KFeHa6h
/1ZWj31p7C+7srFu+V2zs+Brb/jFkSb2X/6zsZduzP84X9nLsird0tvz6/aql6Gyv+xs27XHa709udbG
ttu6am0Lppy8+u47xMVkZdtlU273Up9Mfjfmt5vSPon3u79uj7zk3qTPPzeDIN6Xq9tD+76yv5t5K9vu
Nl1L6ktSLLvyoyV1Q3aV/efWqfWkyQ/d/6w2391se5tvu6asrqAB3HnEgxLG/cJFpBN+8Wex3F6Zv8lw
266xxfUfZKy6H5w0tts1VUuKzYYcME6ubdsWV7Yl26Ze2ra1K/LhhoCUOWbFw7iT30sffxmEUFZX5H6c
v/5bKWl3dWWPUuTvmjL1MHyfM/ce3JLLuiEFyVX8JT3s+frzpq/9CsoB/v1pcte2qbv6w+6SX2+7m6+w
rXssdzDoA0bzi67QtmNFZ68Og/698d3F4frDP+zyQf0PsBd0vW+wbZwFdSWQ2sQ2Td1AQT6utK7odgcJ
+/ZALR+Lzc7Cke74LZqmOLapSdnZ6xbr69G59ys7EvopF97Lky/X9bOk2Hf4F8puKDlGJbfPuE9baFJs
ymVZ79pnrfah18klL++U8P+m5xe/m/xHBXnIwIgMAf5xXly4JPOaTPJ0msp5+p5Rw0OpFgflYrW7PorJ
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
`,
	},

	"/schema.graphql": {
		local:   "schema.graphql",
		size:    6963,
		modtime: 1516775417,
		compressed: `
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
1vay+82ikn/t/hMAAP//kSDK1DMbAAA=
`,
	},

	"/": {
		isDir: true,
		local: "",
	},
}
