// Code generated by "esc "; DO NOT EDIT.

package static

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/msg.swagger.json": {
		local:   "msg.swagger.json",
		size:    19737,
		modtime: 1531806884,
		compressed: `
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
1/8XAAD//2lejFUZTQAA
`,
	},

	"/schema.graphql": {
		local:   "schema.graphql",
		size:    7156,
		modtime: 1531806712,
		compressed: `
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
bzGgX+ZFwG+7/wkAAP//8kFRh/QbAAA=
`,
	},

	"/": {
		isDir: true,
		local: "",
	},
}
