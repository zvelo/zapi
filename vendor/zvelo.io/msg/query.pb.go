// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zvelo/msg/query.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"
import sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RequestID struct {
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *RequestID) Reset()                    { *m = RequestID{} }
func (*RequestID) ProtoMessage()               {}
func (*RequestID) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{0} }

func (m *RequestID) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// QueryStatus
type QueryStatus struct {
	Complete bool    `protobuf:"varint,1,opt,name=complete,proto3" json:"complete,omitempty"`
	Error    *Status `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	// the http status code received from the server when fetching a url
	FetchCode int32 `protobuf:"varint,3,opt,name=fetch_code,json=fetchCode,proto3" json:"fetch_code,omitempty"`
	// fetching the url resulted in a redirect to this location
	Location string `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
}

func (m *QueryStatus) Reset()                    { *m = QueryStatus{} }
func (*QueryStatus) ProtoMessage()               {}
func (*QueryStatus) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{1} }

func (m *QueryStatus) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

func (m *QueryStatus) GetError() *Status {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *QueryStatus) GetFetchCode() int32 {
	if m != nil {
		return m.FetchCode
	}
	return 0
}

func (m *QueryStatus) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

// QueryResult
type QueryResult struct {
	// Request ID for tracking requests
	RequestId       string       `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ResponseDataset *DataSet     `protobuf:"bytes,7,opt,name=response_dataset,json=responseDataset" json:"response_dataset,omitempty"`
	Url             string       `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty"`
	QueryStatus     *QueryStatus `protobuf:"bytes,10,opt,name=query_status,json=queryStatus" json:"query_status,omitempty"`
}

func (m *QueryResult) Reset()                    { *m = QueryResult{} }
func (*QueryResult) ProtoMessage()               {}
func (*QueryResult) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{2} }

func (m *QueryResult) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *QueryResult) GetResponseDataset() *DataSet {
	if m != nil {
		return m.ResponseDataset
	}
	return nil
}

func (m *QueryResult) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *QueryResult) GetQueryStatus() *QueryStatus {
	if m != nil {
		return m.QueryStatus
	}
	return nil
}

type URLContent struct {
	// url the content came from, not required
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// headers
	//
	// header key/value pairs
	Header map[string]string `protobuf:"bytes,3,rep,name=header" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// the actual content to process. required
	Content string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *URLContent) Reset()                    { *m = URLContent{} }
func (*URLContent) ProtoMessage()               {}
func (*URLContent) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{3} }

func (m *URLContent) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *URLContent) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *URLContent) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// QueryRequests
type QueryRequests struct {
	// The URLs to categorize
	Url []string `protobuf:"bytes,1,rep,name=url" json:"url,omitempty"`
	// The content to categorize
	Content []*URLContent `protobuf:"bytes,2,rep,name=content" json:"content,omitempty"`
	// The callback url will receive the final result
	Callback string `protobuf:"bytes,3,opt,name=callback,proto3" json:"callback,omitempty"`
	// The datasets to query for each URL
	Dataset []DataSetType `protobuf:"varint,5,rep,packed,name=dataset,enum=zvelo.msg.DataSetType" json:"dataset,omitempty"`
}

func (m *QueryRequests) Reset()                    { *m = QueryRequests{} }
func (*QueryRequests) ProtoMessage()               {}
func (*QueryRequests) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{4} }

func (m *QueryRequests) GetUrl() []string {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *QueryRequests) GetContent() []*URLContent {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *QueryRequests) GetCallback() string {
	if m != nil {
		return m.Callback
	}
	return ""
}

func (m *QueryRequests) GetDataset() []DataSetType {
	if m != nil {
		return m.Dataset
	}
	return nil
}

// QueryReply
type QueryReply struct {
	// will identify the request after submission
	RequestId string  `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Error     *Status `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
}

func (m *QueryReply) Reset()                    { *m = QueryReply{} }
func (*QueryReply) ProtoMessage()               {}
func (*QueryReply) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{5} }

func (m *QueryReply) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *QueryReply) GetError() *Status {
	if m != nil {
		return m.Error
	}
	return nil
}

// QueryReplies
type QueryReplies struct {
	Reply []*QueryReply `protobuf:"bytes,1,rep,name=reply" json:"reply,omitempty"`
}

func (m *QueryReplies) Reset()                    { *m = QueryReplies{} }
func (*QueryReplies) ProtoMessage()               {}
func (*QueryReplies) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{6} }

func (m *QueryReplies) GetReply() []*QueryReply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestID)(nil), "zvelo.msg.RequestID")
	golang_proto.RegisterType((*RequestID)(nil), "zvelo.msg.RequestID")
	proto.RegisterType((*QueryStatus)(nil), "zvelo.msg.QueryStatus")
	golang_proto.RegisterType((*QueryStatus)(nil), "zvelo.msg.QueryStatus")
	proto.RegisterType((*QueryResult)(nil), "zvelo.msg.QueryResult")
	golang_proto.RegisterType((*QueryResult)(nil), "zvelo.msg.QueryResult")
	proto.RegisterType((*URLContent)(nil), "zvelo.msg.URLContent")
	golang_proto.RegisterType((*URLContent)(nil), "zvelo.msg.URLContent")
	proto.RegisterType((*QueryRequests)(nil), "zvelo.msg.QueryRequests")
	golang_proto.RegisterType((*QueryRequests)(nil), "zvelo.msg.QueryRequests")
	proto.RegisterType((*QueryReply)(nil), "zvelo.msg.QueryReply")
	golang_proto.RegisterType((*QueryReply)(nil), "zvelo.msg.QueryReply")
	proto.RegisterType((*QueryReplies)(nil), "zvelo.msg.QueryReplies")
	golang_proto.RegisterType((*QueryReplies)(nil), "zvelo.msg.QueryReplies")
}
func (this *RequestID) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RequestID)
	if !ok {
		that2, ok := that.(RequestID)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RequestID")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RequestID but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RequestID but is not nil && this == nil")
	}
	if this.RequestId != that1.RequestId {
		return fmt.Errorf("RequestId this(%v) Not Equal that(%v)", this.RequestId, that1.RequestId)
	}
	return nil
}
func (this *RequestID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestID)
	if !ok {
		that2, ok := that.(RequestID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	return true
}
func (this *QueryStatus) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryStatus)
	if !ok {
		that2, ok := that.(QueryStatus)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryStatus")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryStatus but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryStatus but is not nil && this == nil")
	}
	if this.Complete != that1.Complete {
		return fmt.Errorf("Complete this(%v) Not Equal that(%v)", this.Complete, that1.Complete)
	}
	if !this.Error.Equal(that1.Error) {
		return fmt.Errorf("Error this(%v) Not Equal that(%v)", this.Error, that1.Error)
	}
	if this.FetchCode != that1.FetchCode {
		return fmt.Errorf("FetchCode this(%v) Not Equal that(%v)", this.FetchCode, that1.FetchCode)
	}
	if this.Location != that1.Location {
		return fmt.Errorf("Location this(%v) Not Equal that(%v)", this.Location, that1.Location)
	}
	return nil
}
func (this *QueryStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryStatus)
	if !ok {
		that2, ok := that.(QueryStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Complete != that1.Complete {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if this.FetchCode != that1.FetchCode {
		return false
	}
	if this.Location != that1.Location {
		return false
	}
	return true
}
func (this *QueryResult) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryResult)
	if !ok {
		that2, ok := that.(QueryResult)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryResult")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryResult but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryResult but is not nil && this == nil")
	}
	if this.RequestId != that1.RequestId {
		return fmt.Errorf("RequestId this(%v) Not Equal that(%v)", this.RequestId, that1.RequestId)
	}
	if !this.ResponseDataset.Equal(that1.ResponseDataset) {
		return fmt.Errorf("ResponseDataset this(%v) Not Equal that(%v)", this.ResponseDataset, that1.ResponseDataset)
	}
	if this.Url != that1.Url {
		return fmt.Errorf("Url this(%v) Not Equal that(%v)", this.Url, that1.Url)
	}
	if !this.QueryStatus.Equal(that1.QueryStatus) {
		return fmt.Errorf("QueryStatus this(%v) Not Equal that(%v)", this.QueryStatus, that1.QueryStatus)
	}
	return nil
}
func (this *QueryResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryResult)
	if !ok {
		that2, ok := that.(QueryResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if !this.ResponseDataset.Equal(that1.ResponseDataset) {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if !this.QueryStatus.Equal(that1.QueryStatus) {
		return false
	}
	return true
}
func (this *URLContent) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*URLContent)
	if !ok {
		that2, ok := that.(URLContent)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *URLContent")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *URLContent but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *URLContent but is not nil && this == nil")
	}
	if this.Url != that1.Url {
		return fmt.Errorf("Url this(%v) Not Equal that(%v)", this.Url, that1.Url)
	}
	if len(this.Header) != len(that1.Header) {
		return fmt.Errorf("Header this(%v) Not Equal that(%v)", len(this.Header), len(that1.Header))
	}
	for i := range this.Header {
		if this.Header[i] != that1.Header[i] {
			return fmt.Errorf("Header this[%v](%v) Not Equal that[%v](%v)", i, this.Header[i], i, that1.Header[i])
		}
	}
	if this.Content != that1.Content {
		return fmt.Errorf("Content this(%v) Not Equal that(%v)", this.Content, that1.Content)
	}
	return nil
}
func (this *URLContent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLContent)
	if !ok {
		that2, ok := that.(URLContent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if len(this.Header) != len(that1.Header) {
		return false
	}
	for i := range this.Header {
		if this.Header[i] != that1.Header[i] {
			return false
		}
	}
	if this.Content != that1.Content {
		return false
	}
	return true
}
func (this *QueryRequests) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryRequests)
	if !ok {
		that2, ok := that.(QueryRequests)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryRequests")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryRequests but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryRequests but is not nil && this == nil")
	}
	if len(this.Url) != len(that1.Url) {
		return fmt.Errorf("Url this(%v) Not Equal that(%v)", len(this.Url), len(that1.Url))
	}
	for i := range this.Url {
		if this.Url[i] != that1.Url[i] {
			return fmt.Errorf("Url this[%v](%v) Not Equal that[%v](%v)", i, this.Url[i], i, that1.Url[i])
		}
	}
	if len(this.Content) != len(that1.Content) {
		return fmt.Errorf("Content this(%v) Not Equal that(%v)", len(this.Content), len(that1.Content))
	}
	for i := range this.Content {
		if !this.Content[i].Equal(that1.Content[i]) {
			return fmt.Errorf("Content this[%v](%v) Not Equal that[%v](%v)", i, this.Content[i], i, that1.Content[i])
		}
	}
	if this.Callback != that1.Callback {
		return fmt.Errorf("Callback this(%v) Not Equal that(%v)", this.Callback, that1.Callback)
	}
	if len(this.Dataset) != len(that1.Dataset) {
		return fmt.Errorf("Dataset this(%v) Not Equal that(%v)", len(this.Dataset), len(that1.Dataset))
	}
	for i := range this.Dataset {
		if this.Dataset[i] != that1.Dataset[i] {
			return fmt.Errorf("Dataset this[%v](%v) Not Equal that[%v](%v)", i, this.Dataset[i], i, that1.Dataset[i])
		}
	}
	return nil
}
func (this *QueryRequests) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryRequests)
	if !ok {
		that2, ok := that.(QueryRequests)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Url) != len(that1.Url) {
		return false
	}
	for i := range this.Url {
		if this.Url[i] != that1.Url[i] {
			return false
		}
	}
	if len(this.Content) != len(that1.Content) {
		return false
	}
	for i := range this.Content {
		if !this.Content[i].Equal(that1.Content[i]) {
			return false
		}
	}
	if this.Callback != that1.Callback {
		return false
	}
	if len(this.Dataset) != len(that1.Dataset) {
		return false
	}
	for i := range this.Dataset {
		if this.Dataset[i] != that1.Dataset[i] {
			return false
		}
	}
	return true
}
func (this *QueryReply) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryReply)
	if !ok {
		that2, ok := that.(QueryReply)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryReply")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryReply but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryReply but is not nil && this == nil")
	}
	if this.RequestId != that1.RequestId {
		return fmt.Errorf("RequestId this(%v) Not Equal that(%v)", this.RequestId, that1.RequestId)
	}
	if !this.Error.Equal(that1.Error) {
		return fmt.Errorf("Error this(%v) Not Equal that(%v)", this.Error, that1.Error)
	}
	return nil
}
func (this *QueryReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryReply)
	if !ok {
		that2, ok := that.(QueryReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *QueryReplies) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryReplies)
	if !ok {
		that2, ok := that.(QueryReplies)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryReplies")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryReplies but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryReplies but is not nil && this == nil")
	}
	if len(this.Reply) != len(that1.Reply) {
		return fmt.Errorf("Reply this(%v) Not Equal that(%v)", len(this.Reply), len(that1.Reply))
	}
	for i := range this.Reply {
		if !this.Reply[i].Equal(that1.Reply[i]) {
			return fmt.Errorf("Reply this[%v](%v) Not Equal that[%v](%v)", i, this.Reply[i], i, that1.Reply[i])
		}
	}
	return nil
}
func (this *QueryReplies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryReplies)
	if !ok {
		that2, ok := that.(QueryReplies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Reply) != len(that1.Reply) {
		return false
	}
	for i := range this.Reply {
		if !this.Reply[i].Equal(that1.Reply[i]) {
			return false
		}
	}
	return true
}
func (this *RequestID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msg.RequestID{")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&msg.QueryStatus{")
	s = append(s, "Complete: "+fmt.Sprintf("%#v", this.Complete)+",\n")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "FetchCode: "+fmt.Sprintf("%#v", this.FetchCode)+",\n")
	s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&msg.QueryResult{")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	if this.ResponseDataset != nil {
		s = append(s, "ResponseDataset: "+fmt.Sprintf("%#v", this.ResponseDataset)+",\n")
	}
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	if this.QueryStatus != nil {
		s = append(s, "QueryStatus: "+fmt.Sprintf("%#v", this.QueryStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *URLContent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&msg.URLContent{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	keysForHeader := make([]string, 0, len(this.Header))
	for k, _ := range this.Header {
		keysForHeader = append(keysForHeader, k)
	}
	sortkeys.Strings(keysForHeader)
	mapStringForHeader := "map[string]string{"
	for _, k := range keysForHeader {
		mapStringForHeader += fmt.Sprintf("%#v: %#v,", k, this.Header[k])
	}
	mapStringForHeader += "}"
	if this.Header != nil {
		s = append(s, "Header: "+mapStringForHeader+",\n")
	}
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryRequests) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&msg.QueryRequests{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	if this.Content != nil {
		s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	}
	s = append(s, "Callback: "+fmt.Sprintf("%#v", this.Callback)+",\n")
	s = append(s, "Dataset: "+fmt.Sprintf("%#v", this.Dataset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msg.QueryReply{")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryReplies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msg.QueryReplies{")
	if this.Reply != nil {
		s = append(s, "Reply: "+fmt.Sprintf("%#v", this.Reply)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringQuery(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RequestID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RequestId)))
		i += copy(dAtA[i:], m.RequestId)
	}
	return i, nil
}

func (m *QueryStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Complete {
		dAtA[i] = 0x8
		i++
		if m.Complete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.Error.Size()))
		n1, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.FetchCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.FetchCode))
	}
	if len(m.Location) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Location)))
		i += copy(dAtA[i:], m.Location)
	}
	return i, nil
}

func (m *QueryResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RequestId)))
		i += copy(dAtA[i:], m.RequestId)
	}
	if m.ResponseDataset != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.ResponseDataset.Size()))
		n2, err := m.ResponseDataset.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.QueryStatus != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.QueryStatus.Size()))
		n3, err := m.QueryStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *URLContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *URLContent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Header) > 0 {
		for k, _ := range m.Header {
			dAtA[i] = 0x1a
			i++
			v := m.Header[k]
			mapSize := 1 + len(k) + sovQuery(uint64(len(k))) + 1 + len(v) + sovQuery(uint64(len(v)))
			i = encodeVarintQuery(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintQuery(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *QueryRequests) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequests) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		for _, s := range m.Url {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Content) > 0 {
		for _, msg := range m.Content {
			dAtA[i] = 0x12
			i++
			i = encodeVarintQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Callback) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Callback)))
		i += copy(dAtA[i:], m.Callback)
	}
	if len(m.Dataset) > 0 {
		dAtA5 := make([]byte, len(m.Dataset)*10)
		var j4 int
		for _, num := range m.Dataset {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintQuery(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	return i, nil
}

func (m *QueryReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RequestId)))
		i += copy(dAtA[i:], m.RequestId)
	}
	if m.Error != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.Error.Size()))
		n6, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *QueryReplies) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReplies) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		for _, msg := range m.Reply {
			dAtA[i] = 0xa
			i++
			i = encodeVarintQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RequestID) Size() (n int) {
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStatus) Size() (n int) {
	var l int
	_ = l
	if m.Complete {
		n += 2
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.FetchCode != 0 {
		n += 1 + sovQuery(uint64(m.FetchCode))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ResponseDataset != nil {
		l = m.ResponseDataset.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.QueryStatus != nil {
		l = m.QueryStatus.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *URLContent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Header) > 0 {
		for k, v := range m.Header {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + 1 + len(v) + sovQuery(uint64(len(v)))
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRequests) Size() (n int) {
	var l int
	_ = l
	if len(m.Url) > 0 {
		for _, s := range m.Url {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Content) > 0 {
		for _, e := range m.Content {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.Callback)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Dataset) > 0 {
		l = 0
		for _, e := range m.Dataset {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReplies) Size() (n int) {
	var l int
	_ = l
	if len(m.Reply) > 0 {
		for _, e := range m.Reply {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RequestID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestID{`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryStatus{`,
		`Complete:` + fmt.Sprintf("%v", this.Complete) + `,`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Status", "Status", 1) + `,`,
		`FetchCode:` + fmt.Sprintf("%v", this.FetchCode) + `,`,
		`Location:` + fmt.Sprintf("%v", this.Location) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryResult{`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`ResponseDataset:` + strings.Replace(fmt.Sprintf("%v", this.ResponseDataset), "DataSet", "DataSet", 1) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`QueryStatus:` + strings.Replace(fmt.Sprintf("%v", this.QueryStatus), "QueryStatus", "QueryStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLContent) String() string {
	if this == nil {
		return "nil"
	}
	keysForHeader := make([]string, 0, len(this.Header))
	for k, _ := range this.Header {
		keysForHeader = append(keysForHeader, k)
	}
	sortkeys.Strings(keysForHeader)
	mapStringForHeader := "map[string]string{"
	for _, k := range keysForHeader {
		mapStringForHeader += fmt.Sprintf("%v: %v,", k, this.Header[k])
	}
	mapStringForHeader += "}"
	s := strings.Join([]string{`&URLContent{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Header:` + mapStringForHeader + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryRequests) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryRequests{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Content:` + strings.Replace(fmt.Sprintf("%v", this.Content), "URLContent", "URLContent", 1) + `,`,
		`Callback:` + fmt.Sprintf("%v", this.Callback) + `,`,
		`Dataset:` + fmt.Sprintf("%v", this.Dataset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryReply{`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryReplies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryReplies{`,
		`Reply:` + strings.Replace(fmt.Sprintf("%v", this.Reply), "QueryReply", "QueryReply", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringQuery(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RequestID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Complete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Complete = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Status{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FetchCode", wireType)
			}
			m.FetchCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FetchCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseDataset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponseDataset == nil {
				m.ResponseDataset = &DataSet{}
			}
			if err := m.ResponseDataset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryStatus == nil {
				m.QueryStatus = &QueryStatus{}
			}
			if err := m.QueryStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *URLContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: URLContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: URLContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Header[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequests) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequests: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequests: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = append(m.Url, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content, &URLContent{})
			if err := m.Content[len(m.Content)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callback", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Callback = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v DataSetType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (DataSetType(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Dataset = append(m.Dataset, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v DataSetType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (DataSetType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Dataset = append(m.Dataset, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dataset", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Status{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReplies) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReplies: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReplies: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply, &QueryReply{})
			if err := m.Reply[len(m.Reply)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQuery(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQuery = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("zvelo/msg/query.proto", fileDescriptorQuery) }
func init() { golang_proto.RegisterFile("zvelo/msg/query.proto", fileDescriptorQuery) }

var fileDescriptorQuery = []byte{
	// 591 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xbb, 0x6e, 0xd4, 0x40,
	0x14, 0xdd, 0xf1, 0x63, 0xd7, 0xbe, 0x1b, 0xc0, 0x8c, 0x48, 0xb0, 0x56, 0x62, 0x64, 0xdc, 0xb0,
	0x02, 0x69, 0x83, 0x42, 0x43, 0x40, 0x34, 0x49, 0x90, 0x88, 0x45, 0xc3, 0x04, 0x1a, 0x9a, 0xc5,
	0xb1, 0x87, 0x64, 0x15, 0x67, 0xbd, 0x6b, 0x8f, 0x23, 0x2d, 0x15, 0x3f, 0x80, 0xc4, 0x57, 0x20,
	0x3e, 0x80, 0x0f, 0xa0, 0xa4, 0x4c, 0x49, 0x41, 0x91, 0x75, 0x1a, 0xca, 0x7c, 0x02, 0xf2, 0x8c,
	0x5f, 0x89, 0x10, 0x74, 0x3e, 0x33, 0xe7, 0xde, 0x73, 0x7c, 0xee, 0x1d, 0x58, 0xfd, 0x70, 0xc2,
	0xa2, 0x78, 0xfd, 0x38, 0x3d, 0x58, 0x9f, 0x67, 0x2c, 0x59, 0x8c, 0x66, 0x49, 0xcc, 0x63, 0x6c,
	0x8a, 0xe3, 0xd1, 0x71, 0x7a, 0x30, 0xb8, 0xdd, 0x30, 0x42, 0x9f, 0xfb, 0x29, 0xe3, 0x92, 0x33,
	0x58, 0x6b, 0x2e, 0x52, 0xee, 0xf3, 0x2c, 0x95, 0xe7, 0xee, 0x7d, 0x30, 0x29, 0x9b, 0x67, 0x2c,
	0xe5, 0xbb, 0x3b, 0xf8, 0x0e, 0x40, 0x22, 0xc1, 0x78, 0x12, 0xda, 0xc8, 0x41, 0x43, 0x93, 0x9a,
	0xe5, 0xc9, 0x6e, 0xe8, 0x7e, 0x42, 0xd0, 0x7f, 0x55, 0xe8, 0xee, 0x89, 0x0e, 0x78, 0x00, 0x46,
	0x10, 0x1f, 0xcf, 0x22, 0xc6, 0x99, 0x20, 0x1b, 0xb4, 0xc6, 0xf8, 0x1e, 0xe8, 0x2c, 0x49, 0xe2,
	0xc4, 0x56, 0x1c, 0x34, 0xec, 0x6f, 0xdc, 0x1c, 0xd5, 0x1e, 0x47, 0xb2, 0x9a, 0xca, 0xfb, 0x42,
	0xf3, 0x3d, 0xe3, 0xc1, 0xe1, 0x38, 0x88, 0x43, 0x66, 0xab, 0x0e, 0x1a, 0xea, 0xd4, 0x14, 0x27,
	0xdb, 0x71, 0xc8, 0x0a, 0x8d, 0x28, 0x0e, 0x7c, 0x3e, 0x89, 0xa7, 0xb6, 0x26, 0x0c, 0xd5, 0xd8,
	0xfd, 0x55, 0xf9, 0xa1, 0x2c, 0xcd, 0x22, 0xfe, 0x1f, 0xfb, 0xf8, 0x19, 0x58, 0x09, 0x4b, 0x67,
	0xf1, 0x34, 0x65, 0xe3, 0x32, 0x1c, 0xbb, 0x27, 0xdc, 0xe1, 0x96, 0xbb, 0x1d, 0x9f, 0xfb, 0x7b,
	0x8c, 0xd3, 0x1b, 0x15, 0x77, 0x47, 0x52, 0xb1, 0x05, 0x6a, 0x96, 0x44, 0xb6, 0x21, 0xda, 0x16,
	0x9f, 0x78, 0x13, 0x56, 0xc4, 0x18, 0xc6, 0x32, 0x51, 0x1b, 0x44, 0xb3, 0xb5, 0x56, 0xb3, 0x56,
	0x5a, 0xb4, 0x3f, 0x6f, 0x80, 0xa7, 0x19, 0x8a, 0xa5, 0x7a, 0x9a, 0xa1, 0x5a, 0x9a, 0xa7, 0x19,
	0x9a, 0xa5, 0x7b, 0x9a, 0xa1, 0x5b, 0x5d, 0x4f, 0x33, 0xba, 0x56, 0xcf, 0xd3, 0x0c, 0xd3, 0x02,
	0xf7, 0x1b, 0x02, 0x78, 0x43, 0x5f, 0x6e, 0xc7, 0x53, 0xce, 0xa6, 0xb5, 0xbe, 0xd2, 0xd6, 0xef,
	0x1e, 0x32, 0x3f, 0x64, 0x89, 0xad, 0x3a, 0xea, 0xb0, 0xbf, 0x71, 0xb7, 0xa5, 0xdc, 0x14, 0x8e,
	0x5e, 0x08, 0xce, 0xf3, 0x29, 0x4f, 0x16, 0xb4, 0x2c, 0xc0, 0x36, 0xf4, 0x02, 0x79, 0x5d, 0xa6,
	0x5a, 0xc1, 0xc1, 0x26, 0xf4, 0x5b, 0x05, 0x85, 0xea, 0x11, 0x5b, 0x94, 0x61, 0x16, 0x9f, 0xf8,
	0x16, 0xe8, 0x27, 0x7e, 0x94, 0xb1, 0xd2, 0x89, 0x04, 0x4f, 0x94, 0xc7, 0xc8, 0xd3, 0x0c, 0x64,
	0x29, 0xee, 0x17, 0x04, 0xd7, 0xca, 0xa9, 0x88, 0xe4, 0xd3, 0xca, 0x39, 0x72, 0xd4, 0xca, 0xf9,
	0x7a, 0x23, 0xaf, 0x08, 0xeb, 0xab, 0x7f, 0xb5, 0x5e, 0xbb, 0x12, 0xab, 0xe6, 0x47, 0xd1, 0xbe,
	0x1f, 0x1c, 0x89, 0x1d, 0x31, 0x69, 0x8d, 0xf1, 0x43, 0xe8, 0x55, 0xe3, 0xd4, 0x1d, 0x75, 0x78,
	0xfd, 0xd2, 0x04, 0xca, 0x71, 0xbe, 0x5e, 0xcc, 0x18, 0xad, 0x68, 0x32, 0x71, 0xf7, 0x1d, 0x40,
	0xe9, 0x73, 0x16, 0x2d, 0xae, 0x2c, 0x8f, 0x72, 0x75, 0x79, 0xea, 0x7d, 0xd6, 0xfe, 0xbd, 0xcf,
	0x32, 0x04, 0x39, 0x59, 0xf7, 0x29, 0xac, 0xd4, 0x0a, 0x13, 0x96, 0xe2, 0x07, 0xa0, 0x27, 0x85,
	0x98, 0x88, 0xe2, 0xf2, 0x4f, 0x37, 0x4e, 0xa8, 0xe4, 0x6c, 0x6d, 0x9d, 0x2e, 0x49, 0xe7, 0xe7,
	0x92, 0x74, 0xce, 0x96, 0x04, 0x5d, 0x2c, 0x09, 0xfa, 0x98, 0x13, 0xf4, 0x35, 0x27, 0xe8, 0x47,
	0x4e, 0xd0, 0x69, 0x4e, 0xd0, 0x59, 0x4e, 0xd0, 0xef, 0x9c, 0x74, 0x2e, 0x72, 0x82, 0x3e, 0x9f,
	0x93, 0xce, 0xf7, 0x73, 0x82, 0xde, 0xae, 0xc8, 0x96, 0x13, 0xf1, 0xd4, 0xf7, 0xbb, 0xe2, 0x91,
	0x3f, 0xfa, 0x13, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x0c, 0x06, 0xd7, 0x39, 0x04, 0x00, 0x00,
}
