// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg.proto

package msgpb

/*
	zveloAPI
*/

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import strconv "strconv"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Category int32

const (
	UNKNOWN_CATEGORY Category = 0
	ABORTION_4       Category = 10001
	PROCHOICE_4      Category = 10002
	PROLIFE_4        Category = 10003
	PG13_4           Category = 10004
	GAMBLING_4       Category = 10005
	GAY_4            Category = 10006
	LINGERIE_4       Category = 10007
	NUDITY_4         Category = 10008
	PORN_4           Category = 10009
	PROFANITY_4      Category = 10010
	RATEDR_4         Category = 10011
	SEX_4            Category = 10012
	EDSEX_4          Category = 10013
	TOBACCO_4        Category = 10014
	MIL_4            Category = 10015
	VIOLENCE_4       Category = 10016
	WEAPONS_4        Category = 10017
	AGGRESSIVE_4     Category = 10018
	FINEART_4        Category = 10019
	ART_4            Category = 10020
	AUTOPARTS_4      Category = 10021
	AUTOREPAIR_4     Category = 10022
	BUYSELLCAR_4     Category = 10023
	CARCULTURE_4     Category = 10024
	CPO_4            Category = 10025
	CARCONVERT_4     Category = 10026
	COUPE_4          Category = 10027
	CUV_4            Category = 10028
	DIESEL_4         Category = 10029
	EVEHICLE_4       Category = 10030
	HATCHBACK_4      Category = 10031
	HYBRIDCAR_4      Category = 10032
	LUXURYCAR_4      Category = 10033
	MINIVAN_4        Category = 10034
	MOTORCYCLE_4     Category = 10035
	OFFROAD_4        Category = 10036
	PERFCAR_4        Category = 10037
	PICKUP_4         Category = 10038
	ROADASSIST_4     Category = 10039
	SEDAN_4          Category = 10040
	TRUCK_4          Category = 10041
	VINTAGECAR_4     Category = 10042
	WAGON_4          Category = 10043
	AUTOMOTIVE_4     Category = 10044
	AG_4             Category = 10045
	BIOTECH_4        Category = 10046
	BIZSOFT_4        Category = 10047
	BUILD_4          Category = 10048
	FORESTRY_4       Category = 10049
	BIZGOV_4         Category = 10050
	NATURE_4         Category = 10051
	FURNITURE_4      Category = 10052
	HR_4             Category = 10053
	MFG_4            Category = 10054
	MKTG_4           Category = 10055
	METAL_4          Category = 10056
	PHYSEC_4         Category = 10057
	BIZPROD_4        Category = 10058
	RETIREHOME_4     Category = 10059
	SHIPPING_4       Category = 10060
	BUSINESS_4       Category = 10061
	JOBADVICE_4      Category = 10062
	CAREERPLAN_4     Category = 10063
	COLJOB_4         Category = 10064
	FINAID_4         Category = 10065
	JOBFAIR_4        Category = 10066
	JOBSEARCH_4      Category = 10067
	NURSING_4        Category = 10068
	RESUME_4         Category = 10069
	SCHOLAR_4        Category = 10070
	TELCOMMUTE_4     Category = 10071
	MILJOBS_4        Category = 10072
	CAREER_4         Category = 10073
	CHILDABUSE_4     Category = 10074
	CRIMSKILL_4      Category = 10075
	HACKING_4        Category = 10076
	HATE_4           Category = 10077
	DRUGS_4          Category = 10078
	POT_4            Category = 10079
	WAREZ_4          Category = 10080
	EDUCHEAT_4       Category = 10081
	SELFHARM_4       Category = 10082
	TORRENT_4        Category = 10083
	CRIM_4           Category = 10084
	ANON_4           Category = 10085
	CHAT_4           Category = 10086
	GROUPS_4         Category = 10087
	IM_4             Category = 10088
	LOGIN_4          Category = 10089
	BLOG_4           Category = 10090
	PHOTO_4          Category = 10091
	PROFNET_4        Category = 10092
	REDIR_4          Category = 10093
	SOCNET_4         Category = 10094
	SMS_4            Category = 10095
	TRANSLATOR_4     Category = 10096
	EMAIL_4          Category = 10097
	CARDS_4          Category = 10098
	EDU712_4         Category = 10099
	ADULTEDU_4       Category = 10100
	ARTHISTORY_4     Category = 10101
	COLADMIN_4       Category = 10102
	COLLIFE_4        Category = 10103
	DLEARNING_4      Category = 10104
	SCHOOL_4         Category = 10105
	EDSTUDIES_4      Category = 10106
	ENGLISH_4        Category = 10107
	GRADSCHOOL_4     Category = 10108
	HOMESCHOOL_4     Category = 10109
	HOMEWORK_4       Category = 10110
	K6EDU_4          Category = 10111
	LANGUAGE_4       Category = 10112
	BOOK_4           Category = 10113
	PRIVSCHOOL_4     Category = 10114
	REF_4            Category = 10115
	SPED_4           Category = 10116
	BIZEDU_4         Category = 10117
	TUTOR_4          Category = 10118
	WIKI_4           Category = 10119
	EDU_4            Category = 10120
	ENTNEWS_4        Category = 10121
	VENUE_4          Category = 10122
	HUMOR_4          Category = 10123
	MOVIE_4          Category = 10124
	MUSIC_4          Category = 10125
	AUDIO_4          Category = 10126
	VIDEO_4          Category = 10127
	TV_4             Category = 10128
	ENT_4            Category = 10129
	ADOPT_4          Category = 10130
	TODDLER_4        Category = 10131
	PRESCHOOL_4      Category = 10132
	ELDERCARE_4      Category = 10133
	FAMILYNET_4      Category = 10134
	K6PARENT_4       Category = 10135
	PARENTEEN_4      Category = 10136
	PREGNANCY_4      Category = 10137
	SNKPARENT_4      Category = 10138
	FAMILY_4         Category = 10139
	ACCESSORY_4      Category = 10140
	BEAUTY_4         Category = 10141
	BODYART_4        Category = 10142
	CLOTHING_4       Category = 10143
	FASHNMISC_4      Category = 10144
	JEWELRY_4        Category = 10145
	SWIMSUIT_4       Category = 10146
	FASHION_4        Category = 10147
	ACCTG_4          Category = 10148
	BANK_4           Category = 10149
	BGNINVEST_4      Category = 10150
	LOAN_4           Category = 10151
	FINNEWS_4        Category = 10152
	FINPLAN_4        Category = 10153
	HEDGEFUND_4      Category = 10154
	INSURANCE_4      Category = 10155
	INVEST_4         Category = 10156
	MUTUALFUND_4     Category = 10157
	QUOTES_4         Category = 10158
	FINANCEOPT_4     Category = 10159
	RETIREPLAN_4     Category = 10160
	STOCKS_4         Category = 10161
	TAX_4            Category = 10162
	FINANCE_4        Category = 10163
	USFOOD_4         Category = 10164
	BBQ_4            Category = 10165
	CAJUNFOOD_4      Category = 10166
	ZHFOOD_4         Category = 10167
	COCKTAIL_4       Category = 10168
	COFFEE_4         Category = 10169
	CUISINE_4        Category = 10170
	DESSERT_4        Category = 10171
	DININGOUT_4      Category = 10172
	FUDALLERGY_4     Category = 10173
	FRFOOD_4         Category = 10174
	LOWFAT_4         Category = 10175
	ITFOOD_4         Category = 10176
	JAFOOD_4         Category = 10177
	MXFOOD_4         Category = 10178
	VEGAN_4          Category = 10179
	VEGETARIAN_4     Category = 10180
	WINE_4           Category = 10181
	FOOD_4           Category = 10182
	ADHD_4           Category = 10183
	AIDS_4           Category = 10184
	ALLERGY_4        Category = 10185
	ALTMED_4         Category = 10186
	ARTHRITIS_4      Category = 10187
	ASTHMA_4         Category = 10188
	AUTISM_4         Category = 10189
	BIPOLAR_4        Category = 10190
	TUMOR_4          Category = 10191
	CANCER_4         Category = 10192
	KIDHEALTH_4      Category = 10193
	CHOLESTER_4      Category = 10194
	FATIGUE_4        Category = 10195
	PAIN_4           Category = 10196
	FLU_4            Category = 10197
	PSURGERY_4       Category = 10198
	DEAFNESS_4       Category = 10199
	DENTAL_4         Category = 10200
	DEPRESSION_4     Category = 10201
	DERMA_4          Category = 10202
	DIABETES_4       Category = 10203
	DISORDER_4       Category = 10204
	EPILEPSY_4       Category = 10205
	EXERCISE_4       Category = 10206
	GERD_4           Category = 10207
	MIGRAINE_4       Category = 10208
	CARDIO_4         Category = 10209
	HERB_4           Category = 10210
	HOLISTIC_4       Category = 10211
	IBS_4            Category = 10212
	ABUSE_4          Category = 10213
	INCNTNENCE_4     Category = 10214
	INFERTILE_4      Category = 10215
	MENHEALTH_4      Category = 10216
	DIET_4           Category = 10217
	ORTHO_4          Category = 10218
	ANXIETY_4        Category = 10219
	PEDIA_4          Category = 10220
	RX_4             Category = 10221
	PHYTHERAPY_4     Category = 10222
	PSYCH_4          Category = 10223
	ADDICTION_4      Category = 10224
	SRHEALTH_4       Category = 10225
	SEXUALITY_4      Category = 10226
	SLEEP_4          Category = 10227
	QUITSMOKE_4      Category = 10228
	VITAMINS_4       Category = 10229
	SYNDROME_4       Category = 10230
	THYROID_4        Category = 10231
	WEIGHTLOSS_4     Category = 10232
	FEMHEALTH_4      Category = 10233
	HEALTH_4         Category = 10234
	ARTTECH_4        Category = 10235
	ARTCRAFT_4       Category = 10236
	BEADWORK_4       Category = 10237
	BIRDWATCH_4      Category = 10238
	PUZZLE_4         Category = 10239
	CANDLE_4         Category = 10240
	CARDGAME_4       Category = 10241
	CARTOON_4        Category = 10242
	CHESS_4          Category = 10243
	CIGAR_4          Category = 10244
	COLLECT_4        Category = 10245
	COMIC_4          Category = 10246
	DRAW_4           Category = 10247
	WRITE_4          Category = 10248
	GENEALOGY_4      Category = 10249
	PUBLISH_4        Category = 10250
	GUITAR_4         Category = 10251
	HOMERECORD_4     Category = 10252
	PATENT_4         Category = 10253
	MAKEJEWEL_4      Category = 10254
	MAGIC_4          Category = 10255
	NEEDLEWORK_4     Category = 10256
	PAINT_4          Category = 10257
	PHOTOHOB_4       Category = 10258
	RADIO_4          Category = 10259
	RPG_4            Category = 10260
	SCIFI_4          Category = 10261
	SCRAPBOOK_4      Category = 10262
	SCREENWRT_4      Category = 10263
	STAMP_4          Category = 10264
	THEME_4          Category = 10265
	VIDEOGAME_4      Category = 10266
	WOODWORK_4       Category = 10267
	HOBBY_4          Category = 10268
	APPLIANCE_4      Category = 10269
	ENTHOME_4        Category = 10270
	ECOSAFETY_4      Category = 10271
	GARDEN_4         Category = 10272
	HOMEREPAIR_4     Category = 10273
	HOMECINEMA_4     Category = 10274
	INTERIOR_4       Category = 10275
	LANDSCAPE_4      Category = 10276
	REMODEL_4        Category = 10277
	HOME_4           Category = 10278
	GAMES_4          Category = 10279
	KIDSPAGE_4       Category = 10280
	TOYS_4           Category = 10281
	KIDS_4           Category = 10282
	DATING_4         Category = 10283
	DIVORCE_4        Category = 10284
	ETHNIC_4         Category = 10285
	MARRIAGE_4       Category = 10286
	PARKS_4          Category = 10287
	SENIOR_4         Category = 10288
	TEENS_4          Category = 10289
	WEDDING_4        Category = 10290
	LIFESTYLE_4      Category = 10291
	ADFRAUD_4        Category = 10292
	BOTS_4           Category = 10293
	CANDC_4          Category = 10294
	COMPR_4          Category = 10295
	MALHOME_4        Category = 10296
	MAL_4            Category = 10297
	FRAUD_4          Category = 10298
	SPAM_4           Category = 10299
	SPYWARE_4        Category = 10300
	CDN_4            Category = 10301
	BLANK_4          Category = 10302
	PARKED_4         Category = 10303
	PRIVIP_4         Category = 10304
	BROKEN_4         Category = 10305
	MISC_4           Category = 10306
	IMGSEARCH_4      Category = 10307
	INTLNEWS_4       Category = 10308
	LOCALNEWS_4      Category = 10309
	MAGAZINES_4      Category = 10310
	NATLNEWS_4       Category = 10311
	PORTAL_4         Category = 10312
	SEARCH_4         Category = 10313
	NEWS_4           Category = 10314
	PAYTOSURF_4      Category = 10315
	ADWARE_4         Category = 10316
	AQUARIUM_4       Category = 10317
	BIRD_4           Category = 10318
	CAT_4            Category = 10319
	DOG_4            Category = 10320
	BIGANIMALS_4     Category = 10321
	REPTILE_4        Category = 10322
	VETMED_4         Category = 10323
	PETS_4           Category = 10324
	ADVOCACY_4       Category = 10325
	COMMENTARY_4     Category = 10326
	GOVSPONSOR_4     Category = 10327
	IMMIGRANT_4      Category = 10328
	LEGAL_4          Category = 10329
	CHARITY_4        Category = 10330
	POLITICS_4       Category = 10331
	CLUBS_4          Category = 10332
	USRESOURCE_4     Category = 10333
	GOV_4            Category = 10334
	APARTMENT_4      Category = 10335
	ARCHI_4          Category = 10336
	BNSHOME_4        Category = 10337
	PROP_4           Category = 10338
	ALTRELGN_4       Category = 10339
	ATHEISM_4        Category = 10340
	BUDDHISM_4       Category = 10341
	CATHOLIC_4       Category = 10342
	CHRISTIAN_4      Category = 10343
	HINDU_4          Category = 10344
	ISLAM_4          Category = 10345
	JUDAISM_4        Category = 10346
	LDS_4            Category = 10347
	CULT_4           Category = 10348
	PAGAN_4          Category = 10349
	RELIGION_4       Category = 10350
	ANATOMY_4        Category = 10351
	ASTROLOGY_4      Category = 10352
	BIOLOGY_4        Category = 10353
	BOTANY_4         Category = 10354
	CHEMISTRY_4      Category = 10355
	GEOGRAPHY_4      Category = 10356
	GEOLOGY_4        Category = 10357
	PARANORMAL_4     Category = 10358
	PHYSICS_4        Category = 10359
	ASTRONOMY_4      Category = 10360
	WEATHER_4        Category = 10361
	SCIENCE_4        Category = 10362
	P2PSHOP_4        Category = 10363
	CATALOG_4        Category = 10364
	SURVEY_4         Category = 10365
	COUPON_4         Category = 10366
	SHOPENGINE_4     Category = 10367
	ONLINESHOP_4     Category = 10368
	SHOPSEARCH_4     Category = 10369
	SHOP_4           Category = 10370
	AUTORACE_4       Category = 10371
	BASEBALL_4       Category = 10372
	BICYCLING_4      Category = 10373
	BODYBUILD_4      Category = 10374
	BOXING_4         Category = 10375
	KAYAK_4          Category = 10376
	CHEERLEAD_4      Category = 10377
	CLIMB_4          Category = 10378
	CRICKET_4        Category = 10379
	FIGSKATE_4       Category = 10380
	FLYFISHING_4     Category = 10381
	FOOTBALL_4       Category = 10382
	FRESHFISH_4      Category = 10383
	GAMEFISH_4       Category = 10384
	GOLF_4           Category = 10385
	HORSERACE_4      Category = 10386
	HORSES_4         Category = 10387
	INSKATE_4        Category = 10388
	MARTIALART_4     Category = 10389
	BIKING_4         Category = 10390
	NASCAR_4         Category = 10391
	OLYMPICS_4       Category = 10392
	PAINTBALL_4      Category = 10393
	MOTORACE_4       Category = 10394
	PROBASKET_4      Category = 10395
	ICEHOCKEY_4      Category = 10396
	RODEO_4          Category = 10397
	RUGBY_4          Category = 10398
	RUN_4            Category = 10399
	SAIL_4           Category = 10400
	SALTFISH_4       Category = 10401
	SCUBA_4          Category = 10402
	SKATEBOARD_4     Category = 10403
	SKI_4            Category = 10404
	SNOWBOARD_4      Category = 10405
	HUNT_4           Category = 10406
	SURF_4           Category = 10407
	SWIM_4           Category = 10408
	PINGPONG_4       Category = 10409
	TENNIS_4         Category = 10410
	VOLLEYBALL_4     Category = 10411
	WALK_4           Category = 10412
	WATERSKI_4       Category = 10413
	SOCCER_4         Category = 10414
	SPORTS_4         Category = 10415
	GRAPHICS3D_4     Category = 10416
	ANIMATION_4      Category = 10417
	ANTIVIRUS_4      Category = 10418
	CLANG_4          Category = 10419
	CAMERA_4         Category = 10420
	COMPCERT_4       Category = 10421
	COMPNET_4        Category = 10422
	PERIPHERAL_4     Category = 10423
	COMPREVIEW_4     Category = 10424
	DATABASE_4       Category = 10425
	DESKPUB_4        Category = 10426
	DESKVID_4        Category = 10427
	TECHENT_4        Category = 10428
	REPOS_4          Category = 10429
	GRAPHICS_4       Category = 10430
	DVD_4            Category = 10431
	COMPSEC_4        Category = 10432
	VOIP_4           Category = 10433
	INTERNET_4       Category = 10434
	JAVA_4           Category = 10435
	JAVASCRIPT_4     Category = 10436
	LINUX_4          Category = 10437
	MAC_4            Category = 10438
	MACSUPPORT_4     Category = 10439
	MOBILE_4         Category = 10440
	MP3_4            Category = 10441
	NETCON_4         Category = 10442
	NETBEG_4         Category = 10443
	NETSEC_4         Category = 10444
	OFFICE_4         Category = 10445
	PDA_4            Category = 10446
	PCSUPPORT_4      Category = 10447
	P2P_4            Category = 10448
	STORAGE_4        Category = 10449
	PORTABLE_4       Category = 10450
	VPN_4            Category = 10451
	FREEWARE_4       Category = 10452
	UNIX_4           Category = 10453
	UTILITIES_4      Category = 10454
	VBASIC_4         Category = 10455
	CLIPART_4        Category = 10456
	WEBDESIGN_4      Category = 10457
	ISP_4            Category = 10458
	WINDOWS_4        Category = 10459
	TECH_4           Category = 10460
	ADVENTURE_4      Category = 10461
	AFRICA_4         Category = 10462
	AIRTRAVEL_4      Category = 10463
	AUSTRALIA_4      Category = 10464
	BNB_4            Category = 10465
	BDGTTRAVEL_4     Category = 10466
	BIZTRAVEL_4      Category = 10467
	USTRAVEL_4       Category = 10468
	CAMP_4           Category = 10469
	CANADA_4         Category = 10470
	CARIBBEAN_4      Category = 10471
	CRUISE_4         Category = 10472
	EASTEUROPE_4     Category = 10473
	EUROPE_4         Category = 10474
	FRANCE_4         Category = 10475
	GREECE_4         Category = 10476
	GETAWAY_4        Category = 10477
	HOTEL_4          Category = 10478
	ITALY_4          Category = 10479
	JAPAN_4          Category = 10480
	MEXICO_4         Category = 10481
	NATLPARKS_4      Category = 10482
	NAVIGATION_4     Category = 10483
	SAMERICA_4       Category = 10484
	SPA_4            Category = 10485
	THEMEPARK_4      Category = 10486
	KIDTRAVEL_4      Category = 10487
	UKTRAVEL_4       Category = 10488
	TRAVEL_4         Category = 10489
	TERRORISM_4      Category = 10490
	CRYPTOCUR_4      Category = 10491
	CRYPTOMINE_4     Category = 10492
	BLOCKCHAIN_4     Category = 10493
	FAKENEWS_4       Category = 10494
	API_4            Category = 10495
	IOT_4            Category = 10496
	AI_ML_4          Category = 10497
)

var Category_name = map[int32]string{
	0:     "UNKNOWN_CATEGORY",
	10001: "ABORTION_4",
	10002: "PROCHOICE_4",
	10003: "PROLIFE_4",
	10004: "PG13_4",
	10005: "GAMBLING_4",
	10006: "GAY_4",
	10007: "LINGERIE_4",
	10008: "NUDITY_4",
	10009: "PORN_4",
	10010: "PROFANITY_4",
	10011: "RATEDR_4",
	10012: "SEX_4",
	10013: "EDSEX_4",
	10014: "TOBACCO_4",
	10015: "MIL_4",
	10016: "VIOLENCE_4",
	10017: "WEAPONS_4",
	10018: "AGGRESSIVE_4",
	10019: "FINEART_4",
	10020: "ART_4",
	10021: "AUTOPARTS_4",
	10022: "AUTOREPAIR_4",
	10023: "BUYSELLCAR_4",
	10024: "CARCULTURE_4",
	10025: "CPO_4",
	10026: "CARCONVERT_4",
	10027: "COUPE_4",
	10028: "CUV_4",
	10029: "DIESEL_4",
	10030: "EVEHICLE_4",
	10031: "HATCHBACK_4",
	10032: "HYBRIDCAR_4",
	10033: "LUXURYCAR_4",
	10034: "MINIVAN_4",
	10035: "MOTORCYCLE_4",
	10036: "OFFROAD_4",
	10037: "PERFCAR_4",
	10038: "PICKUP_4",
	10039: "ROADASSIST_4",
	10040: "SEDAN_4",
	10041: "TRUCK_4",
	10042: "VINTAGECAR_4",
	10043: "WAGON_4",
	10044: "AUTOMOTIVE_4",
	10045: "AG_4",
	10046: "BIOTECH_4",
	10047: "BIZSOFT_4",
	10048: "BUILD_4",
	10049: "FORESTRY_4",
	10050: "BIZGOV_4",
	10051: "NATURE_4",
	10052: "FURNITURE_4",
	10053: "HR_4",
	10054: "MFG_4",
	10055: "MKTG_4",
	10056: "METAL_4",
	10057: "PHYSEC_4",
	10058: "BIZPROD_4",
	10059: "RETIREHOME_4",
	10060: "SHIPPING_4",
	10061: "BUSINESS_4",
	10062: "JOBADVICE_4",
	10063: "CAREERPLAN_4",
	10064: "COLJOB_4",
	10065: "FINAID_4",
	10066: "JOBFAIR_4",
	10067: "JOBSEARCH_4",
	10068: "NURSING_4",
	10069: "RESUME_4",
	10070: "SCHOLAR_4",
	10071: "TELCOMMUTE_4",
	10072: "MILJOBS_4",
	10073: "CAREER_4",
	10074: "CHILDABUSE_4",
	10075: "CRIMSKILL_4",
	10076: "HACKING_4",
	10077: "HATE_4",
	10078: "DRUGS_4",
	10079: "POT_4",
	10080: "WAREZ_4",
	10081: "EDUCHEAT_4",
	10082: "SELFHARM_4",
	10083: "TORRENT_4",
	10084: "CRIM_4",
	10085: "ANON_4",
	10086: "CHAT_4",
	10087: "GROUPS_4",
	10088: "IM_4",
	10089: "LOGIN_4",
	10090: "BLOG_4",
	10091: "PHOTO_4",
	10092: "PROFNET_4",
	10093: "REDIR_4",
	10094: "SOCNET_4",
	10095: "SMS_4",
	10096: "TRANSLATOR_4",
	10097: "EMAIL_4",
	10098: "CARDS_4",
	10099: "EDU712_4",
	10100: "ADULTEDU_4",
	10101: "ARTHISTORY_4",
	10102: "COLADMIN_4",
	10103: "COLLIFE_4",
	10104: "DLEARNING_4",
	10105: "SCHOOL_4",
	10106: "EDSTUDIES_4",
	10107: "ENGLISH_4",
	10108: "GRADSCHOOL_4",
	10109: "HOMESCHOOL_4",
	10110: "HOMEWORK_4",
	10111: "K6EDU_4",
	10112: "LANGUAGE_4",
	10113: "BOOK_4",
	10114: "PRIVSCHOOL_4",
	10115: "REF_4",
	10116: "SPED_4",
	10117: "BIZEDU_4",
	10118: "TUTOR_4",
	10119: "WIKI_4",
	10120: "EDU_4",
	10121: "ENTNEWS_4",
	10122: "VENUE_4",
	10123: "HUMOR_4",
	10124: "MOVIE_4",
	10125: "MUSIC_4",
	10126: "AUDIO_4",
	10127: "VIDEO_4",
	10128: "TV_4",
	10129: "ENT_4",
	10130: "ADOPT_4",
	10131: "TODDLER_4",
	10132: "PRESCHOOL_4",
	10133: "ELDERCARE_4",
	10134: "FAMILYNET_4",
	10135: "K6PARENT_4",
	10136: "PARENTEEN_4",
	10137: "PREGNANCY_4",
	10138: "SNKPARENT_4",
	10139: "FAMILY_4",
	10140: "ACCESSORY_4",
	10141: "BEAUTY_4",
	10142: "BODYART_4",
	10143: "CLOTHING_4",
	10144: "FASHNMISC_4",
	10145: "JEWELRY_4",
	10146: "SWIMSUIT_4",
	10147: "FASHION_4",
	10148: "ACCTG_4",
	10149: "BANK_4",
	10150: "BGNINVEST_4",
	10151: "LOAN_4",
	10152: "FINNEWS_4",
	10153: "FINPLAN_4",
	10154: "HEDGEFUND_4",
	10155: "INSURANCE_4",
	10156: "INVEST_4",
	10157: "MUTUALFUND_4",
	10158: "QUOTES_4",
	10159: "FINANCEOPT_4",
	10160: "RETIREPLAN_4",
	10161: "STOCKS_4",
	10162: "TAX_4",
	10163: "FINANCE_4",
	10164: "USFOOD_4",
	10165: "BBQ_4",
	10166: "CAJUNFOOD_4",
	10167: "ZHFOOD_4",
	10168: "COCKTAIL_4",
	10169: "COFFEE_4",
	10170: "CUISINE_4",
	10171: "DESSERT_4",
	10172: "DININGOUT_4",
	10173: "FUDALLERGY_4",
	10174: "FRFOOD_4",
	10175: "LOWFAT_4",
	10176: "ITFOOD_4",
	10177: "JAFOOD_4",
	10178: "MXFOOD_4",
	10179: "VEGAN_4",
	10180: "VEGETARIAN_4",
	10181: "WINE_4",
	10182: "FOOD_4",
	10183: "ADHD_4",
	10184: "AIDS_4",
	10185: "ALLERGY_4",
	10186: "ALTMED_4",
	10187: "ARTHRITIS_4",
	10188: "ASTHMA_4",
	10189: "AUTISM_4",
	10190: "BIPOLAR_4",
	10191: "TUMOR_4",
	10192: "CANCER_4",
	10193: "KIDHEALTH_4",
	10194: "CHOLESTER_4",
	10195: "FATIGUE_4",
	10196: "PAIN_4",
	10197: "FLU_4",
	10198: "PSURGERY_4",
	10199: "DEAFNESS_4",
	10200: "DENTAL_4",
	10201: "DEPRESSION_4",
	10202: "DERMA_4",
	10203: "DIABETES_4",
	10204: "DISORDER_4",
	10205: "EPILEPSY_4",
	10206: "EXERCISE_4",
	10207: "GERD_4",
	10208: "MIGRAINE_4",
	10209: "CARDIO_4",
	10210: "HERB_4",
	10211: "HOLISTIC_4",
	10212: "IBS_4",
	10213: "ABUSE_4",
	10214: "INCNTNENCE_4",
	10215: "INFERTILE_4",
	10216: "MENHEALTH_4",
	10217: "DIET_4",
	10218: "ORTHO_4",
	10219: "ANXIETY_4",
	10220: "PEDIA_4",
	10221: "RX_4",
	10222: "PHYTHERAPY_4",
	10223: "PSYCH_4",
	10224: "ADDICTION_4",
	10225: "SRHEALTH_4",
	10226: "SEXUALITY_4",
	10227: "SLEEP_4",
	10228: "QUITSMOKE_4",
	10229: "VITAMINS_4",
	10230: "SYNDROME_4",
	10231: "THYROID_4",
	10232: "WEIGHTLOSS_4",
	10233: "FEMHEALTH_4",
	10234: "HEALTH_4",
	10235: "ARTTECH_4",
	10236: "ARTCRAFT_4",
	10237: "BEADWORK_4",
	10238: "BIRDWATCH_4",
	10239: "PUZZLE_4",
	10240: "CANDLE_4",
	10241: "CARDGAME_4",
	10242: "CARTOON_4",
	10243: "CHESS_4",
	10244: "CIGAR_4",
	10245: "COLLECT_4",
	10246: "COMIC_4",
	10247: "DRAW_4",
	10248: "WRITE_4",
	10249: "GENEALOGY_4",
	10250: "PUBLISH_4",
	10251: "GUITAR_4",
	10252: "HOMERECORD_4",
	10253: "PATENT_4",
	10254: "MAKEJEWEL_4",
	10255: "MAGIC_4",
	10256: "NEEDLEWORK_4",
	10257: "PAINT_4",
	10258: "PHOTOHOB_4",
	10259: "RADIO_4",
	10260: "RPG_4",
	10261: "SCIFI_4",
	10262: "SCRAPBOOK_4",
	10263: "SCREENWRT_4",
	10264: "STAMP_4",
	10265: "THEME_4",
	10266: "VIDEOGAME_4",
	10267: "WOODWORK_4",
	10268: "HOBBY_4",
	10269: "APPLIANCE_4",
	10270: "ENTHOME_4",
	10271: "ECOSAFETY_4",
	10272: "GARDEN_4",
	10273: "HOMEREPAIR_4",
	10274: "HOMECINEMA_4",
	10275: "INTERIOR_4",
	10276: "LANDSCAPE_4",
	10277: "REMODEL_4",
	10278: "HOME_4",
	10279: "GAMES_4",
	10280: "KIDSPAGE_4",
	10281: "TOYS_4",
	10282: "KIDS_4",
	10283: "DATING_4",
	10284: "DIVORCE_4",
	10285: "ETHNIC_4",
	10286: "MARRIAGE_4",
	10287: "PARKS_4",
	10288: "SENIOR_4",
	10289: "TEENS_4",
	10290: "WEDDING_4",
	10291: "LIFESTYLE_4",
	10292: "ADFRAUD_4",
	10293: "BOTS_4",
	10294: "CANDC_4",
	10295: "COMPR_4",
	10296: "MALHOME_4",
	10297: "MAL_4",
	10298: "FRAUD_4",
	10299: "SPAM_4",
	10300: "SPYWARE_4",
	10301: "CDN_4",
	10302: "BLANK_4",
	10303: "PARKED_4",
	10304: "PRIVIP_4",
	10305: "BROKEN_4",
	10306: "MISC_4",
	10307: "IMGSEARCH_4",
	10308: "INTLNEWS_4",
	10309: "LOCALNEWS_4",
	10310: "MAGAZINES_4",
	10311: "NATLNEWS_4",
	10312: "PORTAL_4",
	10313: "SEARCH_4",
	10314: "NEWS_4",
	10315: "PAYTOSURF_4",
	10316: "ADWARE_4",
	10317: "AQUARIUM_4",
	10318: "BIRD_4",
	10319: "CAT_4",
	10320: "DOG_4",
	10321: "BIGANIMALS_4",
	10322: "REPTILE_4",
	10323: "VETMED_4",
	10324: "PETS_4",
	10325: "ADVOCACY_4",
	10326: "COMMENTARY_4",
	10327: "GOVSPONSOR_4",
	10328: "IMMIGRANT_4",
	10329: "LEGAL_4",
	10330: "CHARITY_4",
	10331: "POLITICS_4",
	10332: "CLUBS_4",
	10333: "USRESOURCE_4",
	10334: "GOV_4",
	10335: "APARTMENT_4",
	10336: "ARCHI_4",
	10337: "BNSHOME_4",
	10338: "PROP_4",
	10339: "ALTRELGN_4",
	10340: "ATHEISM_4",
	10341: "BUDDHISM_4",
	10342: "CATHOLIC_4",
	10343: "CHRISTIAN_4",
	10344: "HINDU_4",
	10345: "ISLAM_4",
	10346: "JUDAISM_4",
	10347: "LDS_4",
	10348: "CULT_4",
	10349: "PAGAN_4",
	10350: "RELIGION_4",
	10351: "ANATOMY_4",
	10352: "ASTROLOGY_4",
	10353: "BIOLOGY_4",
	10354: "BOTANY_4",
	10355: "CHEMISTRY_4",
	10356: "GEOGRAPHY_4",
	10357: "GEOLOGY_4",
	10358: "PARANORMAL_4",
	10359: "PHYSICS_4",
	10360: "ASTRONOMY_4",
	10361: "WEATHER_4",
	10362: "SCIENCE_4",
	10363: "P2PSHOP_4",
	10364: "CATALOG_4",
	10365: "SURVEY_4",
	10366: "COUPON_4",
	10367: "SHOPENGINE_4",
	10368: "ONLINESHOP_4",
	10369: "SHOPSEARCH_4",
	10370: "SHOP_4",
	10371: "AUTORACE_4",
	10372: "BASEBALL_4",
	10373: "BICYCLING_4",
	10374: "BODYBUILD_4",
	10375: "BOXING_4",
	10376: "KAYAK_4",
	10377: "CHEERLEAD_4",
	10378: "CLIMB_4",
	10379: "CRICKET_4",
	10380: "FIGSKATE_4",
	10381: "FLYFISHING_4",
	10382: "FOOTBALL_4",
	10383: "FRESHFISH_4",
	10384: "GAMEFISH_4",
	10385: "GOLF_4",
	10386: "HORSERACE_4",
	10387: "HORSES_4",
	10388: "INSKATE_4",
	10389: "MARTIALART_4",
	10390: "BIKING_4",
	10391: "NASCAR_4",
	10392: "OLYMPICS_4",
	10393: "PAINTBALL_4",
	10394: "MOTORACE_4",
	10395: "PROBASKET_4",
	10396: "ICEHOCKEY_4",
	10397: "RODEO_4",
	10398: "RUGBY_4",
	10399: "RUN_4",
	10400: "SAIL_4",
	10401: "SALTFISH_4",
	10402: "SCUBA_4",
	10403: "SKATEBOARD_4",
	10404: "SKI_4",
	10405: "SNOWBOARD_4",
	10406: "HUNT_4",
	10407: "SURF_4",
	10408: "SWIM_4",
	10409: "PINGPONG_4",
	10410: "TENNIS_4",
	10411: "VOLLEYBALL_4",
	10412: "WALK_4",
	10413: "WATERSKI_4",
	10414: "SOCCER_4",
	10415: "SPORTS_4",
	10416: "GRAPHICS3D_4",
	10417: "ANIMATION_4",
	10418: "ANTIVIRUS_4",
	10419: "CLANG_4",
	10420: "CAMERA_4",
	10421: "COMPCERT_4",
	10422: "COMPNET_4",
	10423: "PERIPHERAL_4",
	10424: "COMPREVIEW_4",
	10425: "DATABASE_4",
	10426: "DESKPUB_4",
	10427: "DESKVID_4",
	10428: "TECHENT_4",
	10429: "REPOS_4",
	10430: "GRAPHICS_4",
	10431: "DVD_4",
	10432: "COMPSEC_4",
	10433: "VOIP_4",
	10434: "INTERNET_4",
	10435: "JAVA_4",
	10436: "JAVASCRIPT_4",
	10437: "LINUX_4",
	10438: "MAC_4",
	10439: "MACSUPPORT_4",
	10440: "MOBILE_4",
	10441: "MP3_4",
	10442: "NETCON_4",
	10443: "NETBEG_4",
	10444: "NETSEC_4",
	10445: "OFFICE_4",
	10446: "PDA_4",
	10447: "PCSUPPORT_4",
	10448: "P2P_4",
	10449: "STORAGE_4",
	10450: "PORTABLE_4",
	10451: "VPN_4",
	10452: "FREEWARE_4",
	10453: "UNIX_4",
	10454: "UTILITIES_4",
	10455: "VBASIC_4",
	10456: "CLIPART_4",
	10457: "WEBDESIGN_4",
	10458: "ISP_4",
	10459: "WINDOWS_4",
	10460: "TECH_4",
	10461: "ADVENTURE_4",
	10462: "AFRICA_4",
	10463: "AIRTRAVEL_4",
	10464: "AUSTRALIA_4",
	10465: "BNB_4",
	10466: "BDGTTRAVEL_4",
	10467: "BIZTRAVEL_4",
	10468: "USTRAVEL_4",
	10469: "CAMP_4",
	10470: "CANADA_4",
	10471: "CARIBBEAN_4",
	10472: "CRUISE_4",
	10473: "EASTEUROPE_4",
	10474: "EUROPE_4",
	10475: "FRANCE_4",
	10476: "GREECE_4",
	10477: "GETAWAY_4",
	10478: "HOTEL_4",
	10479: "ITALY_4",
	10480: "JAPAN_4",
	10481: "MEXICO_4",
	10482: "NATLPARKS_4",
	10483: "NAVIGATION_4",
	10484: "SAMERICA_4",
	10485: "SPA_4",
	10486: "THEMEPARK_4",
	10487: "KIDTRAVEL_4",
	10488: "UKTRAVEL_4",
	10489: "TRAVEL_4",
	10490: "TERRORISM_4",
	10491: "CRYPTOCUR_4",
	10492: "CRYPTOMINE_4",
	10493: "BLOCKCHAIN_4",
	10494: "FAKENEWS_4",
	10495: "API_4",
	10496: "IOT_4",
	10497: "AI_ML_4",
}
var Category_value = map[string]int32{
	"UNKNOWN_CATEGORY": 0,
	"ABORTION_4":       10001,
	"PROCHOICE_4":      10002,
	"PROLIFE_4":        10003,
	"PG13_4":           10004,
	"GAMBLING_4":       10005,
	"GAY_4":            10006,
	"LINGERIE_4":       10007,
	"NUDITY_4":         10008,
	"PORN_4":           10009,
	"PROFANITY_4":      10010,
	"RATEDR_4":         10011,
	"SEX_4":            10012,
	"EDSEX_4":          10013,
	"TOBACCO_4":        10014,
	"MIL_4":            10015,
	"VIOLENCE_4":       10016,
	"WEAPONS_4":        10017,
	"AGGRESSIVE_4":     10018,
	"FINEART_4":        10019,
	"ART_4":            10020,
	"AUTOPARTS_4":      10021,
	"AUTOREPAIR_4":     10022,
	"BUYSELLCAR_4":     10023,
	"CARCULTURE_4":     10024,
	"CPO_4":            10025,
	"CARCONVERT_4":     10026,
	"COUPE_4":          10027,
	"CUV_4":            10028,
	"DIESEL_4":         10029,
	"EVEHICLE_4":       10030,
	"HATCHBACK_4":      10031,
	"HYBRIDCAR_4":      10032,
	"LUXURYCAR_4":      10033,
	"MINIVAN_4":        10034,
	"MOTORCYCLE_4":     10035,
	"OFFROAD_4":        10036,
	"PERFCAR_4":        10037,
	"PICKUP_4":         10038,
	"ROADASSIST_4":     10039,
	"SEDAN_4":          10040,
	"TRUCK_4":          10041,
	"VINTAGECAR_4":     10042,
	"WAGON_4":          10043,
	"AUTOMOTIVE_4":     10044,
	"AG_4":             10045,
	"BIOTECH_4":        10046,
	"BIZSOFT_4":        10047,
	"BUILD_4":          10048,
	"FORESTRY_4":       10049,
	"BIZGOV_4":         10050,
	"NATURE_4":         10051,
	"FURNITURE_4":      10052,
	"HR_4":             10053,
	"MFG_4":            10054,
	"MKTG_4":           10055,
	"METAL_4":          10056,
	"PHYSEC_4":         10057,
	"BIZPROD_4":        10058,
	"RETIREHOME_4":     10059,
	"SHIPPING_4":       10060,
	"BUSINESS_4":       10061,
	"JOBADVICE_4":      10062,
	"CAREERPLAN_4":     10063,
	"COLJOB_4":         10064,
	"FINAID_4":         10065,
	"JOBFAIR_4":        10066,
	"JOBSEARCH_4":      10067,
	"NURSING_4":        10068,
	"RESUME_4":         10069,
	"SCHOLAR_4":        10070,
	"TELCOMMUTE_4":     10071,
	"MILJOBS_4":        10072,
	"CAREER_4":         10073,
	"CHILDABUSE_4":     10074,
	"CRIMSKILL_4":      10075,
	"HACKING_4":        10076,
	"HATE_4":           10077,
	"DRUGS_4":          10078,
	"POT_4":            10079,
	"WAREZ_4":          10080,
	"EDUCHEAT_4":       10081,
	"SELFHARM_4":       10082,
	"TORRENT_4":        10083,
	"CRIM_4":           10084,
	"ANON_4":           10085,
	"CHAT_4":           10086,
	"GROUPS_4":         10087,
	"IM_4":             10088,
	"LOGIN_4":          10089,
	"BLOG_4":           10090,
	"PHOTO_4":          10091,
	"PROFNET_4":        10092,
	"REDIR_4":          10093,
	"SOCNET_4":         10094,
	"SMS_4":            10095,
	"TRANSLATOR_4":     10096,
	"EMAIL_4":          10097,
	"CARDS_4":          10098,
	"EDU712_4":         10099,
	"ADULTEDU_4":       10100,
	"ARTHISTORY_4":     10101,
	"COLADMIN_4":       10102,
	"COLLIFE_4":        10103,
	"DLEARNING_4":      10104,
	"SCHOOL_4":         10105,
	"EDSTUDIES_4":      10106,
	"ENGLISH_4":        10107,
	"GRADSCHOOL_4":     10108,
	"HOMESCHOOL_4":     10109,
	"HOMEWORK_4":       10110,
	"K6EDU_4":          10111,
	"LANGUAGE_4":       10112,
	"BOOK_4":           10113,
	"PRIVSCHOOL_4":     10114,
	"REF_4":            10115,
	"SPED_4":           10116,
	"BIZEDU_4":         10117,
	"TUTOR_4":          10118,
	"WIKI_4":           10119,
	"EDU_4":            10120,
	"ENTNEWS_4":        10121,
	"VENUE_4":          10122,
	"HUMOR_4":          10123,
	"MOVIE_4":          10124,
	"MUSIC_4":          10125,
	"AUDIO_4":          10126,
	"VIDEO_4":          10127,
	"TV_4":             10128,
	"ENT_4":            10129,
	"ADOPT_4":          10130,
	"TODDLER_4":        10131,
	"PRESCHOOL_4":      10132,
	"ELDERCARE_4":      10133,
	"FAMILYNET_4":      10134,
	"K6PARENT_4":       10135,
	"PARENTEEN_4":      10136,
	"PREGNANCY_4":      10137,
	"SNKPARENT_4":      10138,
	"FAMILY_4":         10139,
	"ACCESSORY_4":      10140,
	"BEAUTY_4":         10141,
	"BODYART_4":        10142,
	"CLOTHING_4":       10143,
	"FASHNMISC_4":      10144,
	"JEWELRY_4":        10145,
	"SWIMSUIT_4":       10146,
	"FASHION_4":        10147,
	"ACCTG_4":          10148,
	"BANK_4":           10149,
	"BGNINVEST_4":      10150,
	"LOAN_4":           10151,
	"FINNEWS_4":        10152,
	"FINPLAN_4":        10153,
	"HEDGEFUND_4":      10154,
	"INSURANCE_4":      10155,
	"INVEST_4":         10156,
	"MUTUALFUND_4":     10157,
	"QUOTES_4":         10158,
	"FINANCEOPT_4":     10159,
	"RETIREPLAN_4":     10160,
	"STOCKS_4":         10161,
	"TAX_4":            10162,
	"FINANCE_4":        10163,
	"USFOOD_4":         10164,
	"BBQ_4":            10165,
	"CAJUNFOOD_4":      10166,
	"ZHFOOD_4":         10167,
	"COCKTAIL_4":       10168,
	"COFFEE_4":         10169,
	"CUISINE_4":        10170,
	"DESSERT_4":        10171,
	"DININGOUT_4":      10172,
	"FUDALLERGY_4":     10173,
	"FRFOOD_4":         10174,
	"LOWFAT_4":         10175,
	"ITFOOD_4":         10176,
	"JAFOOD_4":         10177,
	"MXFOOD_4":         10178,
	"VEGAN_4":          10179,
	"VEGETARIAN_4":     10180,
	"WINE_4":           10181,
	"FOOD_4":           10182,
	"ADHD_4":           10183,
	"AIDS_4":           10184,
	"ALLERGY_4":        10185,
	"ALTMED_4":         10186,
	"ARTHRITIS_4":      10187,
	"ASTHMA_4":         10188,
	"AUTISM_4":         10189,
	"BIPOLAR_4":        10190,
	"TUMOR_4":          10191,
	"CANCER_4":         10192,
	"KIDHEALTH_4":      10193,
	"CHOLESTER_4":      10194,
	"FATIGUE_4":        10195,
	"PAIN_4":           10196,
	"FLU_4":            10197,
	"PSURGERY_4":       10198,
	"DEAFNESS_4":       10199,
	"DENTAL_4":         10200,
	"DEPRESSION_4":     10201,
	"DERMA_4":          10202,
	"DIABETES_4":       10203,
	"DISORDER_4":       10204,
	"EPILEPSY_4":       10205,
	"EXERCISE_4":       10206,
	"GERD_4":           10207,
	"MIGRAINE_4":       10208,
	"CARDIO_4":         10209,
	"HERB_4":           10210,
	"HOLISTIC_4":       10211,
	"IBS_4":            10212,
	"ABUSE_4":          10213,
	"INCNTNENCE_4":     10214,
	"INFERTILE_4":      10215,
	"MENHEALTH_4":      10216,
	"DIET_4":           10217,
	"ORTHO_4":          10218,
	"ANXIETY_4":        10219,
	"PEDIA_4":          10220,
	"RX_4":             10221,
	"PHYTHERAPY_4":     10222,
	"PSYCH_4":          10223,
	"ADDICTION_4":      10224,
	"SRHEALTH_4":       10225,
	"SEXUALITY_4":      10226,
	"SLEEP_4":          10227,
	"QUITSMOKE_4":      10228,
	"VITAMINS_4":       10229,
	"SYNDROME_4":       10230,
	"THYROID_4":        10231,
	"WEIGHTLOSS_4":     10232,
	"FEMHEALTH_4":      10233,
	"HEALTH_4":         10234,
	"ARTTECH_4":        10235,
	"ARTCRAFT_4":       10236,
	"BEADWORK_4":       10237,
	"BIRDWATCH_4":      10238,
	"PUZZLE_4":         10239,
	"CANDLE_4":         10240,
	"CARDGAME_4":       10241,
	"CARTOON_4":        10242,
	"CHESS_4":          10243,
	"CIGAR_4":          10244,
	"COLLECT_4":        10245,
	"COMIC_4":          10246,
	"DRAW_4":           10247,
	"WRITE_4":          10248,
	"GENEALOGY_4":      10249,
	"PUBLISH_4":        10250,
	"GUITAR_4":         10251,
	"HOMERECORD_4":     10252,
	"PATENT_4":         10253,
	"MAKEJEWEL_4":      10254,
	"MAGIC_4":          10255,
	"NEEDLEWORK_4":     10256,
	"PAINT_4":          10257,
	"PHOTOHOB_4":       10258,
	"RADIO_4":          10259,
	"RPG_4":            10260,
	"SCIFI_4":          10261,
	"SCRAPBOOK_4":      10262,
	"SCREENWRT_4":      10263,
	"STAMP_4":          10264,
	"THEME_4":          10265,
	"VIDEOGAME_4":      10266,
	"WOODWORK_4":       10267,
	"HOBBY_4":          10268,
	"APPLIANCE_4":      10269,
	"ENTHOME_4":        10270,
	"ECOSAFETY_4":      10271,
	"GARDEN_4":         10272,
	"HOMEREPAIR_4":     10273,
	"HOMECINEMA_4":     10274,
	"INTERIOR_4":       10275,
	"LANDSCAPE_4":      10276,
	"REMODEL_4":        10277,
	"HOME_4":           10278,
	"GAMES_4":          10279,
	"KIDSPAGE_4":       10280,
	"TOYS_4":           10281,
	"KIDS_4":           10282,
	"DATING_4":         10283,
	"DIVORCE_4":        10284,
	"ETHNIC_4":         10285,
	"MARRIAGE_4":       10286,
	"PARKS_4":          10287,
	"SENIOR_4":         10288,
	"TEENS_4":          10289,
	"WEDDING_4":        10290,
	"LIFESTYLE_4":      10291,
	"ADFRAUD_4":        10292,
	"BOTS_4":           10293,
	"CANDC_4":          10294,
	"COMPR_4":          10295,
	"MALHOME_4":        10296,
	"MAL_4":            10297,
	"FRAUD_4":          10298,
	"SPAM_4":           10299,
	"SPYWARE_4":        10300,
	"CDN_4":            10301,
	"BLANK_4":          10302,
	"PARKED_4":         10303,
	"PRIVIP_4":         10304,
	"BROKEN_4":         10305,
	"MISC_4":           10306,
	"IMGSEARCH_4":      10307,
	"INTLNEWS_4":       10308,
	"LOCALNEWS_4":      10309,
	"MAGAZINES_4":      10310,
	"NATLNEWS_4":       10311,
	"PORTAL_4":         10312,
	"SEARCH_4":         10313,
	"NEWS_4":           10314,
	"PAYTOSURF_4":      10315,
	"ADWARE_4":         10316,
	"AQUARIUM_4":       10317,
	"BIRD_4":           10318,
	"CAT_4":            10319,
	"DOG_4":            10320,
	"BIGANIMALS_4":     10321,
	"REPTILE_4":        10322,
	"VETMED_4":         10323,
	"PETS_4":           10324,
	"ADVOCACY_4":       10325,
	"COMMENTARY_4":     10326,
	"GOVSPONSOR_4":     10327,
	"IMMIGRANT_4":      10328,
	"LEGAL_4":          10329,
	"CHARITY_4":        10330,
	"POLITICS_4":       10331,
	"CLUBS_4":          10332,
	"USRESOURCE_4":     10333,
	"GOV_4":            10334,
	"APARTMENT_4":      10335,
	"ARCHI_4":          10336,
	"BNSHOME_4":        10337,
	"PROP_4":           10338,
	"ALTRELGN_4":       10339,
	"ATHEISM_4":        10340,
	"BUDDHISM_4":       10341,
	"CATHOLIC_4":       10342,
	"CHRISTIAN_4":      10343,
	"HINDU_4":          10344,
	"ISLAM_4":          10345,
	"JUDAISM_4":        10346,
	"LDS_4":            10347,
	"CULT_4":           10348,
	"PAGAN_4":          10349,
	"RELIGION_4":       10350,
	"ANATOMY_4":        10351,
	"ASTROLOGY_4":      10352,
	"BIOLOGY_4":        10353,
	"BOTANY_4":         10354,
	"CHEMISTRY_4":      10355,
	"GEOGRAPHY_4":      10356,
	"GEOLOGY_4":        10357,
	"PARANORMAL_4":     10358,
	"PHYSICS_4":        10359,
	"ASTRONOMY_4":      10360,
	"WEATHER_4":        10361,
	"SCIENCE_4":        10362,
	"P2PSHOP_4":        10363,
	"CATALOG_4":        10364,
	"SURVEY_4":         10365,
	"COUPON_4":         10366,
	"SHOPENGINE_4":     10367,
	"ONLINESHOP_4":     10368,
	"SHOPSEARCH_4":     10369,
	"SHOP_4":           10370,
	"AUTORACE_4":       10371,
	"BASEBALL_4":       10372,
	"BICYCLING_4":      10373,
	"BODYBUILD_4":      10374,
	"BOXING_4":         10375,
	"KAYAK_4":          10376,
	"CHEERLEAD_4":      10377,
	"CLIMB_4":          10378,
	"CRICKET_4":        10379,
	"FIGSKATE_4":       10380,
	"FLYFISHING_4":     10381,
	"FOOTBALL_4":       10382,
	"FRESHFISH_4":      10383,
	"GAMEFISH_4":       10384,
	"GOLF_4":           10385,
	"HORSERACE_4":      10386,
	"HORSES_4":         10387,
	"INSKATE_4":        10388,
	"MARTIALART_4":     10389,
	"BIKING_4":         10390,
	"NASCAR_4":         10391,
	"OLYMPICS_4":       10392,
	"PAINTBALL_4":      10393,
	"MOTORACE_4":       10394,
	"PROBASKET_4":      10395,
	"ICEHOCKEY_4":      10396,
	"RODEO_4":          10397,
	"RUGBY_4":          10398,
	"RUN_4":            10399,
	"SAIL_4":           10400,
	"SALTFISH_4":       10401,
	"SCUBA_4":          10402,
	"SKATEBOARD_4":     10403,
	"SKI_4":            10404,
	"SNOWBOARD_4":      10405,
	"HUNT_4":           10406,
	"SURF_4":           10407,
	"SWIM_4":           10408,
	"PINGPONG_4":       10409,
	"TENNIS_4":         10410,
	"VOLLEYBALL_4":     10411,
	"WALK_4":           10412,
	"WATERSKI_4":       10413,
	"SOCCER_4":         10414,
	"SPORTS_4":         10415,
	"GRAPHICS3D_4":     10416,
	"ANIMATION_4":      10417,
	"ANTIVIRUS_4":      10418,
	"CLANG_4":          10419,
	"CAMERA_4":         10420,
	"COMPCERT_4":       10421,
	"COMPNET_4":        10422,
	"PERIPHERAL_4":     10423,
	"COMPREVIEW_4":     10424,
	"DATABASE_4":       10425,
	"DESKPUB_4":        10426,
	"DESKVID_4":        10427,
	"TECHENT_4":        10428,
	"REPOS_4":          10429,
	"GRAPHICS_4":       10430,
	"DVD_4":            10431,
	"COMPSEC_4":        10432,
	"VOIP_4":           10433,
	"INTERNET_4":       10434,
	"JAVA_4":           10435,
	"JAVASCRIPT_4":     10436,
	"LINUX_4":          10437,
	"MAC_4":            10438,
	"MACSUPPORT_4":     10439,
	"MOBILE_4":         10440,
	"MP3_4":            10441,
	"NETCON_4":         10442,
	"NETBEG_4":         10443,
	"NETSEC_4":         10444,
	"OFFICE_4":         10445,
	"PDA_4":            10446,
	"PCSUPPORT_4":      10447,
	"P2P_4":            10448,
	"STORAGE_4":        10449,
	"PORTABLE_4":       10450,
	"VPN_4":            10451,
	"FREEWARE_4":       10452,
	"UNIX_4":           10453,
	"UTILITIES_4":      10454,
	"VBASIC_4":         10455,
	"CLIPART_4":        10456,
	"WEBDESIGN_4":      10457,
	"ISP_4":            10458,
	"WINDOWS_4":        10459,
	"TECH_4":           10460,
	"ADVENTURE_4":      10461,
	"AFRICA_4":         10462,
	"AIRTRAVEL_4":      10463,
	"AUSTRALIA_4":      10464,
	"BNB_4":            10465,
	"BDGTTRAVEL_4":     10466,
	"BIZTRAVEL_4":      10467,
	"USTRAVEL_4":       10468,
	"CAMP_4":           10469,
	"CANADA_4":         10470,
	"CARIBBEAN_4":      10471,
	"CRUISE_4":         10472,
	"EASTEUROPE_4":     10473,
	"EUROPE_4":         10474,
	"FRANCE_4":         10475,
	"GREECE_4":         10476,
	"GETAWAY_4":        10477,
	"HOTEL_4":          10478,
	"ITALY_4":          10479,
	"JAPAN_4":          10480,
	"MEXICO_4":         10481,
	"NATLPARKS_4":      10482,
	"NAVIGATION_4":     10483,
	"SAMERICA_4":       10484,
	"SPA_4":            10485,
	"THEMEPARK_4":      10486,
	"KIDTRAVEL_4":      10487,
	"UKTRAVEL_4":       10488,
	"TRAVEL_4":         10489,
	"TERRORISM_4":      10490,
	"CRYPTOCUR_4":      10491,
	"CRYPTOMINE_4":     10492,
	"BLOCKCHAIN_4":     10493,
	"FAKENEWS_4":       10494,
	"API_4":            10495,
	"IOT_4":            10496,
	"AI_ML_4":          10497,
}

func (Category) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_msg_36efe93b86bc92a7, []int{0}
}

type Group int32

const (
	GROUP_UNKNOWN                   Group = 0
	GROUP_ADULT                     Group = 1
	GROUP_AGGRESSIVE                Group = 2
	GROUP_ARTS                      Group = 3
	GROUP_AUTOMOTIVE                Group = 4
	GROUP_BUSINESS                  Group = 5
	GROUP_CAREERS                   Group = 6
	GROUP_CRIMINAL_ACTIVITIES       Group = 7
	GROUP_DYNAMIC                   Group = 8
	GROUP_EDUCATION                 Group = 9
	GROUP_ENTERTAINMENT             Group = 10
	GROUP_FAMILY_AND_PARENTING      Group = 11
	GROUP_FASHION                   Group = 12
	GROUP_FINANCE                   Group = 13
	GROUP_FOOD_AND_DRINK            Group = 14
	GROUP_HEALTH                    Group = 15
	GROUP_HOBBIES_AND_INTERESTS     Group = 16
	GROUP_HOME_AND_GARDEN           Group = 17
	GROUP_KIDS                      Group = 18
	GROUP_LIFESTYLE                 Group = 19
	GROUP_MALICIOUS                 Group = 20
	GROUP_MISCELLANEOUS             Group = 21
	GROUP_NEWS_PORTAL_AND_SEARCH    Group = 22
	GROUP_ONLINE_ADS                Group = 23
	GROUP_PETS                      Group = 24
	GROUP_PUBLIC_GOVERNMENT_AND_LAW Group = 25
	GROUP_REAL_ESTATE               Group = 26
	GROUP_RELIGION                  Group = 27
	GROUP_SCIENCE                   Group = 28
	GROUP_SHOPPING                  Group = 29
	GROUP_SPORTS                    Group = 30
	GROUP_TECHNOLOGY                Group = 31
	GROUP_TRAVEL                    Group = 32
)

var Group_name = map[int32]string{
	0:  "GROUP_UNKNOWN",
	1:  "GROUP_ADULT",
	2:  "GROUP_AGGRESSIVE",
	3:  "GROUP_ARTS",
	4:  "GROUP_AUTOMOTIVE",
	5:  "GROUP_BUSINESS",
	6:  "GROUP_CAREERS",
	7:  "GROUP_CRIMINAL_ACTIVITIES",
	8:  "GROUP_DYNAMIC",
	9:  "GROUP_EDUCATION",
	10: "GROUP_ENTERTAINMENT",
	11: "GROUP_FAMILY_AND_PARENTING",
	12: "GROUP_FASHION",
	13: "GROUP_FINANCE",
	14: "GROUP_FOOD_AND_DRINK",
	15: "GROUP_HEALTH",
	16: "GROUP_HOBBIES_AND_INTERESTS",
	17: "GROUP_HOME_AND_GARDEN",
	18: "GROUP_KIDS",
	19: "GROUP_LIFESTYLE",
	20: "GROUP_MALICIOUS",
	21: "GROUP_MISCELLANEOUS",
	22: "GROUP_NEWS_PORTAL_AND_SEARCH",
	23: "GROUP_ONLINE_ADS",
	24: "GROUP_PETS",
	25: "GROUP_PUBLIC_GOVERNMENT_AND_LAW",
	26: "GROUP_REAL_ESTATE",
	27: "GROUP_RELIGION",
	28: "GROUP_SCIENCE",
	29: "GROUP_SHOPPING",
	30: "GROUP_SPORTS",
	31: "GROUP_TECHNOLOGY",
	32: "GROUP_TRAVEL",
}
var Group_value = map[string]int32{
	"GROUP_UNKNOWN":                   0,
	"GROUP_ADULT":                     1,
	"GROUP_AGGRESSIVE":                2,
	"GROUP_ARTS":                      3,
	"GROUP_AUTOMOTIVE":                4,
	"GROUP_BUSINESS":                  5,
	"GROUP_CAREERS":                   6,
	"GROUP_CRIMINAL_ACTIVITIES":       7,
	"GROUP_DYNAMIC":                   8,
	"GROUP_EDUCATION":                 9,
	"GROUP_ENTERTAINMENT":             10,
	"GROUP_FAMILY_AND_PARENTING":      11,
	"GROUP_FASHION":                   12,
	"GROUP_FINANCE":                   13,
	"GROUP_FOOD_AND_DRINK":            14,
	"GROUP_HEALTH":                    15,
	"GROUP_HOBBIES_AND_INTERESTS":     16,
	"GROUP_HOME_AND_GARDEN":           17,
	"GROUP_KIDS":                      18,
	"GROUP_LIFESTYLE":                 19,
	"GROUP_MALICIOUS":                 20,
	"GROUP_MISCELLANEOUS":             21,
	"GROUP_NEWS_PORTAL_AND_SEARCH":    22,
	"GROUP_ONLINE_ADS":                23,
	"GROUP_PETS":                      24,
	"GROUP_PUBLIC_GOVERNMENT_AND_LAW": 25,
	"GROUP_REAL_ESTATE":               26,
	"GROUP_RELIGION":                  27,
	"GROUP_SCIENCE":                   28,
	"GROUP_SHOPPING":                  29,
	"GROUP_SPORTS":                    30,
	"GROUP_TECHNOLOGY":                31,
	"GROUP_TRAVEL":                    32,
}

func (Group) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_msg_36efe93b86bc92a7, []int{1}
}

type DatasetType int32

const (
	CATEGORIZATION DatasetType = 0
	// 1 is reserved
	// 2 is reserved
	// 3 is reserved
	MALICIOUS DatasetType = 4
	ECHO      DatasetType = 5
	// 6 is reserved
	LANGUAGE DatasetType = 7
)

var DatasetType_name = map[int32]string{
	0: "CATEGORIZATION",
	4: "MALICIOUS",
	5: "ECHO",
	7: "LANGUAGE",
}
var DatasetType_value = map[string]int32{
	"CATEGORIZATION": 0,
	"MALICIOUS":      4,
	"ECHO":           5,
	"LANGUAGE":       7,
}

func (DatasetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_msg_36efe93b86bc92a7, []int{2}
}

type Status struct {
	// The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// A developer-facing error message, which should be in English. Any
	// user-facing error message should be localized and sent in the
	// [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()      { *m = Status{} }
func (*Status) ProtoMessage() {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_36efe93b86bc92a7, []int{0}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(dst, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RequestID struct {
	RequestId            string   `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestID) Reset()      { *m = RequestID{} }
func (*RequestID) ProtoMessage() {}
func (*RequestID) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_36efe93b86bc92a7, []int{1}
}
func (m *RequestID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestID.Merge(dst, src)
}
func (m *RequestID) XXX_Size() int {
	return m.Size()
}
func (m *RequestID) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestID.DiscardUnknown(m)
}

var xxx_messageInfo_RequestID proto.InternalMessageInfo

func (m *RequestID) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type Suggestion struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Dataset              *Dataset `protobuf:"bytes,2,opt,name=dataset" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Suggestion) Reset()      { *m = Suggestion{} }
func (*Suggestion) ProtoMessage() {}
func (*Suggestion) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_36efe93b86bc92a7, []int{2}
}
func (m *Suggestion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Suggestion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Suggestion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Suggestion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Suggestion.Merge(dst, src)
}
func (m *Suggestion) XXX_Size() int {
	return m.Size()
}
func (m *Suggestion) XXX_DiscardUnknown() {
	xxx_messageInfo_Suggestion.DiscardUnknown(m)
}

var xxx_messageInfo_Suggestion proto.InternalMessageInfo

func (m *Suggestion) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Suggestion) GetDataset() *Dataset {
	if m != nil {
		return m.Dataset
	}
	return nil
}

// QueryStatus
type QueryStatus struct {
	Complete bool    `protobuf:"varint,1,opt,name=complete,proto3" json:"complete,omitempty"`
	Error    *Status `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	// the http status code received from the server when fetching a url
	FetchCode int32 `protobuf:"varint,3,opt,name=fetch_code,json=fetchCode,proto3" json:"fetch_code,omitempty"`
	// fetching the url resulted in a redirect to this location
	Location             string   `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryStatus) Reset()      { *m = QueryStatus{} }
func (*QueryStatus) ProtoMessage() {}
func (*QueryStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_36efe93b86bc92a7, []int{3}
}
func (m *QueryStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *QueryStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStatus.Merge(dst, src)
}
func (m *QueryStatus) XXX_Size() int {
	return m.Size()
}
func (m *QueryStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStatus.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStatus proto.InternalMessageInfo

func (m *QueryStatus) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

func (m *QueryStatus) GetError() *Status {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *QueryStatus) GetFetchCode() int32 {
	if m != nil {
		return m.FetchCode
	}
	return 0
}

func (m *QueryStatus) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

// QueryResult
type QueryResult struct {
	// Request ID for tracking requests
	RequestId            string       `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ResponseDataset      *Dataset     `protobuf:"bytes,7,opt,name=response_dataset,json=responseDataset" json:"response_dataset,omitempty"`
	Url                  string       `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty"`
	QueryStatus          *QueryStatus `protobuf:"bytes,10,opt,name=query_status,json=queryStatus" json:"query_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *QueryResult) Reset()      { *m = QueryResult{} }
func (*QueryResult) ProtoMessage() {}
func (*QueryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_36efe93b86bc92a7, []int{4}
}
func (m *QueryResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *QueryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResult.Merge(dst, src)
}
func (m *QueryResult) XXX_Size() int {
	return m.Size()
}
func (m *QueryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResult.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResult proto.InternalMessageInfo

func (m *QueryResult) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *QueryResult) GetResponseDataset() *Dataset {
	if m != nil {
		return m.ResponseDataset
	}
	return nil
}

func (m *QueryResult) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *QueryResult) GetQueryStatus() *QueryStatus {
	if m != nil {
		return m.QueryStatus
	}
	return nil
}

type URLContent struct {
	// url the content came from, not required
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// headers
	//
	// header key/value pairs
	Header map[string]string `protobuf:"bytes,3,rep,name=header" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// the actual content to process. required
	Content              string   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *URLContent) Reset()      { *m = URLContent{} }
func (*URLContent) ProtoMessage() {}
func (*URLContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_36efe93b86bc92a7, []int{5}
}
func (m *URLContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *URLContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_URLContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *URLContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_URLContent.Merge(dst, src)
}
func (m *URLContent) XXX_Size() int {
	return m.Size()
}
func (m *URLContent) XXX_DiscardUnknown() {
	xxx_messageInfo_URLContent.DiscardUnknown(m)
}

var xxx_messageInfo_URLContent proto.InternalMessageInfo

func (m *URLContent) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *URLContent) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *URLContent) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// QueryRequests
type QueryRequests struct {
	// The URLs to categorize
	Url []string `protobuf:"bytes,1,rep,name=url" json:"url,omitempty"`
	// The content to categorize
	Content []*URLContent `protobuf:"bytes,2,rep,name=content" json:"content,omitempty"`
	// The callback url will receive the final result
	Callback string `protobuf:"bytes,3,opt,name=callback,proto3" json:"callback,omitempty"`
	// The datasets to query for each URL
	Dataset              []DatasetType `protobuf:"varint,5,rep,packed,name=dataset,enum=zvelo.msg.DatasetType" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *QueryRequests) Reset()      { *m = QueryRequests{} }
func (*QueryRequests) ProtoMessage() {}
func (*QueryRequests) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_36efe93b86bc92a7, []int{6}
}
func (m *QueryRequests) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequests) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequests.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *QueryRequests) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequests.Merge(dst, src)
}
func (m *QueryRequests) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequests) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequests.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequests proto.InternalMessageInfo

func (m *QueryRequests) GetUrl() []string {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *QueryRequests) GetContent() []*URLContent {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *QueryRequests) GetCallback() string {
	if m != nil {
		return m.Callback
	}
	return ""
}

func (m *QueryRequests) GetDataset() []DatasetType {
	if m != nil {
		return m.Dataset
	}
	return nil
}

// QueryReply
type QueryReply struct {
	// will identify the request after submission
	RequestId            string   `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Error                *Status  `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryReply) Reset()      { *m = QueryReply{} }
func (*QueryReply) ProtoMessage() {}
func (*QueryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_36efe93b86bc92a7, []int{7}
}
func (m *QueryReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *QueryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReply.Merge(dst, src)
}
func (m *QueryReply) XXX_Size() int {
	return m.Size()
}
func (m *QueryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReply.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReply proto.InternalMessageInfo

func (m *QueryReply) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *QueryReply) GetError() *Status {
	if m != nil {
		return m.Error
	}
	return nil
}

// QueryReplies
type QueryReplies struct {
	Reply                []*QueryReply `protobuf:"bytes,1,rep,name=reply" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *QueryReplies) Reset()      { *m = QueryReplies{} }
func (*QueryReplies) ProtoMessage() {}
func (*QueryReplies) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_36efe93b86bc92a7, []int{8}
}
func (m *QueryReplies) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReplies) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReplies.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *QueryReplies) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReplies.Merge(dst, src)
}
func (m *QueryReplies) XXX_Size() int {
	return m.Size()
}
func (m *QueryReplies) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReplies.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReplies proto.InternalMessageInfo

func (m *QueryReplies) GetReply() []*QueryReply {
	if m != nil {
		return m.Reply
	}
	return nil
}

// Dataset
type Dataset struct {
	Categorization       *Dataset_Categorization `protobuf:"bytes,1,opt,name=categorization" json:"categorization,omitempty"`
	Malicious            *Dataset_Malicious      `protobuf:"bytes,5,opt,name=malicious" json:"malicious,omitempty"`
	Echo                 *Dataset_Echo           `protobuf:"bytes,6,opt,name=echo" json:"echo,omitempty"`
	Language             *Dataset_Language       `protobuf:"bytes,8,opt,name=language" json:"language,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Dataset) Reset()      { *m = Dataset{} }
func (*Dataset) ProtoMessage() {}
func (*Dataset) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_36efe93b86bc92a7, []int{9}
}
func (m *Dataset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dataset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dataset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Dataset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dataset.Merge(dst, src)
}
func (m *Dataset) XXX_Size() int {
	return m.Size()
}
func (m *Dataset) XXX_DiscardUnknown() {
	xxx_messageInfo_Dataset.DiscardUnknown(m)
}

var xxx_messageInfo_Dataset proto.InternalMessageInfo

func (m *Dataset) GetCategorization() *Dataset_Categorization {
	if m != nil {
		return m.Categorization
	}
	return nil
}

func (m *Dataset) GetMalicious() *Dataset_Malicious {
	if m != nil {
		return m.Malicious
	}
	return nil
}

func (m *Dataset) GetEcho() *Dataset_Echo {
	if m != nil {
		return m.Echo
	}
	return nil
}

func (m *Dataset) GetLanguage() *Dataset_Language {
	if m != nil {
		return m.Language
	}
	return nil
}

// Categorization
type Dataset_Categorization struct {
	Value                []Category `protobuf:"varint,3,rep,packed,name=value,enum=zvelo.msg.Category" json:"value,omitempty"`
	Error                *Status    `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Dataset_Categorization) Reset()      { *m = Dataset_Categorization{} }
func (*Dataset_Categorization) ProtoMessage() {}
func (*Dataset_Categorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_36efe93b86bc92a7, []int{9, 0}
}
func (m *Dataset_Categorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dataset_Categorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dataset_Categorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Dataset_Categorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dataset_Categorization.Merge(dst, src)
}
func (m *Dataset_Categorization) XXX_Size() int {
	return m.Size()
}
func (m *Dataset_Categorization) XXX_DiscardUnknown() {
	xxx_messageInfo_Dataset_Categorization.DiscardUnknown(m)
}

var xxx_messageInfo_Dataset_Categorization proto.InternalMessageInfo

func (m *Dataset_Categorization) GetValue() []Category {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Dataset_Categorization) GetError() *Status {
	if m != nil {
		return m.Error
	}
	return nil
}

type Dataset_Language struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Error                *Status  `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dataset_Language) Reset()      { *m = Dataset_Language{} }
func (*Dataset_Language) ProtoMessage() {}
func (*Dataset_Language) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_36efe93b86bc92a7, []int{9, 1}
}
func (m *Dataset_Language) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dataset_Language) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dataset_Language.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Dataset_Language) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dataset_Language.Merge(dst, src)
}
func (m *Dataset_Language) XXX_Size() int {
	return m.Size()
}
func (m *Dataset_Language) XXX_DiscardUnknown() {
	xxx_messageInfo_Dataset_Language.DiscardUnknown(m)
}

var xxx_messageInfo_Dataset_Language proto.InternalMessageInfo

func (m *Dataset_Language) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Dataset_Language) GetError() *Status {
	if m != nil {
		return m.Error
	}
	return nil
}

// Malicious
type Dataset_Malicious struct {
	Error                *Status    `protobuf:"bytes,8,opt,name=error" json:"error,omitempty"`
	Category             []Category `protobuf:"varint,9,rep,packed,name=category,enum=zvelo.msg.Category" json:"category,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Dataset_Malicious) Reset()      { *m = Dataset_Malicious{} }
func (*Dataset_Malicious) ProtoMessage() {}
func (*Dataset_Malicious) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_36efe93b86bc92a7, []int{9, 2}
}
func (m *Dataset_Malicious) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dataset_Malicious) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dataset_Malicious.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Dataset_Malicious) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dataset_Malicious.Merge(dst, src)
}
func (m *Dataset_Malicious) XXX_Size() int {
	return m.Size()
}
func (m *Dataset_Malicious) XXX_DiscardUnknown() {
	xxx_messageInfo_Dataset_Malicious.DiscardUnknown(m)
}

var xxx_messageInfo_Dataset_Malicious proto.InternalMessageInfo

func (m *Dataset_Malicious) GetError() *Status {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Dataset_Malicious) GetCategory() []Category {
	if m != nil {
		return m.Category
	}
	return nil
}

// Echo
type Dataset_Echo struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Error                *Status  `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dataset_Echo) Reset()      { *m = Dataset_Echo{} }
func (*Dataset_Echo) ProtoMessage() {}
func (*Dataset_Echo) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_36efe93b86bc92a7, []int{9, 3}
}
func (m *Dataset_Echo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dataset_Echo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dataset_Echo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Dataset_Echo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dataset_Echo.Merge(dst, src)
}
func (m *Dataset_Echo) XXX_Size() int {
	return m.Size()
}
func (m *Dataset_Echo) XXX_DiscardUnknown() {
	xxx_messageInfo_Dataset_Echo.DiscardUnknown(m)
}

var xxx_messageInfo_Dataset_Echo proto.InternalMessageInfo

func (m *Dataset_Echo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Dataset_Echo) GetError() *Status {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*Status)(nil), "zvelo.msg.Status")
	golang_proto.RegisterType((*Status)(nil), "zvelo.msg.Status")
	proto.RegisterType((*RequestID)(nil), "zvelo.msg.RequestID")
	golang_proto.RegisterType((*RequestID)(nil), "zvelo.msg.RequestID")
	proto.RegisterType((*Suggestion)(nil), "zvelo.msg.Suggestion")
	golang_proto.RegisterType((*Suggestion)(nil), "zvelo.msg.Suggestion")
	proto.RegisterType((*QueryStatus)(nil), "zvelo.msg.QueryStatus")
	golang_proto.RegisterType((*QueryStatus)(nil), "zvelo.msg.QueryStatus")
	proto.RegisterType((*QueryResult)(nil), "zvelo.msg.QueryResult")
	golang_proto.RegisterType((*QueryResult)(nil), "zvelo.msg.QueryResult")
	proto.RegisterType((*URLContent)(nil), "zvelo.msg.URLContent")
	golang_proto.RegisterType((*URLContent)(nil), "zvelo.msg.URLContent")
	proto.RegisterMapType((map[string]string)(nil), "zvelo.msg.URLContent.HeaderEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "zvelo.msg.URLContent.HeaderEntry")
	proto.RegisterType((*QueryRequests)(nil), "zvelo.msg.QueryRequests")
	golang_proto.RegisterType((*QueryRequests)(nil), "zvelo.msg.QueryRequests")
	proto.RegisterType((*QueryReply)(nil), "zvelo.msg.QueryReply")
	golang_proto.RegisterType((*QueryReply)(nil), "zvelo.msg.QueryReply")
	proto.RegisterType((*QueryReplies)(nil), "zvelo.msg.QueryReplies")
	golang_proto.RegisterType((*QueryReplies)(nil), "zvelo.msg.QueryReplies")
	proto.RegisterType((*Dataset)(nil), "zvelo.msg.Dataset")
	golang_proto.RegisterType((*Dataset)(nil), "zvelo.msg.Dataset")
	proto.RegisterType((*Dataset_Categorization)(nil), "zvelo.msg.Dataset.Categorization")
	golang_proto.RegisterType((*Dataset_Categorization)(nil), "zvelo.msg.Dataset.Categorization")
	proto.RegisterType((*Dataset_Language)(nil), "zvelo.msg.Dataset.Language")
	golang_proto.RegisterType((*Dataset_Language)(nil), "zvelo.msg.Dataset.Language")
	proto.RegisterType((*Dataset_Malicious)(nil), "zvelo.msg.Dataset.Malicious")
	golang_proto.RegisterType((*Dataset_Malicious)(nil), "zvelo.msg.Dataset.Malicious")
	proto.RegisterType((*Dataset_Echo)(nil), "zvelo.msg.Dataset.Echo")
	golang_proto.RegisterType((*Dataset_Echo)(nil), "zvelo.msg.Dataset.Echo")
	proto.RegisterEnum("zvelo.msg.Category", Category_name, Category_value)
	golang_proto.RegisterEnum("zvelo.msg.Category", Category_name, Category_value)
	proto.RegisterEnum("zvelo.msg.Group", Group_name, Group_value)
	golang_proto.RegisterEnum("zvelo.msg.Group", Group_name, Group_value)
	proto.RegisterEnum("zvelo.msg.DatasetType", DatasetType_name, DatasetType_value)
	golang_proto.RegisterEnum("zvelo.msg.DatasetType", DatasetType_name, DatasetType_value)
}
func (x Category) String() string {
	s, ok := Category_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Group) String() string {
	s, ok := Group_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DatasetType) String() string {
	s, ok := DatasetType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Status) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Status)
	if !ok {
		that2, ok := that.(Status)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Status")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Status but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Status but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	return nil
}
func (this *Status) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Status)
	if !ok {
		that2, ok := that.(Status)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *RequestID) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RequestID)
	if !ok {
		that2, ok := that.(RequestID)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RequestID")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RequestID but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RequestID but is not nil && this == nil")
	}
	if this.RequestId != that1.RequestId {
		return fmt.Errorf("RequestId this(%v) Not Equal that(%v)", this.RequestId, that1.RequestId)
	}
	return nil
}
func (this *RequestID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestID)
	if !ok {
		that2, ok := that.(RequestID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	return true
}
func (this *Suggestion) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Suggestion)
	if !ok {
		that2, ok := that.(Suggestion)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Suggestion")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Suggestion but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Suggestion but is not nil && this == nil")
	}
	if this.Url != that1.Url {
		return fmt.Errorf("Url this(%v) Not Equal that(%v)", this.Url, that1.Url)
	}
	if !this.Dataset.Equal(that1.Dataset) {
		return fmt.Errorf("Dataset this(%v) Not Equal that(%v)", this.Dataset, that1.Dataset)
	}
	return nil
}
func (this *Suggestion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Suggestion)
	if !ok {
		that2, ok := that.(Suggestion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if !this.Dataset.Equal(that1.Dataset) {
		return false
	}
	return true
}
func (this *QueryStatus) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryStatus)
	if !ok {
		that2, ok := that.(QueryStatus)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryStatus")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryStatus but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryStatus but is not nil && this == nil")
	}
	if this.Complete != that1.Complete {
		return fmt.Errorf("Complete this(%v) Not Equal that(%v)", this.Complete, that1.Complete)
	}
	if !this.Error.Equal(that1.Error) {
		return fmt.Errorf("Error this(%v) Not Equal that(%v)", this.Error, that1.Error)
	}
	if this.FetchCode != that1.FetchCode {
		return fmt.Errorf("FetchCode this(%v) Not Equal that(%v)", this.FetchCode, that1.FetchCode)
	}
	if this.Location != that1.Location {
		return fmt.Errorf("Location this(%v) Not Equal that(%v)", this.Location, that1.Location)
	}
	return nil
}
func (this *QueryStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryStatus)
	if !ok {
		that2, ok := that.(QueryStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Complete != that1.Complete {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if this.FetchCode != that1.FetchCode {
		return false
	}
	if this.Location != that1.Location {
		return false
	}
	return true
}
func (this *QueryResult) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryResult)
	if !ok {
		that2, ok := that.(QueryResult)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryResult")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryResult but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryResult but is not nil && this == nil")
	}
	if this.RequestId != that1.RequestId {
		return fmt.Errorf("RequestId this(%v) Not Equal that(%v)", this.RequestId, that1.RequestId)
	}
	if !this.ResponseDataset.Equal(that1.ResponseDataset) {
		return fmt.Errorf("ResponseDataset this(%v) Not Equal that(%v)", this.ResponseDataset, that1.ResponseDataset)
	}
	if this.Url != that1.Url {
		return fmt.Errorf("Url this(%v) Not Equal that(%v)", this.Url, that1.Url)
	}
	if !this.QueryStatus.Equal(that1.QueryStatus) {
		return fmt.Errorf("QueryStatus this(%v) Not Equal that(%v)", this.QueryStatus, that1.QueryStatus)
	}
	return nil
}
func (this *QueryResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryResult)
	if !ok {
		that2, ok := that.(QueryResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if !this.ResponseDataset.Equal(that1.ResponseDataset) {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if !this.QueryStatus.Equal(that1.QueryStatus) {
		return false
	}
	return true
}
func (this *URLContent) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*URLContent)
	if !ok {
		that2, ok := that.(URLContent)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *URLContent")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *URLContent but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *URLContent but is not nil && this == nil")
	}
	if this.Url != that1.Url {
		return fmt.Errorf("Url this(%v) Not Equal that(%v)", this.Url, that1.Url)
	}
	if len(this.Header) != len(that1.Header) {
		return fmt.Errorf("Header this(%v) Not Equal that(%v)", len(this.Header), len(that1.Header))
	}
	for i := range this.Header {
		if this.Header[i] != that1.Header[i] {
			return fmt.Errorf("Header this[%v](%v) Not Equal that[%v](%v)", i, this.Header[i], i, that1.Header[i])
		}
	}
	if this.Content != that1.Content {
		return fmt.Errorf("Content this(%v) Not Equal that(%v)", this.Content, that1.Content)
	}
	return nil
}
func (this *URLContent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLContent)
	if !ok {
		that2, ok := that.(URLContent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if len(this.Header) != len(that1.Header) {
		return false
	}
	for i := range this.Header {
		if this.Header[i] != that1.Header[i] {
			return false
		}
	}
	if this.Content != that1.Content {
		return false
	}
	return true
}
func (this *QueryRequests) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryRequests)
	if !ok {
		that2, ok := that.(QueryRequests)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryRequests")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryRequests but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryRequests but is not nil && this == nil")
	}
	if len(this.Url) != len(that1.Url) {
		return fmt.Errorf("Url this(%v) Not Equal that(%v)", len(this.Url), len(that1.Url))
	}
	for i := range this.Url {
		if this.Url[i] != that1.Url[i] {
			return fmt.Errorf("Url this[%v](%v) Not Equal that[%v](%v)", i, this.Url[i], i, that1.Url[i])
		}
	}
	if len(this.Content) != len(that1.Content) {
		return fmt.Errorf("Content this(%v) Not Equal that(%v)", len(this.Content), len(that1.Content))
	}
	for i := range this.Content {
		if !this.Content[i].Equal(that1.Content[i]) {
			return fmt.Errorf("Content this[%v](%v) Not Equal that[%v](%v)", i, this.Content[i], i, that1.Content[i])
		}
	}
	if this.Callback != that1.Callback {
		return fmt.Errorf("Callback this(%v) Not Equal that(%v)", this.Callback, that1.Callback)
	}
	if len(this.Dataset) != len(that1.Dataset) {
		return fmt.Errorf("Dataset this(%v) Not Equal that(%v)", len(this.Dataset), len(that1.Dataset))
	}
	for i := range this.Dataset {
		if this.Dataset[i] != that1.Dataset[i] {
			return fmt.Errorf("Dataset this[%v](%v) Not Equal that[%v](%v)", i, this.Dataset[i], i, that1.Dataset[i])
		}
	}
	return nil
}
func (this *QueryRequests) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryRequests)
	if !ok {
		that2, ok := that.(QueryRequests)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Url) != len(that1.Url) {
		return false
	}
	for i := range this.Url {
		if this.Url[i] != that1.Url[i] {
			return false
		}
	}
	if len(this.Content) != len(that1.Content) {
		return false
	}
	for i := range this.Content {
		if !this.Content[i].Equal(that1.Content[i]) {
			return false
		}
	}
	if this.Callback != that1.Callback {
		return false
	}
	if len(this.Dataset) != len(that1.Dataset) {
		return false
	}
	for i := range this.Dataset {
		if this.Dataset[i] != that1.Dataset[i] {
			return false
		}
	}
	return true
}
func (this *QueryReply) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryReply)
	if !ok {
		that2, ok := that.(QueryReply)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryReply")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryReply but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryReply but is not nil && this == nil")
	}
	if this.RequestId != that1.RequestId {
		return fmt.Errorf("RequestId this(%v) Not Equal that(%v)", this.RequestId, that1.RequestId)
	}
	if !this.Error.Equal(that1.Error) {
		return fmt.Errorf("Error this(%v) Not Equal that(%v)", this.Error, that1.Error)
	}
	return nil
}
func (this *QueryReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryReply)
	if !ok {
		that2, ok := that.(QueryReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *QueryReplies) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryReplies)
	if !ok {
		that2, ok := that.(QueryReplies)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryReplies")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryReplies but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryReplies but is not nil && this == nil")
	}
	if len(this.Reply) != len(that1.Reply) {
		return fmt.Errorf("Reply this(%v) Not Equal that(%v)", len(this.Reply), len(that1.Reply))
	}
	for i := range this.Reply {
		if !this.Reply[i].Equal(that1.Reply[i]) {
			return fmt.Errorf("Reply this[%v](%v) Not Equal that[%v](%v)", i, this.Reply[i], i, that1.Reply[i])
		}
	}
	return nil
}
func (this *QueryReplies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryReplies)
	if !ok {
		that2, ok := that.(QueryReplies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Reply) != len(that1.Reply) {
		return false
	}
	for i := range this.Reply {
		if !this.Reply[i].Equal(that1.Reply[i]) {
			return false
		}
	}
	return true
}
func (this *Dataset) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Dataset)
	if !ok {
		that2, ok := that.(Dataset)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Dataset")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Dataset but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Dataset but is not nil && this == nil")
	}
	if !this.Categorization.Equal(that1.Categorization) {
		return fmt.Errorf("Categorization this(%v) Not Equal that(%v)", this.Categorization, that1.Categorization)
	}
	if !this.Malicious.Equal(that1.Malicious) {
		return fmt.Errorf("Malicious this(%v) Not Equal that(%v)", this.Malicious, that1.Malicious)
	}
	if !this.Echo.Equal(that1.Echo) {
		return fmt.Errorf("Echo this(%v) Not Equal that(%v)", this.Echo, that1.Echo)
	}
	if !this.Language.Equal(that1.Language) {
		return fmt.Errorf("Language this(%v) Not Equal that(%v)", this.Language, that1.Language)
	}
	return nil
}
func (this *Dataset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Dataset)
	if !ok {
		that2, ok := that.(Dataset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Categorization.Equal(that1.Categorization) {
		return false
	}
	if !this.Malicious.Equal(that1.Malicious) {
		return false
	}
	if !this.Echo.Equal(that1.Echo) {
		return false
	}
	if !this.Language.Equal(that1.Language) {
		return false
	}
	return true
}
func (this *Dataset_Categorization) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Dataset_Categorization)
	if !ok {
		that2, ok := that.(Dataset_Categorization)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Dataset_Categorization")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Dataset_Categorization but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Dataset_Categorization but is not nil && this == nil")
	}
	if len(this.Value) != len(that1.Value) {
		return fmt.Errorf("Value this(%v) Not Equal that(%v)", len(this.Value), len(that1.Value))
	}
	for i := range this.Value {
		if this.Value[i] != that1.Value[i] {
			return fmt.Errorf("Value this[%v](%v) Not Equal that[%v](%v)", i, this.Value[i], i, that1.Value[i])
		}
	}
	if !this.Error.Equal(that1.Error) {
		return fmt.Errorf("Error this(%v) Not Equal that(%v)", this.Error, that1.Error)
	}
	return nil
}
func (this *Dataset_Categorization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Dataset_Categorization)
	if !ok {
		that2, ok := that.(Dataset_Categorization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Value) != len(that1.Value) {
		return false
	}
	for i := range this.Value {
		if this.Value[i] != that1.Value[i] {
			return false
		}
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *Dataset_Language) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Dataset_Language)
	if !ok {
		that2, ok := that.(Dataset_Language)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Dataset_Language")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Dataset_Language but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Dataset_Language but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if !this.Error.Equal(that1.Error) {
		return fmt.Errorf("Error this(%v) Not Equal that(%v)", this.Error, that1.Error)
	}
	return nil
}
func (this *Dataset_Language) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Dataset_Language)
	if !ok {
		that2, ok := that.(Dataset_Language)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *Dataset_Malicious) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Dataset_Malicious)
	if !ok {
		that2, ok := that.(Dataset_Malicious)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Dataset_Malicious")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Dataset_Malicious but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Dataset_Malicious but is not nil && this == nil")
	}
	if !this.Error.Equal(that1.Error) {
		return fmt.Errorf("Error this(%v) Not Equal that(%v)", this.Error, that1.Error)
	}
	if len(this.Category) != len(that1.Category) {
		return fmt.Errorf("Category this(%v) Not Equal that(%v)", len(this.Category), len(that1.Category))
	}
	for i := range this.Category {
		if this.Category[i] != that1.Category[i] {
			return fmt.Errorf("Category this[%v](%v) Not Equal that[%v](%v)", i, this.Category[i], i, that1.Category[i])
		}
	}
	return nil
}
func (this *Dataset_Malicious) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Dataset_Malicious)
	if !ok {
		that2, ok := that.(Dataset_Malicious)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if len(this.Category) != len(that1.Category) {
		return false
	}
	for i := range this.Category {
		if this.Category[i] != that1.Category[i] {
			return false
		}
	}
	return true
}
func (this *Dataset_Echo) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Dataset_Echo)
	if !ok {
		that2, ok := that.(Dataset_Echo)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Dataset_Echo")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Dataset_Echo but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Dataset_Echo but is not nil && this == nil")
	}
	if this.Url != that1.Url {
		return fmt.Errorf("Url this(%v) Not Equal that(%v)", this.Url, that1.Url)
	}
	if !this.Error.Equal(that1.Error) {
		return fmt.Errorf("Error this(%v) Not Equal that(%v)", this.Error, that1.Error)
	}
	return nil
}
func (this *Dataset_Echo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Dataset_Echo)
	if !ok {
		that2, ok := that.(Dataset_Echo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *Status) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgpb.Status{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msgpb.RequestID{")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Suggestion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgpb.Suggestion{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	if this.Dataset != nil {
		s = append(s, "Dataset: "+fmt.Sprintf("%#v", this.Dataset)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&msgpb.QueryStatus{")
	s = append(s, "Complete: "+fmt.Sprintf("%#v", this.Complete)+",\n")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "FetchCode: "+fmt.Sprintf("%#v", this.FetchCode)+",\n")
	s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&msgpb.QueryResult{")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	if this.ResponseDataset != nil {
		s = append(s, "ResponseDataset: "+fmt.Sprintf("%#v", this.ResponseDataset)+",\n")
	}
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	if this.QueryStatus != nil {
		s = append(s, "QueryStatus: "+fmt.Sprintf("%#v", this.QueryStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *URLContent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&msgpb.URLContent{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	keysForHeader := make([]string, 0, len(this.Header))
	for k, _ := range this.Header {
		keysForHeader = append(keysForHeader, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeader)
	mapStringForHeader := "map[string]string{"
	for _, k := range keysForHeader {
		mapStringForHeader += fmt.Sprintf("%#v: %#v,", k, this.Header[k])
	}
	mapStringForHeader += "}"
	if this.Header != nil {
		s = append(s, "Header: "+mapStringForHeader+",\n")
	}
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryRequests) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&msgpb.QueryRequests{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	if this.Content != nil {
		s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	}
	s = append(s, "Callback: "+fmt.Sprintf("%#v", this.Callback)+",\n")
	s = append(s, "Dataset: "+fmt.Sprintf("%#v", this.Dataset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgpb.QueryReply{")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryReplies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msgpb.QueryReplies{")
	if this.Reply != nil {
		s = append(s, "Reply: "+fmt.Sprintf("%#v", this.Reply)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Dataset) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&msgpb.Dataset{")
	if this.Categorization != nil {
		s = append(s, "Categorization: "+fmt.Sprintf("%#v", this.Categorization)+",\n")
	}
	if this.Malicious != nil {
		s = append(s, "Malicious: "+fmt.Sprintf("%#v", this.Malicious)+",\n")
	}
	if this.Echo != nil {
		s = append(s, "Echo: "+fmt.Sprintf("%#v", this.Echo)+",\n")
	}
	if this.Language != nil {
		s = append(s, "Language: "+fmt.Sprintf("%#v", this.Language)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Dataset_Categorization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgpb.Dataset_Categorization{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Dataset_Language) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgpb.Dataset_Language{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Dataset_Malicious) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgpb.Dataset_Malicious{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Dataset_Echo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgpb.Dataset_Echo{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMsg(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for APIv1 service

type APIv1Client interface {
	// Create new query
	Query(ctx context.Context, in *QueryRequests, opts ...grpc.CallOption) (*QueryReplies, error)
	// Results of active or unexpired query
	Result(ctx context.Context, in *RequestID, opts ...grpc.CallOption) (*QueryResult, error)
	// Suggest new datasets for a URL
	Suggest(ctx context.Context, in *Suggestion, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stream returns all QueryResult messages processed by zveloAPI
	Stream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (APIv1_StreamClient, error)
}

type aPIv1Client struct {
	cc *grpc.ClientConn
}

func NewAPIv1Client(cc *grpc.ClientConn) APIv1Client {
	return &aPIv1Client{cc}
}

func (c *aPIv1Client) Query(ctx context.Context, in *QueryRequests, opts ...grpc.CallOption) (*QueryReplies, error) {
	out := new(QueryReplies)
	err := c.cc.Invoke(ctx, "/zvelo.msg.APIv1/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIv1Client) Result(ctx context.Context, in *RequestID, opts ...grpc.CallOption) (*QueryResult, error) {
	out := new(QueryResult)
	err := c.cc.Invoke(ctx, "/zvelo.msg.APIv1/Result", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIv1Client) Suggest(ctx context.Context, in *Suggestion, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/zvelo.msg.APIv1/Suggest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIv1Client) Stream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (APIv1_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_APIv1_serviceDesc.Streams[0], "/zvelo.msg.APIv1/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIv1StreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type APIv1_StreamClient interface {
	Recv() (*QueryResult, error)
	grpc.ClientStream
}

type aPIv1StreamClient struct {
	grpc.ClientStream
}

func (x *aPIv1StreamClient) Recv() (*QueryResult, error) {
	m := new(QueryResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for APIv1 service

type APIv1Server interface {
	// Create new query
	Query(context.Context, *QueryRequests) (*QueryReplies, error)
	// Results of active or unexpired query
	Result(context.Context, *RequestID) (*QueryResult, error)
	// Suggest new datasets for a URL
	Suggest(context.Context, *Suggestion) (*empty.Empty, error)
	// Stream returns all QueryResult messages processed by zveloAPI
	Stream(*empty.Empty, APIv1_StreamServer) error
}

func RegisterAPIv1Server(s *grpc.Server, srv APIv1Server) {
	s.RegisterService(&_APIv1_serviceDesc, srv)
}

func _APIv1_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIv1Server).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.APIv1/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIv1Server).Query(ctx, req.(*QueryRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIv1_Result_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIv1Server).Result(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.APIv1/Result",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIv1Server).Result(ctx, req.(*RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIv1_Suggest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Suggestion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIv1Server).Suggest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.APIv1/Suggest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIv1Server).Suggest(ctx, req.(*Suggestion))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIv1_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIv1Server).Stream(m, &aPIv1StreamServer{stream})
}

type APIv1_StreamServer interface {
	Send(*QueryResult) error
	grpc.ServerStream
}

type aPIv1StreamServer struct {
	grpc.ServerStream
}

func (x *aPIv1StreamServer) Send(m *QueryResult) error {
	return x.ServerStream.SendMsg(m)
}

var _APIv1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zvelo.msg.APIv1",
	HandlerType: (*APIv1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _APIv1_Query_Handler,
		},
		{
			MethodName: "Result",
			Handler:    _APIv1_Result_Handler,
		},
		{
			MethodName: "Suggest",
			Handler:    _APIv1_Suggest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _APIv1_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "msg.proto",
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *RequestID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.RequestId)))
		i += copy(dAtA[i:], m.RequestId)
	}
	return i, nil
}

func (m *Suggestion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Suggestion) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.Dataset != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Dataset.Size()))
		n1, err := m.Dataset.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *QueryStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Complete {
		dAtA[i] = 0x8
		i++
		if m.Complete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Error.Size()))
		n2, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.FetchCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.FetchCode))
	}
	if len(m.Location) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Location)))
		i += copy(dAtA[i:], m.Location)
	}
	return i, nil
}

func (m *QueryResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.RequestId)))
		i += copy(dAtA[i:], m.RequestId)
	}
	if m.ResponseDataset != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.ResponseDataset.Size()))
		n3, err := m.ResponseDataset.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.QueryStatus != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.QueryStatus.Size()))
		n4, err := m.QueryStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *URLContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *URLContent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Header) > 0 {
		for k, _ := range m.Header {
			dAtA[i] = 0x1a
			i++
			v := m.Header[k]
			mapSize := 1 + len(k) + sovMsg(uint64(len(k))) + 1 + len(v) + sovMsg(uint64(len(v)))
			i = encodeVarintMsg(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMsg(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintMsg(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *QueryRequests) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequests) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		for _, s := range m.Url {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Content) > 0 {
		for _, msg := range m.Content {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Callback) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Callback)))
		i += copy(dAtA[i:], m.Callback)
	}
	if len(m.Dataset) > 0 {
		dAtA6 := make([]byte, len(m.Dataset)*10)
		var j5 int
		for _, num := range m.Dataset {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMsg(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	return i, nil
}

func (m *QueryReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.RequestId)))
		i += copy(dAtA[i:], m.RequestId)
	}
	if m.Error != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Error.Size()))
		n7, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *QueryReplies) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReplies) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		for _, msg := range m.Reply {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Dataset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dataset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Categorization != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Categorization.Size()))
		n8, err := m.Categorization.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Malicious != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Malicious.Size()))
		n9, err := m.Malicious.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Echo != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Echo.Size()))
		n10, err := m.Echo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Language != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Language.Size()))
		n11, err := m.Language.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *Dataset_Categorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dataset_Categorization) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA13 := make([]byte, len(m.Value)*10)
		var j12 int
		for _, num := range m.Value {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMsg(dAtA, i, uint64(j12))
		i += copy(dAtA[i:], dAtA13[:j12])
	}
	if m.Error != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Error.Size()))
		n14, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *Dataset_Language) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dataset_Language) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Error.Size()))
		n15, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *Dataset_Malicious) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dataset_Malicious) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Error.Size()))
		n16, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if len(m.Category) > 0 {
		dAtA18 := make([]byte, len(m.Category)*10)
		var j17 int
		for _, num := range m.Category {
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		dAtA[i] = 0x4a
		i++
		i = encodeVarintMsg(dAtA, i, uint64(j17))
		i += copy(dAtA[i:], dAtA18[:j17])
	}
	return i, nil
}

func (m *Dataset_Echo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dataset_Echo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Error.Size()))
		n19, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func encodeVarintMsg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Status) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovMsg(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *RequestID) Size() (n int) {
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *Suggestion) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Dataset != nil {
		l = m.Dataset.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *QueryStatus) Size() (n int) {
	var l int
	_ = l
	if m.Complete {
		n += 2
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.FetchCode != 0 {
		n += 1 + sovMsg(uint64(m.FetchCode))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *QueryResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.ResponseDataset != nil {
		l = m.ResponseDataset.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.QueryStatus != nil {
		l = m.QueryStatus.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *URLContent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if len(m.Header) > 0 {
		for k, v := range m.Header {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMsg(uint64(len(k))) + 1 + len(v) + sovMsg(uint64(len(v)))
			n += mapEntrySize + 1 + sovMsg(uint64(mapEntrySize))
		}
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *QueryRequests) Size() (n int) {
	var l int
	_ = l
	if len(m.Url) > 0 {
		for _, s := range m.Url {
			l = len(s)
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	if len(m.Content) > 0 {
		for _, e := range m.Content {
			l = e.Size()
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	l = len(m.Callback)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if len(m.Dataset) > 0 {
		l = 0
		for _, e := range m.Dataset {
			l += sovMsg(uint64(e))
		}
		n += 1 + sovMsg(uint64(l)) + l
	}
	return n
}

func (m *QueryReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *QueryReplies) Size() (n int) {
	var l int
	_ = l
	if len(m.Reply) > 0 {
		for _, e := range m.Reply {
			l = e.Size()
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	return n
}

func (m *Dataset) Size() (n int) {
	var l int
	_ = l
	if m.Categorization != nil {
		l = m.Categorization.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Malicious != nil {
		l = m.Malicious.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Echo != nil {
		l = m.Echo.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Language != nil {
		l = m.Language.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *Dataset_Categorization) Size() (n int) {
	var l int
	_ = l
	if len(m.Value) > 0 {
		l = 0
		for _, e := range m.Value {
			l += sovMsg(uint64(e))
		}
		n += 1 + sovMsg(uint64(l)) + l
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *Dataset_Language) Size() (n int) {
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *Dataset_Malicious) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if len(m.Category) > 0 {
		l = 0
		for _, e := range m.Category {
			l += sovMsg(uint64(e))
		}
		n += 1 + sovMsg(uint64(l)) + l
	}
	return n
}

func (m *Dataset_Echo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func sovMsg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Status) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Status{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestID{`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Suggestion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Suggestion{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Dataset:` + strings.Replace(fmt.Sprintf("%v", this.Dataset), "Dataset", "Dataset", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryStatus{`,
		`Complete:` + fmt.Sprintf("%v", this.Complete) + `,`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Status", "Status", 1) + `,`,
		`FetchCode:` + fmt.Sprintf("%v", this.FetchCode) + `,`,
		`Location:` + fmt.Sprintf("%v", this.Location) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryResult{`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`ResponseDataset:` + strings.Replace(fmt.Sprintf("%v", this.ResponseDataset), "Dataset", "Dataset", 1) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`QueryStatus:` + strings.Replace(fmt.Sprintf("%v", this.QueryStatus), "QueryStatus", "QueryStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLContent) String() string {
	if this == nil {
		return "nil"
	}
	keysForHeader := make([]string, 0, len(this.Header))
	for k, _ := range this.Header {
		keysForHeader = append(keysForHeader, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeader)
	mapStringForHeader := "map[string]string{"
	for _, k := range keysForHeader {
		mapStringForHeader += fmt.Sprintf("%v: %v,", k, this.Header[k])
	}
	mapStringForHeader += "}"
	s := strings.Join([]string{`&URLContent{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Header:` + mapStringForHeader + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryRequests) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryRequests{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Content:` + strings.Replace(fmt.Sprintf("%v", this.Content), "URLContent", "URLContent", 1) + `,`,
		`Callback:` + fmt.Sprintf("%v", this.Callback) + `,`,
		`Dataset:` + fmt.Sprintf("%v", this.Dataset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryReply{`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryReplies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryReplies{`,
		`Reply:` + strings.Replace(fmt.Sprintf("%v", this.Reply), "QueryReply", "QueryReply", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Dataset) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Dataset{`,
		`Categorization:` + strings.Replace(fmt.Sprintf("%v", this.Categorization), "Dataset_Categorization", "Dataset_Categorization", 1) + `,`,
		`Malicious:` + strings.Replace(fmt.Sprintf("%v", this.Malicious), "Dataset_Malicious", "Dataset_Malicious", 1) + `,`,
		`Echo:` + strings.Replace(fmt.Sprintf("%v", this.Echo), "Dataset_Echo", "Dataset_Echo", 1) + `,`,
		`Language:` + strings.Replace(fmt.Sprintf("%v", this.Language), "Dataset_Language", "Dataset_Language", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Dataset_Categorization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Dataset_Categorization{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Dataset_Language) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Dataset_Language{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Dataset_Malicious) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Dataset_Malicious{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Status", "Status", 1) + `,`,
		`Category:` + fmt.Sprintf("%v", this.Category) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Dataset_Echo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Dataset_Echo{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMsg(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Suggestion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Suggestion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Suggestion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dataset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dataset == nil {
				m.Dataset = &Dataset{}
			}
			if err := m.Dataset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Complete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Complete = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Status{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FetchCode", wireType)
			}
			m.FetchCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FetchCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseDataset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponseDataset == nil {
				m.ResponseDataset = &Dataset{}
			}
			if err := m.ResponseDataset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryStatus == nil {
				m.QueryStatus = &QueryStatus{}
			}
			if err := m.QueryStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *URLContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: URLContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: URLContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMsg
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMsg
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMsg(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMsg
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Header[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequests) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequests: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequests: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = append(m.Url, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content, &URLContent{})
			if err := m.Content[len(m.Content)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callback", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Callback = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v DatasetType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (DatasetType(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Dataset = append(m.Dataset, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v DatasetType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (DatasetType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Dataset = append(m.Dataset, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dataset", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Status{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReplies) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReplies: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReplies: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply, &QueryReply{})
			if err := m.Reply[len(m.Reply)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dataset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dataset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dataset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Categorization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Categorization == nil {
				m.Categorization = &Dataset_Categorization{}
			}
			if err := m.Categorization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Malicious", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Malicious == nil {
				m.Malicious = &Dataset_Malicious{}
			}
			if err := m.Malicious.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Echo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Echo == nil {
				m.Echo = &Dataset_Echo{}
			}
			if err := m.Echo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Language == nil {
				m.Language = &Dataset_Language{}
			}
			if err := m.Language.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dataset_Categorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Categorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Categorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType == 0 {
				var v Category
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Category(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Value = append(m.Value, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Category
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Category(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Value = append(m.Value, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Status{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dataset_Language) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Language: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Language: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Status{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dataset_Malicious) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Malicious: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Malicious: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Status{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType == 0 {
				var v Category
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Category(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Category = append(m.Category, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Category
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Category(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Category = append(m.Category, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dataset_Echo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Echo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Echo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Status{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMsg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("msg.proto", fileDescriptor_msg_36efe93b86bc92a7) }
func init() { golang_proto.RegisterFile("msg.proto", fileDescriptor_msg_36efe93b86bc92a7) }

var fileDescriptor_msg_36efe93b86bc92a7 = []byte{
	// 5391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x7a, 0x69, 0x94, 0x1c, 0xc5,
	0xb1, 0x2e, 0x23, 0xcd, 0x48, 0x33, 0x25, 0x21, 0x8a, 0x42, 0x80, 0x3c, 0xe0, 0x31, 0x9e, 0xf7,
	0xe3, 0xf1, 0xf0, 0x3b, 0x92, 0x81, 0x3e, 0xf6, 0xb3, 0xdf, 0xf1, 0x8f, 0xec, 0xaa, 0xec, 0xaa,
	0x9c, 0xae, 0xaa, 0xac, 0xce, 0xaa, 0xea, 0x51, 0xeb, 0x4f, 0xdf, 0x41, 0xb4, 0x85, 0x8e, 0x25,
	0x8d, 0x3c, 0x33, 0xe2, 0x1c, 0xf9, 0x9e, 0x7b, 0x0e, 0xe0, 0x7d, 0xc1, 0x60, 0xc0, 0x6c, 0x36,
	0x9b, 0xd9, 0x57, 0x03, 0xc6, 0x80, 0x0d, 0xd8, 0xac, 0x36, 0x06, 0x9b, 0xc5, 0x80, 0x59, 0xcc,
	0x26, 0xb1, 0x98, 0xc5, 0x6c, 0x06, 0xcc, 0x6e, 0xee, 0x89, 0x2f, 0xb2, 0xbb, 0x07, 0x5b, 0xd8,
	0xbe, 0xff, 0x3a, 0x32, 0x23, 0x23, 0xbe, 0x88, 0x8c, 0x8c, 0x88, 0xcc, 0x2e, 0x67, 0x64, 0xe3,
	0xec, 0xba, 0x95, 0x9b, 0x67, 0xa6, 0xe7, 0xa6, 0xbd, 0x91, 0x2f, 0x1d, 0xda, 0xd9, 0x30, 0xbd,
	0x72, 0xe3, 0xec, 0xba, 0xd1, 0xbd, 0xd7, 0x4d, 0x4f, 0xaf, 0xdb, 0xd0, 0x59, 0x35, 0xb5, 0x79,
	0xfd, 0xaa, 0xa9, 0x4d, 0x9b, 0xa6, 0xe7, 0xa6, 0xe6, 0xd6, 0x4f, 0x6f, 0x9a, 0x65, 0xc6, 0xd1,
	0xbd, 0xec, 0x2c, 0xa8, 0x83, 0xb6, 0x7c, 0x7e, 0x55, 0x67, 0xe3, 0xe6, 0xb9, 0xad, 0x3c, 0x39,
	0xfe, 0x29, 0x67, 0x51, 0x3e, 0x37, 0x35, 0xb7, 0x65, 0xd6, 0xf3, 0x9c, 0xc1, 0xb5, 0xd3, 0x07,
	0x77, 0x56, 0x0c, 0xec, 0x33, 0xb0, 0xef, 0x90, 0xc1, 0x6f, 0x6f, 0x85, 0xb3, 0x78, 0x63, 0x67,
	0x76, 0x76, 0x6a, 0x5d, 0x67, 0xc5, 0x82, 0x7d, 0x06, 0xf6, 0x1d, 0x31, 0x5d, 0x72, 0x7c, 0x3f,
	0x67, 0xc4, 0x74, 0xbe, 0xb8, 0xa5, 0x33, 0x3b, 0xa7, 0x02, 0xef, 0xa3, 0x8e, 0x33, 0xc3, 0x44,
	0x7b, 0xfd, 0xc1, 0x10, 0x30, 0x62, 0x46, 0xec, 0x88, 0x3a, 0x78, 0x3c, 0x76, 0x9c, 0x7c, 0xcb,
	0xba, 0x75, 0x9d, 0x59, 0x42, 0xe5, 0xb9, 0xce, 0xc2, 0x2d, 0x33, 0x1b, 0x2c, 0x17, 0xfd, 0xf4,
	0xfe, 0xaf, 0xb3, 0xf8, 0xe0, 0xa9, 0xb9, 0xa9, 0xd9, 0xce, 0x1c, 0xb4, 0x2c, 0x39, 0xc0, 0x5b,
	0xd9, 0xb3, 0x6d, 0x65, 0xc0, 0x33, 0xa6, 0xcb, 0x32, 0x7e, 0xe4, 0x80, 0xb3, 0xa4, 0xb1, 0xa5,
	0x33, 0xb3, 0xd5, 0xe2, 0x1e, 0x75, 0x86, 0xd7, 0x4e, 0x6f, 0xdc, 0xbc, 0xa1, 0x33, 0xc7, 0xd8,
	0x87, 0x4d, 0x8f, 0xf6, 0xfe, 0xb7, 0x33, 0xd4, 0x99, 0x99, 0x99, 0x9e, 0xb1, 0x72, 0x77, 0x9d,
	0x27, 0x97, 0x57, 0x1b, 0x9e, 0x27, 0x0b, 0x3e, 0xdf, 0x99, 0x5b, 0x7b, 0x48, 0x1b, 0x2e, 0x58,
	0x08, 0x17, 0x8c, 0x60, 0xc4, 0x27, 0x3f, 0x8c, 0x3a, 0xc3, 0x1b, 0xa6, 0xd7, 0xc2, 0xab, 0x2b,
	0x06, 0x01, 0xbc, 0x47, 0x8f, 0x3f, 0xdc, 0xc5, 0x63, 0x3a, 0xb3, 0x5b, 0x36, 0xcc, 0xfd, 0x0b,
	0x67, 0x78, 0x9f, 0x73, 0xdc, 0x99, 0xce, 0xec, 0xe6, 0xe9, 0x4d, 0xb3, 0x9d, 0x76, 0xd7, 0xea,
	0xc5, 0x1f, 0x6a, 0xf5, 0x2e, 0x5d, 0x5e, 0x3b, 0xd0, 0xf5, 0xde, 0x70, 0xdf, 0x7b, 0x9f, 0x71,
	0x96, 0x7e, 0x91, 0xd4, 0xb7, 0x67, 0x61, 0xd1, 0x0a, 0x07, 0xc2, 0xf6, 0x98, 0x27, 0x6c, 0x9e,
	0xb7, 0xcc, 0x92, 0x2f, 0xf6, 0x89, 0x89, 0xc1, 0xe1, 0x05, 0xee, 0xc2, 0x89, 0xc1, 0xe1, 0x85,
	0xee, 0xe0, 0xc4, 0xe0, 0xf0, 0xa0, 0x3b, 0x34, 0x31, 0x38, 0x3c, 0xe4, 0x2e, 0x9a, 0x18, 0x1c,
	0x5e, 0xe4, 0x2e, 0x9e, 0x18, 0x1c, 0x1e, 0x71, 0x9d, 0xf1, 0x2b, 0x06, 0x1c, 0xa7, 0x34, 0xb1,
	0x3f, 0xbd, 0x69, 0xae, 0xb3, 0xa9, 0xa7, 0x7f, 0xc1, 0x7c, 0xfd, 0x8b, 0x0e, 0xe9, 0x4c, 0x1d,
	0xdc, 0x99, 0x59, 0xb1, 0x70, 0x9f, 0x85, 0xfb, 0x2e, 0x39, 0xe0, 0xe3, 0xf3, 0x34, 0xf7, 0x17,
	0xae, 0x8c, 0xc0, 0x23, 0x37, 0xcd, 0xcd, 0x6c, 0x35, 0x76, 0x01, 0x85, 0xd7, 0x5a, 0x9e, 0xb6,
	0x5e, 0xed, 0x92, 0xa3, 0x9f, 0x71, 0x96, 0xcc, 0x5b, 0x40, 0x5a, 0xbf, 0xd0, 0xd9, 0xda, 0x8d,
	0x99, 0x2f, 0x74, 0xb6, 0x7a, 0xcb, 0x9d, 0xa1, 0x43, 0xa7, 0x36, 0x6c, 0xe9, 0xc6, 0x25, 0x13,
	0x9f, 0x5d, 0xf0, 0xff, 0x06, 0x26, 0x06, 0x87, 0x07, 0xdc, 0x05, 0xe3, 0xe7, 0x0c, 0x38, 0x3b,
	0xdb, 0x5d, 0x81, 0xe7, 0x67, 0xfb, 0x71, 0xb7, 0xb0, 0x8b, 0x7c, 0x55, 0x5f, 0xfd, 0x02, 0x40,
	0xdf, 0x7d, 0x87, 0xd0, 0x7b, 0xa8, 0x10, 0x6a, 0x53, 0x1b, 0x36, 0x1c, 0x34, 0xb5, 0xf6, 0x0b,
	0x88, 0x91, 0x11, 0xd3, 0xa3, 0xbd, 0x4f, 0xf6, 0x83, 0x78, 0x68, 0x9f, 0x85, 0xfb, 0x2e, 0xfb,
	0xc0, 0x0e, 0xd8, 0xdd, 0x2b, 0xb6, 0x6e, 0xee, 0xf4, 0x02, 0x99, 0x3d, 0x3e, 0xfe, 0x1f, 0x8e,
	0x63, 0x71, 0x6e, 0xde, 0xb0, 0xf5, 0xef, 0x82, 0x67, 0xc1, 0xdf, 0x07, 0x4f, 0x2f, 0x9e, 0x07,
	0xff, 0x79, 0x3c, 0xb3, 0x13, 0x78, 0x67, 0xc7, 0xff, 0xbf, 0xb3, 0xb4, 0xa7, 0x61, 0x7d, 0x67,
	0xd6, 0xfb, 0x84, 0x33, 0x34, 0x43, 0xca, 0xe0, 0x8a, 0x0f, 0x1a, 0xdd, 0x47, 0x62, 0x98, 0x67,
	0xfc, 0xd4, 0x21, 0x67, 0x71, 0x37, 0xf6, 0x94, 0xb3, 0x6c, 0xed, 0xd4, 0x5c, 0x67, 0xdd, 0xf4,
	0xcc, 0xfa, 0x2f, 0xf1, 0x59, 0x18, 0x00, 0x8c, 0x8f, 0xff, 0xa3, 0xa5, 0x2b, 0xfd, 0x0f, 0x30,
	0x9a, 0xbf, 0x5b, 0xe8, 0x7d, 0xd6, 0x19, 0xd9, 0x38, 0xb5, 0x61, 0xfd, 0xda, 0xf5, 0xd3, 0x5b,
	0x66, 0x57, 0x0c, 0x41, 0xca, 0xde, 0x3b, 0x90, 0x92, 0x74, 0x79, 0x4c, 0x9f, 0xdd, 0xfb, 0x84,
	0x33, 0xd8, 0x59, 0x7b, 0xc8, 0xf4, 0x8a, 0x45, 0x58, 0xb6, 0xe7, 0x0e, 0x96, 0xc9, 0xb5, 0x87,
	0x4c, 0x1b, 0x30, 0x79, 0x9f, 0x76, 0x86, 0x37, 0x4c, 0x6d, 0x5a, 0xb7, 0x85, 0x52, 0xd8, 0x30,
	0x16, 0xec, 0xb5, 0x83, 0x05, 0xb1, 0x65, 0x31, 0x3d, 0xe6, 0xd1, 0xcd, 0xce, 0xb2, 0x0f, 0xda,
	0xe0, 0xfd, 0x9f, 0x6e, 0xc8, 0x2d, 0xc4, 0xfe, 0xee, 0x36, 0x4f, 0x8e, 0xe5, 0xdc, 0x6a, 0xe3,
	0xf0, 0x7f, 0xbe, 0x4f, 0x0b, 0xdc, 0x85, 0xa3, 0xa1, 0x33, 0xdc, 0xc5, 0xf1, 0x81, 0x64, 0x3c,
	0x62, 0x93, 0xf1, 0xbf, 0x9b, 0xcc, 0x46, 0x8f, 0x1a, 0x70, 0x46, 0x7a, 0x9e, 0xeb, 0x2f, 0x1b,
	0xfe, 0x17, 0x39, 0x70, 0x15, 0x45, 0x37, 0xdb, 0xb1, 0x62, 0xe4, 0xc3, 0x4d, 0xec, 0x31, 0xcd,
	0x07, 0xff, 0x4f, 0x92, 0xc8, 0x62, 0x77, 0x78, 0x54, 0x38, 0x83, 0xb4, 0x27, 0x3b, 0xc8, 0xfd,
	0xff, 0xae, 0x51, 0x3b, 0x54, 0xb3, 0xd8, 0x1d, 0xde, 0xef, 0xc2, 0xcf, 0x39, 0xc3, 0x5d, 0x6c,
	0xde, 0x72, 0xc7, 0x2d, 0xd3, 0x7a, 0xaa, 0x27, 0xd3, 0xb6, 0x2f, 0x0a, 0x19, 0x6a, 0xd3, 0x72,
	0x77, 0xf2, 0x76, 0x71, 0x1c, 0x51, 0xd5, 0xa6, 0x50, 0x3a, 0x6d, 0x57, 0xdc, 0xef, 0xa5, 0x9e,
	0xeb, 0x2c, 0xc9, 0x8c, 0xf6, 0x23, 0xad, 0x7c, 0xd9, 0xae, 0xb8, 0xc7, 0xa4, 0xde, 0x32, 0x67,
	0x24, 0x33, 0x3a, 0x56, 0x35, 0xa2, 0x8f, 0x4d, 0xbd, 0x25, 0xce, 0xa2, 0x2c, 0xdc, 0xff, 0xc0,
	0x76, 0xc5, 0x3d, 0x2e, 0xa5, 0xf5, 0xa1, 0x48, 0xaa, 0xb1, 0x4a, 0xc3, 0x76, 0xc5, 0xfd, 0x7e,
	0xea, 0x39, 0xce, 0x50, 0x28, 0x5a, 0xed, 0x8a, 0x7b, 0x3c, 0x26, 0x69, 0x42, 0x1a, 0x45, 0x4b,
	0x4f, 0x48, 0xbd, 0x9d, 0x9d, 0xe1, 0xb4, 0x0c, 0x54, 0x41, 0xf3, 0x27, 0xb2, 0x24, 0x6d, 0x48,
	0xf1, 0x49, 0x5d, 0xc5, 0x35, 0x91, 0xf2, 0xf4, 0xc9, 0xe0, 0x36, 0xa2, 0x90, 0x81, 0x69, 0x57,
	0xdc, 0x1f, 0x40, 0x72, 0x2e, 0x57, 0xb7, 0x2b, 0xee, 0x0f, 0x53, 0x6f, 0xa9, 0xb3, 0x58, 0x06,
	0x4c, 0x9d, 0x02, 0x84, 0x85, 0xae, 0x0a, 0xdf, 0xd7, 0xed, 0x8a, 0x7b, 0x2a, 0x38, 0x13, 0x15,
	0xb7, 0x2b, 0xee, 0x69, 0xc0, 0xd0, 0x54, 0x3a, 0x96, 0x29, 0xcc, 0x39, 0x1d, 0xcc, 0x93, 0x52,
	0x64, 0x3a, 0xcd, 0xdb, 0x15, 0xf7, 0x8c, 0xd4, 0xdb, 0xd5, 0x59, 0x2a, 0xc2, 0xd0, 0xc8, 0x3c,
	0x57, 0x4d, 0x62, 0xf9, 0x11, 0x58, 0x6a, 0x2a, 0x95, 0xc2, 0x14, 0xed, 0x8a, 0x7b, 0x26, 0xe4,
	0xf1, 0xef, 0xb3, 0x00, 0x53, 0x94, 0x85, 0xce, 0x84, 0x29, 0x48, 0xc0, 0xd9, 0x2c, 0xa0, 0x2c,
	0xb4, 0x91, 0x99, 0x50, 0x04, 0xf5, 0x1c, 0x0c, 0x55, 0xcb, 0x56, 0x2e, 0xe3, 0xd8, 0x17, 0x34,
	0x74, 0x2e, 0x86, 0x7c, 0x61, 0xfc, 0x32, 0x2e, 0x4a, 0x43, 0x6a, 0xce, 0x83, 0x58, 0x3f, 0x23,
	0xc8, 0xe7, 0xf7, 0xa6, 0x75, 0xda, 0x94, 0xd0, 0x74, 0x01, 0x6c, 0xf4, 0x75, 0x99, 0x11, 0xf3,
	0x85, 0xcc, 0x5c, 0x36, 0xdb, 0x15, 0xf7, 0x22, 0x38, 0x26, 0x50, 0x32, 0x97, 0x64, 0xe2, 0xc5,
	0x30, 0x51, 0x36, 0x65, 0xa4, 0xfc, 0x98, 0x78, 0x2f, 0x01, 0xc6, 0x48, 0x14, 0x7e, 0x54, 0x15,
	0x7e, 0xbd, 0x5d, 0x71, 0x7f, 0xcc, 0x23, 0xad, 0xaa, 0x51, 0x01, 0xe3, 0xb9, 0x14, 0x23, 0x71,
	0xb9, 0xba, 0x34, 0x2d, 0x1e, 0xb9, 0x0c, 0x56, 0x27, 0x2a, 0x55, 0x4d, 0x41, 0x1b, 0x72, 0x39,
	0x20, 0x25, 0xba, 0xd0, 0xc6, 0x6f, 0xb1, 0xe0, 0x9f, 0x80, 0x45, 0xd7, 0x6a, 0x46, 0x8b, 0xa0,
	0x5d, 0x71, 0xaf, 0xe0, 0xd0, 0x90, 0xa6, 0xc6, 0x22, 0x7e, 0x0a, 0x60, 0x99, 0xf2, 0xeb, 0x65,
	0xd6, 0xae, 0xb8, 0x57, 0x42, 0x02, 0xf1, 0x8a, 0x3c, 0x57, 0x39, 0x19, 0x75, 0x15, 0x8c, 0xca,
	0x65, 0x00, 0x15, 0x57, 0x83, 0x2a, 0x4c, 0x09, 0x90, 0x3f, 0x03, 0x7b, 0x53, 0xa5, 0x85, 0x08,
	0x25, 0x0b, 0xfc, 0x39, 0x18, 0x26, 0x45, 0x88, 0xd8, 0xbc, 0xa6, 0xe7, 0xe9, 0x44, 0x17, 0xbc,
	0x55, 0xd7, 0xa6, 0xde, 0x88, 0x33, 0x28, 0x28, 0xf2, 0xae, 0x03, 0x98, 0xaa, 0xd2, 0x85, 0xf4,
	0xa3, 0x76, 0xc5, 0xfd, 0x85, 0xa5, 0xd7, 0xe4, 0xba, 0x46, 0xaa, 0x7f, 0x09, 0x59, 0xd5, 0x52,
	0xc5, 0x04, 0xfd, 0x7a, 0x38, 0xad, 0xa6, 0x8d, 0xcc, 0x0b, 0x43, 0xd1, 0x76, 0x03, 0xb0, 0x57,
	0xd5, 0x9a, 0x50, 0x93, 0x8f, 0x6f, 0xe4, 0x50, 0x15, 0x76, 0xaf, 0x6e, 0x82, 0xbb, 0x6a, 0xa5,
	0x49, 0x95, 0x1d, 0xb9, 0x19, 0x9a, 0x23, 0x42, 0x79, 0x0b, 0xc7, 0x5b, 0x8d, 0x50, 0xfc, 0x0a,
	0x31, 0x9d, 0xd4, 0x0b, 0x22, 0x7e, 0x0d, 0x95, 0x89, 0x2c, 0x04, 0xed, 0xd3, 0xad, 0xec, 0x9d,
	0xa8, 0x95, 0x4b, 0xbf, 0x5d, 0x71, 0x7f, 0xd3, 0xc5, 0x97, 0x19, 0x4d, 0x88, 0x6e, 0x63, 0x6f,
	0xc9, 0x42, 0x19, 0x19, 0xe9, 0x84, 0x74, 0xdc, 0x0e, 0x90, 0x79, 0xa4, 0xb2, 0x8c, 0x4f, 0xd7,
	0x6f, 0x31, 0x50, 0x2d, 0x73, 0x95, 0xca, 0x9c, 0x82, 0xef, 0x77, 0xc0, 0x35, 0xa1, 0xab, 0x22,
	0x68, 0xf2, 0x71, 0xbd, 0xa3, 0x1b, 0x49, 0x52, 0x9a, 0x2c, 0x86, 0x9b, 0xef, 0x84, 0x62, 0x5f,
	0xc7, 0x13, 0xba, 0xda, 0xae, 0xb8, 0x77, 0x81, 0xac, 0xa9, 0x54, 0x28, 0xd2, 0x7b, 0x37, 0x70,
	0x4c, 0xe8, 0x6a, 0x8d, 0x83, 0xf7, 0xf7, 0x5d, 0x91, 0xb9, 0x14, 0x06, 0x9e, 0xbc, 0x07, 0x1c,
	0x69, 0x69, 0x72, 0x46, 0x71, 0x2f, 0x1f, 0x4c, 0x99, 0x97, 0x40, 0x79, 0x1f, 0xa6, 0x73, 0x3f,
	0xd2, 0x31, 0x36, 0xed, 0x0f, 0x40, 0x50, 0xc8, 0xd8, 0xd7, 0x49, 0x52, 0x16, 0xc4, 0x72, 0xbf,
	0x8d, 0x2d, 0x42, 0x40, 0xb0, 0x1f, 0x60, 0x44, 0x00, 0xd9, 0xae, 0xb8, 0x0f, 0x32, 0xe6, 0x48,
	0xc5, 0x81, 0xa8, 0x96, 0x39, 0xad, 0x78, 0x08, 0x28, 0x7c, 0xa3, 0x92, 0xbc, 0xae, 0x62, 0x72,
	0xdf, 0x1f, 0x21, 0x23, 0x12, 0x7e, 0x9d, 0x51, 0x3c, 0x0c, 0x4f, 0x47, 0x02, 0x0a, 0x1e, 0x81,
	0xa7, 0x03, 0x53, 0x86, 0x24, 0xfe, 0x51, 0x6c, 0x48, 0xa6, 0x69, 0xdb, 0x1f, 0xb3, 0x21, 0x64,
	0xe4, 0x9a, 0x76, 0xc5, 0x7d, 0x9c, 0xcf, 0x4a, 0x50, 0xfa, 0x91, 0x14, 0x34, 0xbd, 0x8d, 0x5d,
	0x2c, 0xe3, 0x5a, 0x24, 0x4c, 0xd2, 0xae, 0xb8, 0xdb, 0x6d, 0x32, 0x31, 0x46, 0xa6, 0xc4, 0xf0,
	0x04, 0xd4, 0x10, 0x90, 0x76, 0xc5, 0x7d, 0x12, 0x84, 0x48, 0x11, 0x8e, 0x4f, 0xf1, 0x4c, 0x04,
	0x39, 0x4f, 0xc3, 0xa2, 0xd0, 0xe8, 0x32, 0x23, 0x04, 0x7f, 0x42, 0x74, 0x60, 0xcd, 0x33, 0x00,
	0x10, 0xeb, 0x50, 0xd1, 0xa2, 0x67, 0xb1, 0xa8, 0x1a, 0x6b, 0x32, 0xe1, 0x39, 0x4c, 0x65, 0x91,
	0x2e, 0x28, 0x07, 0x3c, 0xdf, 0x4d, 0xb4, 0xb5, 0x54, 0x92, 0xc8, 0x3f, 0x63, 0xd6, 0xc8, 0x00,
	0xdb, 0xf2, 0x02, 0x14, 0xe4, 0xda, 0xe7, 0xc9, 0x17, 0x39, 0x1b, 0x26, 0xa4, 0xec, 0x25, 0x76,
	0xb8, 0x11, 0x69, 0x1e, 0x8b, 0x42, 0x13, 0xf7, 0xcb, 0x9c, 0x20, 0x13, 0x81, 0x24, 0xf8, 0x0a,
	0xa7, 0x12, 0x61, 0x02, 0x62, 0xff, 0x0b, 0x24, 0xc9, 0xa0, 0xfc, 0xf4, 0xfe, 0x07, 0xb4, 0x2b,
	0xee, 0xab, 0xf0, 0x80, 0x08, 0xca, 0xb8, 0x90, 0x41, 0xd9, 0xae, 0xb8, 0xaf, 0xf1, 0x31, 0x33,
	0x45, 0xa4, 0xf2, 0x42, 0xe3, 0x70, 0xbc, 0x0e, 0x1e, 0x5f, 0xc7, 0x22, 0x48, 0x60, 0xc6, 0x5f,
	0x81, 0xd5, 0xd7, 0xb1, 0x2d, 0x0a, 0x6f, 0x60, 0xbb, 0x82, 0x58, 0x0a, 0x93, 0xf2, 0xf6, 0xbc,
	0xc9, 0x78, 0xfd, 0x48, 0x6b, 0x82, 0xf0, 0x16, 0x18, 0x64, 0x90, 0x17, 0x25, 0x25, 0xae, 0x76,
	0xc5, 0x7d, 0x1b, 0x22, 0x64, 0x1a, 0xc6, 0x2a, 0xa7, 0x28, 0x7b, 0x07, 0x6a, 0x43, 0x23, 0x82,
	0xde, 0xa2, 0x77, 0x31, 0x44, 0x87, 0xa1, 0x37, 0xf4, 0x1e, 0x90, 0xd0, 0xd0, 0xa4, 0x36, 0x94,
	0x35, 0xfe, 0x06, 0xdb, 0xea, 0x9f, 0x62, 0xec, 0xef, 0x73, 0xc9, 0x11, 0x69, 0x58, 0x8a, 0x90,
	0x80, 0x1d, 0xa6, 0xe1, 0x6f, 0xad, 0x89, 0xf7, 0x70, 0x4d, 0xf2, 0x32, 0xa3, 0x9a, 0x3d, 0x79,
	0x47, 0x68, 0xf2, 0xa3, 0x91, 0xb5, 0x76, 0xc5, 0xfd, 0x32, 0x78, 0xf3, 0x4c, 0xd2, 0xb1, 0xf8,
	0x8a, 0xb6, 0xf9, 0x80, 0x05, 0x7f, 0x55, 0x23, 0x55, 0x95, 0xec, 0xde, 0xaf, 0x81, 0x73, 0x52,
	0xd5, 0x55, 0xbb, 0xe2, 0x7e, 0x1d, 0x22, 0x98, 0xed, 0x1b, 0x9a, 0x8d, 0x2a, 0x52, 0x39, 0x49,
	0x46, 0x7e, 0x13, 0xcb, 0x9a, 0x32, 0x2d, 0x09, 0xcc, 0xb7, 0x40, 0x45, 0x65, 0x02, 0x21, 0xdf,
	0x06, 0x95, 0xe8, 0x26, 0x6a, 0xe3, 0x77, 0x98, 0x2a, 0x73, 0x45, 0xc9, 0xe1, 0x48, 0x50, 0xa2,
	0x0c, 0x14, 0x45, 0xc6, 0x77, 0x59, 0x8a, 0x0a, 0x24, 0x51, 0x47, 0x69, 0x8a, 0xad, 0x82, 0xb2,
	0xd4, 0xd1, 0xac, 0x1a, 0x81, 0xfa, 0x3d, 0x5e, 0x12, 0xe8, 0x8c, 0xa8, 0x63, 0x34, 0x87, 0x71,
	0x10, 0xc4, 0x38, 0x62, 0xc7, 0x6a, 0x2e, 0xaf, 0x7d, 0x4f, 0x1e, 0x87, 0x11, 0x19, 0x07, 0xd2,
	0xd0, 0x41, 0xa4, 0xda, 0x8d, 0x91, 0x9a, 0x48, 0x54, 0xdc, 0xe2, 0x28, 0x3b, 0x5e, 0x93, 0x3b,
	0xeb, 0x9f, 0xca, 0x84, 0x3d, 0x0d, 0x27, 0xb0, 0x18, 0x90, 0x52, 0x52, 0x24, 0x9c, 0xd8, 0x15,
	0x1c, 0xa6, 0x22, 0xf5, 0x29, 0x58, 0x4e, 0xc2, 0x48, 0x9e, 0xd6, 0x7b, 0xab, 0x4e, 0x86, 0x2f,
	0x59, 0x30, 0x55, 0x72, 0x30, 0x08, 0xdf, 0x97, 0x79, 0xce, 0xf1, 0xf5, 0x43, 0x76, 0xb6, 0x14,
	0x25, 0x2a, 0xff, 0x29, 0x00, 0x5f, 0xd5, 0x41, 0x8b, 0x8b, 0xee, 0xa9, 0x80, 0xe1, 0xc7, 0xba,
	0x88, 0x38, 0xb8, 0x4e, 0xb3, 0x48, 0xf3, 0x28, 0x4d, 0x54, 0x4e, 0x0e, 0x3b, 0x1d, 0x4b, 0x26,
	0xe4, 0xa4, 0x8c, 0x21, 0xf1, 0x0c, 0x2c, 0xc9, 0x27, 0x55, 0x92, 0x97, 0x8a, 0x64, 0xfc, 0x08,
	0x0c, 0xb4, 0x84, 0x1b, 0x9d, 0x33, 0xd9, 0x5d, 0xbe, 0x8f, 0x4c, 0x7d, 0x16, 0x87, 0x89, 0x48,
	0x29, 0x4c, 0xce, 0x86, 0xf4, 0x6a, 0x98, 0xaa, 0xb4, 0x29, 0x51, 0xb6, 0xce, 0xc1, 0x74, 0xac,
	0x91, 0x4e, 0xcf, 0xd5, 0xb6, 0x3d, 0xb0, 0x7b, 0x7c, 0x5e, 0x97, 0xb6, 0xe9, 0xf6, 0x7c, 0x2c,
	0x8f, 0x64, 0x10, 0xca, 0x5a, 0x99, 0x52, 0x2c, 0x5d, 0x80, 0x11, 0x95, 0xe6, 0xa5, 0x11, 0xdc,
	0x85, 0x5c, 0x08, 0x83, 0x7b, 0xf2, 0x2f, 0x42, 0x60, 0x26, 0x65, 0x51, 0x8a, 0xd8, 0xae, 0xb9,
	0x18, 0x1c, 0x8d, 0x52, 0x17, 0x38, 0x2d, 0x97, 0x80, 0x83, 0x92, 0x76, 0xea, 0x4b, 0xde, 0xe2,
	0x1f, 0xeb, 0x7e, 0xc1, 0xb0, 0xaa, 0x2f, 0xc5, 0xa2, 0xbc, 0xd0, 0x7e, 0x9d, 0x16, 0x5d, 0x86,
	0xf0, 0x28, 0x04, 0x35, 0x49, 0x97, 0x77, 0x51, 0x5a, 0x04, 0x3f, 0x01, 0x6b, 0x99, 0xd7, 0x34,
	0xaa, 0xcf, 0x15, 0x60, 0xad, 0x56, 0x1b, 0x54, 0xc6, 0x01, 0xd7, 0x17, 0x13, 0x65, 0x6a, 0x67,
	0xaf, 0x04, 0xf3, 0x9a, 0xc8, 0x92, 0x57, 0xf1, 0x7e, 0x68, 0xbf, 0x5e, 0x70, 0x82, 0xb9, 0x5a,
	0x73, 0x85, 0xa9, 0xd5, 0x24, 0xc9, 0xfe, 0x19, 0x74, 0xf9, 0xa5, 0xa2, 0x3a, 0x45, 0x65, 0x1c,
	0x74, 0x20, 0xf3, 0x9c, 0x5b, 0x9b, 0x6b, 0xa0, 0x20, 0x50, 0x94, 0x2a, 0x74, 0x49, 0x23, 0xd7,
	0xb2, 0x79, 0x65, 0x20, 0xe2, 0x58, 0x9a, 0x90, 0x76, 0xf0, 0x3a, 0x0e, 0x1a, 0x63, 0x75, 0xfe,
	0x02, 0x64, 0xac, 0x27, 0x6b, 0xc8, 0xb7, 0xbf, 0x64, 0x07, 0x16, 0x76, 0xf6, 0x7a, 0x90, 0x13,
	0xc2, 0x92, 0x37, 0x80, 0x4c, 0x56, 0x5b, 0xf2, 0x46, 0x7b, 0x0a, 0x43, 0x38, 0xe9, 0x26, 0xe8,
	0x6a, 0xca, 0x50, 0x16, 0xc2, 0x28, 0x0c, 0xdd, 0x6c, 0xcf, 0x33, 0xd0, 0xde, 0x02, 0xc2, 0x2e,
	0xfd, 0x15, 0x08, 0x11, 0x44, 0x44, 0xfc, 0x9a, 0x09, 0x85, 0x34, 0x7a, 0x2b, 0x8c, 0xea, 0xe3,
	0xfd, 0x0d, 0x74, 0x8a, 0xb8, 0x48, 0x90, 0x3f, 0x6e, 0xe3, 0x20, 0x37, 0x45, 0x64, 0x54, 0xa1,
	0x68, 0xc1, 0xed, 0xcc, 0x90, 0x17, 0x51, 0x22, 0xa8, 0x96, 0x33, 0x59, 0x16, 0x2a, 0xa7, 0x32,
	0xf1, 0x3b, 0x8e, 0x79, 0x95, 0xd9, 0x2a, 0x7a, 0x87, 0x4d, 0x38, 0x9c, 0x2b, 0xee, 0x64, 0x07,
	0xd3, 0xde, 0x11, 0x79, 0x17, 0x84, 0xd7, 0x55, 0x10, 0x49, 0x11, 0x17, 0x94, 0x3d, 0xef, 0xe6,
	0x3d, 0x8b, 0x74, 0x2c, 0xf3, 0x02, 0x3c, 0xbf, 0xb7, 0x01, 0x5f, 0xa8, 0x10, 0xc9, 0xe7, 0x1e,
	0x80, 0xcf, 0x04, 0xf2, 0xf7, 0xbd, 0xd8, 0xee, 0x5a, 0x4c, 0x39, 0xeb, 0x3e, 0xec, 0x66, 0x96,
	0x97, 0x26, 0x94, 0x38, 0x3b, 0x7f, 0xc0, 0x40, 0x20, 0x45, 0xcd, 0x76, 0x19, 0xf7, 0x43, 0x7b,
	0x20, 0x53, 0x6e, 0x64, 0x1e, 0x80, 0x03, 0x03, 0x99, 0xa1, 0x65, 0xc6, 0x69, 0x7a, 0x10, 0x68,
	0x03, 0x69, 0x60, 0xda, 0x43, 0x2c, 0x40, 0x89, 0xaa, 0xe4, 0xe8, 0xfd, 0xa3, 0x1d, 0xc8, 0xb5,
	0x09, 0x00, 0xee, 0x61, 0x0c, 0xc8, 0x4c, 0xc5, 0x32, 0xcb, 0x49, 0xe7, 0x23, 0x3c, 0xb0, 0x5a,
	0x1a, 0x5f, 0xa1, 0x01, 0x78, 0x14, 0x70, 0x43, 0x69, 0xc8, 0x99, 0x8f, 0x61, 0x36, 0x51, 0xa1,
	0x11, 0xbc, 0x47, 0x8f, 0x5b, 0x7f, 0x18, 0x4e, 0x90, 0xdb, 0xc0, 0x1c, 0x49, 0x43, 0xfd, 0xcd,
	0x76, 0xcd, 0x25, 0x22, 0x56, 0x79, 0x81, 0x64, 0xfa, 0x04, 0x8c, 0x55, 0xe8, 0x3c, 0x9e, 0xe4,
	0x63, 0x6f, 0xbb, 0x8c, 0xa7, 0x60, 0x89, 0x4a, 0x7d, 0x4a, 0xd8, 0x7c, 0x2e, 0x9e, 0xb6, 0x67,
	0xb5, 0x26, 0x4d, 0xa1, 0xd0, 0xf5, 0xfe, 0x09, 0x23, 0x89, 0x4c, 0x7b, 0xce, 0x7e, 0x06, 0xea,
	0x02, 0x85, 0x1c, 0xf9, 0x2c, 0x24, 0x6a, 0x53, 0x44, 0x84, 0xe4, 0x39, 0x8e, 0x8a, 0x74, 0xb5,
	0x92, 0x48, 0x65, 0xcf, 0x63, 0x36, 0x93, 0x81, 0x22, 0xc7, 0xfc, 0x19, 0xa9, 0xdb, 0xd0, 0x79,
	0x7c, 0x81, 0x6b, 0x51, 0xd4, 0x2a, 0x22, 0x69, 0x44, 0x46, 0xbc, 0x2f, 0x32, 0x6f, 0xde, 0x42,
	0xd7, 0xf5, 0x12, 0x07, 0x50, 0x10, 0x28, 0xdf, 0xde, 0xcd, 0x5e, 0xe6, 0x9c, 0x66, 0x7a, 0x38,
	0x5e, 0xe1, 0x4c, 0x2b, 0x57, 0x97, 0x22, 0xe6, 0x3b, 0xd3, 0x5f, 0x20, 0x22, 0x8f, 0xa5, 0xa4,
	0x06, 0xfc, 0x55, 0xcc, 0x37, 0x4a, 0x55, 0xe4, 0x89, 0xae, 0x93, 0x2d, 0xaf, 0x69, 0xbe, 0x0e,
	0x15, 0x22, 0x51, 0xb8, 0xfe, 0xbc, 0xce, 0x32, 0x5b, 0x69, 0x60, 0xb8, 0xe7, 0xfc, 0x2b, 0x17,
	0x8e, 0xa8, 0x65, 0x34, 0xda, 0xc3, 0x37, 0x80, 0x73, 0x52, 0xaa, 0x30, 0x2a, 0x62, 0x8d, 0x70,
	0x78, 0x93, 0xb3, 0xaf, 0x4c, 0x7a, 0x40, 0xde, 0xc2, 0x76, 0xf4, 0xc8, 0xb7, 0xd9, 0x09, 0xa6,
	0xb0, 0xad, 0xf8, 0x3b, 0x50, 0x22, 0x4c, 0xe1, 0x1b, 0x81, 0x5e, 0xfc, 0x5d, 0x0c, 0x54, 0xa5,
	0x08, 0x6c, 0x15, 0x7f, 0x8f, 0x53, 0xae, 0x32, 0xc1, 0x24, 0x5d, 0x5b, 0xa8, 0xae, 0x43, 0x64,
	0x56, 0xae, 0x59, 0x83, 0x4d, 0x78, 0xbf, 0x7b, 0x00, 0x02, 0x90, 0x87, 0x65, 0xc8, 0x40, 0xc2,
	0x04, 0xa1, 0x00, 0xec, 0xc3, 0x33, 0xa4, 0x1c, 0x61, 0x0a, 0x0d, 0x5f, 0x1d, 0x91, 0xa1, 0xe5,
	0x89, 0x38, 0x80, 0xbf, 0xcc, 0x94, 0x0a, 0x71, 0xb4, 0xbe, 0x92, 0x75, 0x9b, 0x17, 0xe9, 0x13,
	0x9a, 0xaf, 0xf2, 0xac, 0x4e, 0x10, 0x2d, 0x5f, 0xcb, 0xb0, 0xb9, 0x46, 0x4c, 0x52, 0x6d, 0xc7,
	0xd4, 0xa4, 0x51, 0xe8, 0x32, 0xbf, 0x91, 0x11, 0xca, 0x50, 0xa6, 0x52, 0xc4, 0x1a, 0x87, 0xfe,
	0x9b, 0x10, 0x95, 0x95, 0x55, 0xdb, 0xc4, 0x7c, 0x2b, 0x43, 0x1b, 0x58, 0xaa, 0x02, 0x9a, 0xbe,
	0x9d, 0x75, 0x1b, 0x18, 0x23, 0x7d, 0x8d, 0x50, 0xfe, 0x0e, 0x38, 0x32, 0x51, 0x70, 0x69, 0x3c,
	0x12, 0x22, 0x13, 0x51, 0x97, 0xa8, 0x5d, 0x54, 0xec, 0xa1, 0x32, 0x11, 0x21, 0xd0, 0x1c, 0x05,
	0x09, 0xa9, 0x94, 0x41, 0xdc, 0xed, 0x78, 0x8e, 0x06, 0x03, 0x1d, 0x64, 0x94, 0x7d, 0x78, 0x02,
	0x3d, 0x64, 0x84, 0xf6, 0xfe, 0x18, 0x4c, 0x1b, 0xc1, 0x27, 0xe3, 0xd8, 0x0c, 0xfd, 0x4d, 0x46,
	0x45, 0xee, 0x38, 0xcc, 0xe4, 0xbe, 0xaa, 0x51, 0xdb, 0xf2, 0x7d, 0x68, 0xce, 0x7d, 0x23, 0x32,
	0xdb, 0x1e, 0x1d, 0xdf, 0x1d, 0x91, 0x32, 0x9d, 0x44, 0xa2, 0x3e, 0x81, 0x57, 0x14, 0x22, 0xa1,
	0x70, 0x3a, 0x11, 0x54, 0x11, 0x49, 0x78, 0xfc, 0x24, 0x70, 0xa3, 0x29, 0xb1, 0x7b, 0x70, 0x32,
	0xa0, 0x4c, 0x6a, 0xdd, 0xdd, 0xd5, 0x1f, 0x60, 0x41, 0xa4, 0xab, 0x55, 0x14, 0x79, 0x2c, 0x10,
	0x59, 0x16, 0x2b, 0x5b, 0x83, 0x4e, 0xc9, 0x6c, 0xb7, 0x64, 0xef, 0x3b, 0xa7, 0x82, 0x43, 0xfa,
	0x3a, 0x17, 0x35, 0x3e, 0x3e, 0xa7, 0xb1, 0x3f, 0x85, 0x09, 0xd0, 0x6c, 0x9c, 0x3e, 0xcf, 0x9f,
	0xf6, 0xae, 0x7d, 0x46, 0x6f, 0xc8, 0x57, 0xa9, 0x44, 0xfa, 0xf9, 0x11, 0x70, 0xa8, 0xb4, 0x90,
	0x46, 0x21, 0x7b, 0x9e, 0x09, 0xb9, 0xb1, 0x48, 0x83, 0xdc, 0x17, 0xb8, 0x4e, 0x9f, 0x05, 0xcd,
	0x46, 0x26, 0x3a, 0x80, 0xd3, 0xcf, 0xc6, 0xa6, 0x5b, 0x18, 0xe7, 0x00, 0x36, 0x19, 0x45, 0xb1,
	0x73, 0x2e, 0xa4, 0xd5, 0x55, 0x90, 0x67, 0xdc, 0x52, 0x9e, 0x07, 0xde, 0x42, 0xb7, 0x68, 0xf6,
	0x7c, 0x10, 0x75, 0x2e, 0x09, 0x17, 0x00, 0x6d, 0x20, 0x0a, 0xee, 0x52, 0x2e, 0x84, 0x92, 0x40,
	0x35, 0xb5, 0x81, 0xb9, 0x17, 0x61, 0x5a, 0x16, 0x51, 0x8a, 0xad, 0xbd, 0x18, 0x82, 0x13, 0x61,
	0x8c, 0x62, 0xc1, 0x97, 0xd8, 0x8d, 0x35, 0x28, 0xde, 0x3f, 0x06, 0x77, 0x2e, 0x53, 0xb6, 0xe1,
	0x52, 0x76, 0xbe, 0x94, 0x38, 0xb6, 0x97, 0x65, 0xfc, 0x8a, 0x11, 0x04, 0xac, 0xea, 0x72, 0xb6,
	0x50, 0xd5, 0x64, 0x5e, 0xb4, 0xf8, 0xae, 0x0e, 0x0e, 0x11, 0xd4, 0x8c, 0x28, 0x51, 0xe0, 0x33,
	0x6e, 0x84, 0xf1, 0x66, 0xf1, 0x53, 0x8e, 0x78, 0x91, 0x06, 0x04, 0xe4, 0xca, 0x6e, 0xfc, 0x67,
	0xa4, 0xe8, 0x2a, 0x2c, 0x4c, 0x44, 0x6c, 0xbd, 0x71, 0x35, 0x22, 0x28, 0x41, 0xe6, 0xff, 0x19,
	0x38, 0xbb, 0x22, 0x7f, 0x9e, 0x71, 0xbf, 0x2c, 0xa8, 0x7e, 0x5d, 0x83, 0x65, 0x79, 0xd6, 0x9a,
	0xe4, 0x66, 0xf2, 0x5a, 0x2c, 0xf3, 0x03, 0xda, 0xb6, 0xeb, 0xb0, 0xac, 0x1a, 0x73, 0x7b, 0xf5,
	0x0b, 0x7b, 0x02, 0x4c, 0x1d, 0x85, 0xf2, 0x97, 0x4c, 0x1a, 0xd5, 0x54, 0x14, 0x64, 0xd7, 0x83,
	0xac, 0x1a, 0x5d, 0xc7, 0x8e, 0xdf, 0x00, 0x1d, 0xb6, 0xc9, 0xbb, 0x11, 0x56, 0xaa, 0x24, 0xec,
	0x5d, 0x4d, 0x6f, 0xea, 0x6e, 0x75, 0x6c, 0x9b, 0xb1, 0x9b, 0xd9, 0x11, 0xda, 0x17, 0xdd, 0x91,
	0x5b, 0xec, 0x09, 0x0b, 0xc5, 0x1a, 0xba, 0x35, 0x53, 0x4d, 0xc7, 0xa2, 0x54, 0xf4, 0x16, 0xfd,
	0x9a, 0x21, 0x68, 0x63, 0x2f, 0xea, 0xd6, 0xf3, 0x56, 0xc7, 0x6f, 0x00, 0xc1, 0xb2, 0xde, 0x96,
	0x71, 0x03, 0xdc, 0x2a, 0x74, 0x5e, 0x1a, 0xba, 0x35, 0xdc, 0x0e, 0x6e, 0x11, 0x58, 0xbb, 0x7f,
	0x0b, 0xe1, 0xa2, 0x51, 0x0a, 0xa3, 0x4a, 0x14, 0x76, 0x76, 0xbc, 0xc2, 0xe9, 0xbf, 0x83, 0xbd,
	0x82, 0x16, 0xe6, 0x4e, 0xfc, 0x0e, 0x70, 0x13, 0xbc, 0x0b, 0x51, 0x5c, 0x55, 0xa1, 0x48, 0x55,
	0x22, 0x62, 0xd2, 0x74, 0xb7, 0x0d, 0xd1, 0xcc, 0x96, 0xa1, 0xdf, 0x43, 0x4f, 0x53, 0xda, 0xfe,
	0xe2, 0x1e, 0x88, 0xcd, 0x24, 0xf6, 0xf3, 0x5e, 0x56, 0x1a, 0x34, 0xb5, 0x2f, 0xd0, 0x83, 0xdf,
	0x07, 0x79, 0x74, 0x01, 0xa7, 0xa2, 0xcd, 0x55, 0x1d, 0x43, 0xa1, 0x6e, 0xe6, 0x99, 0x4e, 0x73,
	0xc4, 0xd4, 0xfd, 0xd6, 0x9f, 0x28, 0xac, 0xc8, 0x26, 0x0f, 0x60, 0xa7, 0x62, 0x19, 0xc2, 0x11,
	0x0f, 0x72, 0xa2, 0x8c, 0x84, 0xe1, 0xea, 0xf2, 0x10, 0xe7, 0x1a, 0x1d, 0xab, 0x42, 0xf9, 0xa8,
	0xeb, 0x1c, 0x39, 0x71, 0x89, 0xda, 0xfa, 0x30, 0x34, 0x94, 0xb9, 0x91, 0xb9, 0x2e, 0x39, 0xe4,
	0x1f, 0x81, 0x8d, 0xfc, 0xa4, 0xf2, 0xa8, 0x3d, 0xff, 0xc2, 0x14, 0x09, 0x27, 0xbf, 0xc7, 0xb0,
	0x9c, 0xdc, 0x4c, 0x09, 0xe9, 0x71, 0x68, 0xab, 0xa6, 0xb9, 0x0d, 0xbc, 0x6d, 0x6c, 0xa1, 0xd1,
	0x14, 0x16, 0xdb, 0xd9, 0xc2, 0xb8, 0x30, 0x32, 0x0e, 0x29, 0x30, 0x9e, 0xe0, 0xf8, 0x2e, 0x22,
	0xc9, 0xfd, 0xd3, 0x93, 0x19, 0x3f, 0x8d, 0x04, 0x41, 0xc4, 0x03, 0x4f, 0xd9, 0x12, 0x51, 0x50,
	0x27, 0x40, 0xd1, 0xf3, 0x74, 0xc6, 0x2d, 0x92, 0xa1, 0xbe, 0x00, 0x6d, 0xdf, 0x9f, 0x38, 0x3f,
	0xa9, 0x14, 0x77, 0xb7, 0x67, 0x40, 0xa9, 0x3c, 0x46, 0x3c, 0x3f, 0x0b, 0xf9, 0x13, 0x65, 0x20,
	0x58, 0xdc, 0x73, 0xb0, 0x24, 0xc6, 0x39, 0x7f, 0x1e, 0xc8, 0xfc, 0x32, 0xc6, 0x35, 0xdd, 0x9e,
	0x5a, 0x6e, 0x2e, 0x5f, 0x80, 0x56, 0x23, 0x63, 0x15, 0x72, 0xd1, 0x7e, 0x91, 0x71, 0xa6, 0xa2,
	0xd0, 0x09, 0xf9, 0xf0, 0x25, 0xf6, 0x42, 0x5e, 0x18, 0x6d, 0x6b, 0xc8, 0xcb, 0x99, 0x7d, 0xb8,
	0xb2, 0xf4, 0x2b, 0x7c, 0x02, 0x74, 0x21, 0x52, 0x94, 0x74, 0x0b, 0x5b, 0x26, 0xca, 0x3e, 0x55,
	0xbd, 0x6a, 0xcb, 0x90, 0x0e, 0x8d, 0xc8, 0x22, 0x1a, 0x79, 0x0d, 0x22, 0x42, 0xd9, 0x15, 0xf1,
	0x3a, 0x76, 0x22, 0x13, 0x46, 0xa4, 0xda, 0xf0, 0xd1, 0xfd, 0x2b, 0x57, 0xaa, 0xa8, 0x95, 0xf3,
	0xd6, 0xbd, 0xd1, 0xc7, 0x91, 0x32, 0xb2, 0x37, 0x6d, 0x4e, 0x21, 0x9f, 0x52, 0x74, 0xbc, 0xc5,
	0x27, 0xda, 0x57, 0xb6, 0x33, 0x7a, 0x9b, 0x25, 0x1c, 0x90, 0xe5, 0x11, 0xb6, 0xe4, 0x1d, 0x5b,
	0x72, 0x0b, 0xc1, 0xaf, 0x19, 0xef, 0xf2, 0xb1, 0x29, 0x4d, 0x53, 0x92, 0xb8, 0xf7, 0x32, 0xbe,
	0x13, 0x94, 0x19, 0xfc, 0xf0, 0x37, 0x40, 0xa2, 0xa5, 0x32, 0x0d, 0xb9, 0x89, 0x7b, 0x1f, 0x43,
	0x3a, 0x8d, 0xe9, 0x5c, 0xb2, 0xcc, 0xc3, 0x1a, 0x5d, 0xae, 0xde, 0xf1, 0x3b, 0xbc, 0x81, 0x2c,
	0xc3, 0xf3, 0x47, 0x34, 0x10, 0x06, 0x74, 0x0d, 0x17, 0x00, 0xf5, 0x65, 0x0c, 0x54, 0x45, 0x2e,
	0xab, 0x02, 0xcf, 0x44, 0x5f, 0x69, 0x70, 0x27, 0xe1, 0xb7, 0x7c, 0xfb, 0x24, 0xfd, 0x55, 0x1e,
	0xd1, 0x41, 0xab, 0xfb, 0xf8, 0xf7, 0xb5, 0x06, 0x7b, 0x78, 0x35, 0x33, 0x7c, 0xbd, 0x81, 0x27,
	0x04, 0xd1, 0x12, 0x94, 0x9e, 0xbe, 0xd1, 0xb0, 0xfe, 0x96, 0x26, 0x96, 0x78, 0xe6, 0xfc, 0x66,
	0x83, 0xa3, 0x5c, 0x25, 0x54, 0x5f, 0xbf, 0xd5, 0x80, 0xd9, 0x46, 0xf9, 0x75, 0xf4, 0x7f, 0xdf,
	0x06, 0x82, 0x9a, 0x0a, 0xf3, 0x3a, 0xbf, 0x45, 0x7d, 0x07, 0x36, 0xd4, 0xe2, 0x56, 0x4d, 0xe5,
	0xf6, 0xbe, 0x7a, 0x24, 0xf3, 0x68, 0x5d, 0x58, 0x94, 0xdf, 0x85, 0x92, 0x9a, 0x91, 0x79, 0x54,
	0xe3, 0xce, 0xe1, 0xa8, 0x86, 0x7d, 0x49, 0x97, 0x76, 0xe0, 0x68, 0xd8, 0x1d, 0xea, 0x98, 0x92,
	0xcc, 0xf7, 0xc0, 0x1f, 0x69, 0x93, 0x4b, 0x6b, 0xf8, 0x31, 0xb0, 0x01, 0x23, 0xb4, 0x9d, 0xc7,
	0x02, 0x95, 0x4a, 0xbb, 0x20, 0x8e, 0x03, 0x88, 0x44, 0x98, 0x42, 0x89, 0x98, 0x6f, 0xd1, 0xdf,
	0x67, 0xab, 0x95, 0x7d, 0x3f, 0x3b, 0xbe, 0xc1, 0x2f, 0x9c, 0x39, 0x3f, 0xb5, 0x9e, 0x00, 0xfd,
	0x3a, 0x6e, 0x25, 0x19, 0x07, 0xc8, 0x89, 0x0d, 0xce, 0x74, 0x2a, 0xed, 0x82, 0x3e, 0x09, 0x2c,
	0x78, 0x11, 0x66, 0x0c, 0x27, 0x37, 0xec, 0x9b, 0x7d, 0x55, 0xe4, 0xec, 0x8c, 0x1f, 0x60, 0x44,
	0xf9, 0x32, 0xd2, 0x7e, 0x1d, 0x61, 0xf0, 0x43, 0x38, 0xcf, 0x68, 0x7e, 0xbb, 0x38, 0x85, 0xa9,
	0x32, 0x44, 0x47, 0x70, 0x6a, 0x03, 0xcd, 0x49, 0x49, 0xf1, 0x71, 0x1a, 0x6f, 0x33, 0xdf, 0x27,
	0x4f, 0x87, 0xa6, 0x5c, 0xc4, 0x85, 0x75, 0xc6, 0x19, 0x0d, 0x6e, 0x5d, 0xca, 0x2a, 0x0a, 0x3c,
	0x47, 0x09, 0x99, 0x5a, 0xd5, 0x02, 0x89, 0xf5, 0x4c, 0x88, 0xca, 0xf1, 0x20, 0x73, 0x56, 0x83,
	0x1f, 0x20, 0xf4, 0x64, 0x77, 0xf6, 0x6c, 0x08, 0x8f, 0x4a, 0x64, 0x9d, 0x73, 0x58, 0x13, 0x67,
	0xef, 0x73, 0x99, 0x98, 0xc4, 0x53, 0xdd, 0x79, 0x50, 0x9b, 0xa9, 0x34, 0xcc, 0x34, 0x7c, 0x74,
	0x3e, 0x7c, 0x54, 0xc8, 0x34, 0xc5, 0x0d, 0xee, 0x02, 0xe8, 0x6d, 0x52, 0xe3, 0xd8, 0xb2, 0x3e,
	0xb9, 0x10, 0xeb, 0x27, 0x45, 0x4c, 0xa1, 0x73, 0x11, 0xd6, 0x4f, 0x8a, 0x42, 0x1a, 0x46, 0x72,
	0x71, 0xc3, 0x3e, 0xda, 0xf1, 0xb5, 0xed, 0x12, 0x26, 0xa9, 0xd0, 0xa0, 0xc2, 0x37, 0xec, 0x8b,
	0x57, 0x16, 0x29, 0x3f, 0x3f, 0x90, 0x80, 0x5e, 0x0a, 0xe8, 0x28, 0x02, 0xb6, 0xe9, 0xbf, 0xcc,
	0x8e, 0x14, 0xaa, 0xa9, 0x4c, 0x49, 0xcb, 0x2e, 0xb7, 0xe1, 0x28, 0x00, 0xf1, 0x27, 0x0d, 0x6e,
	0x8c, 0x13, 0x69, 0xc8, 0x35, 0x57, 0x34, 0xf8, 0x6a, 0x9e, 0x64, 0x3e, 0xdf, 0xb5, 0x7f, 0xca,
	0xe1, 0xaa, 0x93, 0x8c, 0x9f, 0x74, 0xae, 0x84, 0xd2, 0x4c, 0x1a, 0x95, 0xd1, 0xc5, 0x83, 0x6c,
	0xb8, 0xaa, 0x61, 0x8b, 0x45, 0x66, 0x64, 0x53, 0x49, 0xea, 0x7b, 0xaf, 0x86, 0x98, 0x40, 0x14,
	0x82, 0x8e, 0x16, 0x55, 0xfe, 0x86, 0xbd, 0xc2, 0xd7, 0xb3, 0x92, 0x4e, 0xc1, 0xcf, 0x7b, 0x74,
	0x13, 0xd7, 0x84, 0x6b, 0x40, 0x53, 0xbf, 0xcf, 0xa9, 0xfd, 0x5a, 0xde, 0x68, 0x99, 0x69, 0x82,
	0x7c, 0x1d, 0x07, 0xb7, 0xb5, 0x94, 0x7a, 0x00, 0x6c, 0x57, 0xd0, 0x44, 0x03, 0xd0, 0x43, 0xc8,
	0x0f, 0xe3, 0xd7, 0xc3, 0xa5, 0x4d, 0x8d, 0x76, 0xe0, 0x86, 0x46, 0xaf, 0x97, 0x63, 0xfc, 0x37,
	0x62, 0x76, 0x42, 0x34, 0xc9, 0xda, 0x9b, 0x80, 0x9c, 0x88, 0xdc, 0x37, 0x0a, 0xaf, 0x22, 0x37,
	0x43, 0x71, 0xac, 0xd2, 0x92, 0x6e, 0x59, 0xb7, 0x34, 0xb8, 0x79, 0x21, 0xb9, 0xbf, 0xb2, 0x47,
	0xc2, 0xcf, 0xcb, 0x8c, 0xb6, 0x80, 0x0a, 0x3f, 0x9c, 0x97, 0xe8, 0x2a, 0x97, 0xd8, 0x5b, 0x99,
	0x3b, 0x3b, 0x90, 0xaa, 0x3e, 0x1f, 0x0f, 0x59, 0xf8, 0xd8, 0x86, 0xdb, 0xba, 0x64, 0x55, 0x92,
	0xd7, 0x6f, 0xef, 0x92, 0x0c, 0xf9, 0xb7, 0x20, 0x75, 0xad, 0xc6, 0x6f, 0xf0, 0xbf, 0x83, 0x9c,
	0x2c, 0x20, 0x88, 0x77, 0xf0, 0x19, 0x99, 0xa7, 0xf4, 0x4e, 0x9e, 0x3d, 0x80, 0xcc, 0xbb, 0x0b,
	0xb6, 0xe7, 0x74, 0xa2, 0xd0, 0x02, 0xde, 0xcd, 0x11, 0x48, 0x9d, 0x48, 0x95, 0xab, 0x3e, 0x98,
	0x9b, 0x19, 0x61, 0xb8, 0x87, 0xb3, 0x88, 0x91, 0xd2, 0xf6, 0x1a, 0xf7, 0xc2, 0x17, 0x65, 0xaa,
	0xc8, 0xd4, 0xfb, 0xa0, 0xa8, 0x2c, 0x14, 0x55, 0x67, 0xe4, 0x84, 0x3f, 0x00, 0x55, 0xb3, 0x2a,
	0xf8, 0x4d, 0xf1, 0x7e, 0xf6, 0x73, 0xac, 0x32, 0xce, 0x07, 0x0f, 0x60, 0xc1, 0xa4, 0xac, 0x06,
	0x32, 0x57, 0xa8, 0xa9, 0x0f, 0x42, 0x99, 0xca, 0x09, 0xd9, 0x43, 0xe0, 0x9e, 0x54, 0x69, 0xa0,
	0xd1, 0xf8, 0xfc, 0x11, 0xba, 0xec, 0x85, 0xee, 0x61, 0x0e, 0xca, 0xa0, 0x29, 0x53, 0xfb, 0x77,
	0xc8, 0x23, 0xd0, 0x25, 0x6a, 0x46, 0xf9, 0x64, 0xf5, 0xa3, 0xcc, 0xa0, 0x4c, 0x61, 0x44, 0x13,
	0x1d, 0xf6, 0x63, 0x3c, 0x52, 0xe6, 0x85, 0x11, 0x31, 0x2e, 0xc3, 0x8f, 0x43, 0x5b, 0x35, 0xa5,
	0x70, 0xda, 0x86, 0xbd, 0xa9, 0x06, 0x61, 0xd1, 0x5b, 0xb0, 0xdd, 0x26, 0xf2, 0x35, 0xbd, 0x91,
	0x27, 0x60, 0x3f, 0x24, 0xf0, 0xc0, 0x93, 0xc0, 0xe4, 0xf3, 0xed, 0xe4, 0x29, 0x7b, 0x10, 0x52,
	0x01, 0xbf, 0x3f, 0xcd, 0x69, 0x5c, 0x18, 0x55, 0xad, 0x4a, 0xae, 0xf6, 0xcc, 0x60, 0x4a, 0x7e,
	0x60, 0x78, 0x06, 0x2a, 0xa5, 0xc8, 0x0b, 0x59, 0x1a, 0x8d, 0x5b, 0xc1, 0xb3, 0xe0, 0xe8, 0x91,
	0xcf, 0x35, 0xf8, 0x05, 0xca, 0xde, 0x56, 0x9e, 0x6f, 0xf0, 0x13, 0xbf, 0x94, 0x20, 0xff, 0xdc,
	0xe0, 0x9a, 0x5b, 0x88, 0x49, 0xfc, 0xdb, 0xf9, 0x42, 0x83, 0x2f, 0x3b, 0x05, 0xa0, 0xbd, 0x08,
	0x4a, 0x15, 0x02, 0x2f, 0x9e, 0x2f, 0x81, 0x9a, 0x10, 0x19, 0x80, 0xbc, 0xcc, 0x51, 0x27, 0x57,
	0x2b, 0xfc, 0x5d, 0xf9, 0x0a, 0x90, 0x52, 0x3b, 0xda, 0x6d, 0xfd, 0xff, 0x02, 0x68, 0xa9, 0x68,
	0xaa, 0xb0, 0x9b, 0x06, 0x5e, 0xb5, 0x19, 0x31, 0x91, 0xd6, 0xc3, 0xaf, 0x71, 0xc2, 0xcb, 0xe8,
	0xf7, 0xeb, 0x90, 0x80, 0x8b, 0x19, 0x89, 0xa0, 0x6a, 0xdf, 0xb0, 0x0f, 0x44, 0x3d, 0x5f, 0xbd,
	0xc1, 0xce, 0xab, 0xf7, 0x06, 0xde, 0xe4, 0xdc, 0xd6, 0x25, 0xdf, 0x62, 0x19, 0xd2, 0x18, 0x6d,
	0xb8, 0xe3, 0x79, 0x9b, 0x3d, 0x68, 0x5a, 0x59, 0xa1, 0xfd, 0x92, 0xf2, 0xd7, 0x3b, 0x9c, 0x28,
	0x30, 0x92, 0x70, 0x0d, 0x7f, 0x97, 0x37, 0x2e, 0xd6, 0x7e, 0xdd, 0x8f, 0xf8, 0x6d, 0xe9, 0x3d,
	0x0e, 0x53, 0x51, 0x97, 0xb6, 0x67, 0xfe, 0x1b, 0xa0, 0x8a, 0x8c, 0x32, 0xe2, 0xfb, 0x1c, 0x62,
	0xf8, 0x6b, 0xe6, 0x30, 0x83, 0xf6, 0x4f, 0xb5, 0x13, 0x02, 0x70, 0xb8, 0xd9, 0xef, 0x99, 0x21,
	0x67, 0x28, 0x9c, 0x99, 0xde, 0xb2, 0xd9, 0xdb, 0xd5, 0xd9, 0x19, 0xff, 0xa5, 0xb4, 0xed, 0x1f,
	0xd6, 0xf8, 0x9f, 0x7a, 0x09, 0x0f, 0xe1, 0xaf, 0x0a, 0x77, 0xc0, 0x5b, 0xee, 0xb8, 0x76, 0xa0,
	0xf7, 0xe7, 0xad, 0xbb, 0xc0, 0x5b, 0x46, 0x79, 0x06, 0xa3, 0xa6, 0xc8, 0xdd, 0x85, 0xf3, 0xb8,
	0x7a, 0xff, 0x1b, 0xba, 0x83, 0x9e, 0xe7, 0x2c, 0xe3, 0xd1, 0xee, 0x7f, 0x69, 0xee, 0x50, 0x5f,
	0x27, 0xff, 0x2f, 0x95, 0xbb, 0x8b, 0xbc, 0x8f, 0x3a, 0x1f, 0xb1, 0x43, 0x46, 0x25, 0x2a, 0x15,
	0x71, 0x5b, 0xf8, 0x94, 0x88, 0xe9, 0x80, 0xb9, 0x8b, 0xfb, 0x2b, 0x82, 0x56, 0x2a, 0x12, 0xe5,
	0xbb, 0xc3, 0xde, 0x6e, 0xce, 0x2e, 0x3c, 0x24, 0x83, 0xd2, 0xc7, 0xe6, 0xb9, 0x23, 0xde, 0x9e,
	0xce, 0x6e, 0x76, 0x90, 0xf2, 0x58, 0x21, 0x54, 0x4a, 0x0d, 0xb0, 0xeb, 0x78, 0x63, 0xce, 0x28,
	0x4f, 0xd8, 0xb7, 0x71, 0x91, 0x06, 0x6d, 0x7e, 0x35, 0x57, 0x69, 0xe8, 0x2e, 0xe9, 0x2b, 0xb0,
	0xef, 0xd6, 0xee, 0xd2, 0x79, 0x43, 0xfc, 0x94, 0xeb, 0xee, 0xec, 0xad, 0x70, 0x96, 0xdb, 0x21,
	0xad, 0x03, 0xc8, 0x08, 0x8c, 0x4a, 0xeb, 0xee, 0x32, 0xcf, 0xa5, 0xf2, 0x42, 0x33, 0xfc, 0x34,
	0xe3, 0xee, 0xe2, 0x7d, 0xcc, 0xd9, 0xcb, 0x8e, 0xe8, 0x6a, 0x95, 0xd2, 0x04, 0xb1, 0x23, 0xbd,
	0xca, 0xbc, 0xc8, 0x5d, 0xd7, 0xfb, 0x88, 0xb3, 0x7b, 0x97, 0x21, 0x91, 0x98, 0xe5, 0xdb, 0xb7,
	0xbb, 0x6b, 0xdf, 0xb5, 0x74, 0xdd, 0x75, 0xbd, 0xbe, 0xad, 0xbd, 0x7b, 0xa7, 0xbb, 0x5b, 0x7f,
	0x30, 0x11, 0xb1, 0xf2, 0x95, 0x2e, 0x73, 0x77, 0x79, 0xdf, 0x01, 0x74, 0x91, 0x93, 0x71, 0x2c,
	0x52, 0x49, 0x13, 0xbb, 0x7b, 0xfb, 0x38, 0x7b, 0xf3, 0x04, 0x42, 0xc5, 0xde, 0xc0, 0x48, 0x29,
	0xb7, 0x7f, 0xee, 0x1e, 0xfd, 0xfd, 0xe3, 0x3e, 0xb1, 0x2d, 0x82, 0xdc, 0xdd, 0xb3, 0x0f, 0x85,
	0x2e, 0x40, 0xee, 0x0a, 0xef, 0x7f, 0x39, 0x1f, 0xb3, 0x74, 0x59, 0xa5, 0x6e, 0x3f, 0xd4, 0x4d,
	0x69, 0xe0, 0x65, 0x48, 0x8b, 0xc5, 0xa4, 0xfb, 0x11, 0x6f, 0x77, 0x67, 0x57, 0x66, 0x32, 0x52,
	0xc4, 0x6d, 0x99, 0x17, 0xa2, 0x90, 0xee, 0x68, 0x3f, 0x16, 0xba, 0x5d, 0xbb, 0xbb, 0x57, 0xdf,
	0xcb, 0xb6, 0xfd, 0x75, 0xf7, 0xee, 0xb3, 0x51, 0x2b, 0x4a, 0x3d, 0x82, 0xfb, 0xd1, 0xbe, 0x7f,
	0xb9, 0xa6, 0xbb, 0x63, 0x7d, 0xb8, 0x94, 0x29, 0x53, 0xf4, 0xe3, 0xee, 0xc7, 0xfa, 0x7c, 0x7c,
	0xdc, 0xdc, 0x7d, 0xf6, 0x8b, 0x9c, 0x25, 0xf3, 0x3e, 0x7b, 0x22, 0xe1, 0xf6, 0x93, 0x0c, 0xb5,
	0x86, 0xa3, 0x66, 0x27, 0x6f, 0x67, 0xdc, 0xc2, 0xad, 0x0f, 0x07, 0xbd, 0x61, 0x67, 0x50, 0xfa,
	0x91, 0x76, 0x87, 0xbc, 0xa5, 0xce, 0x70, 0xf7, 0x1f, 0x2e, 0x77, 0xf1, 0x01, 0xf7, 0x2c, 0xc0,
	0xd9, 0x3a, 0x74, 0x7f, 0x2f, 0x73, 0x86, 0xf0, 0x89, 0x92, 0xb7, 0xe2, 0x1f, 0x3f, 0x5a, 0xe2,
	0xcf, 0xbc, 0x46, 0xf7, 0xdc, 0xd1, 0xe7, 0x4c, 0xeb, 0x3b, 0xb3, 0xe3, 0xcb, 0x8f, 0xb8, 0xe7,
	0xc9, 0x63, 0x17, 0x2c, 0x1b, 0x1f, 0x59, 0x75, 0xe8, 0xfe, 0xab, 0xf0, 0x15, 0xdc, 0x67, 0x07,
	0xf6, 0xf3, 0x9a, 0xce, 0x22, 0xfb, 0xdd, 0xde, 0xf2, 0x79, 0x0b, 0x7b, 0x9f, 0x36, 0x8e, 0xee,
	0xf1, 0x8f, 0xe2, 0x88, 0x7b, 0x7c, 0x0c, 0xd2, 0x56, 0x78, 0x7b, 0xf4, 0xa4, 0xad, 0xfa, 0xcf,
	0xfe, 0x97, 0x5b, 0xff, 0xe5, 0x65, 0xce, 0x62, 0xfb, 0xcd, 0xa3, 0x37, 0xff, 0x03, 0xab, 0xfe,
	0x77, 0x90, 0xa3, 0x7b, 0xac, 0xe4, 0xef, 0x32, 0x57, 0x76, 0xbf, 0xcb, 0x5c, 0x29, 0x37, 0x6e,
	0x9e, 0xdb, 0x3a, 0xbe, 0x07, 0x24, 0xbb, 0xe3, 0x4b, 0x48, 0xf2, 0x2c, 0xf3, 0x13, 0xd2, 0xd4,
	0x59, 0x94, 0xcf, 0xcd, 0x74, 0xa6, 0x36, 0x7a, 0x1f, 0xb2, 0xf2, 0x43, 0xb1, 0x7a, 0x90, 0xb8,
	0xd4, 0x73, 0x20, 0x11, 0x32, 0x3e, 0x39, 0x50, 0x6d, 0xde, 0xb5, 0x6d, 0x6c, 0xa7, 0x07, 0xb6,
	0x8d, 0xed, 0xf4, 0xf8, 0xb6, 0xb1, 0x81, 0x97, 0xb7, 0x8d, 0x0d, 0x1c, 0xb6, 0x7d, 0x6c, 0xe0,
	0xbc, 0xed, 0x63, 0x03, 0xb7, 0x6e, 0x1f, 0x1b, 0xb8, 0x6b, 0xfb, 0xd8, 0xc0, 0xe3, 0xdb, 0xc7,
	0x06, 0x9e, 0xd9, 0x3e, 0xb6, 0xd3, 0xcb, 0xdb, 0xc7, 0x06, 0x8e, 0x7e, 0x62, 0x6c, 0xa7, 0xeb,
	0x9f, 0x18, 0x1b, 0x70, 0x76, 0x5e, 0x3b, 0xbd, 0xb1, 0xaf, 0xa6, 0x3a, 0x9c, 0xcc, 0xae, 0xcb,
	0x08, 0x45, 0x36, 0xb0, 0x66, 0x68, 0xe3, 0xec, 0xba, 0xcd, 0x07, 0x1d, 0xb4, 0x08, 0xa8, 0x0e,
	0xfc, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x93, 0xf2, 0xed, 0xab, 0x2a, 0x00, 0x00,
}
