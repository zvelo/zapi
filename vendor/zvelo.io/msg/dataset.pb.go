// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zvelo/msg/dataset.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_rpc "google.golang.org/genproto/googleapis/rpc/status"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DataSetType int32

const (
	CATEGORIZATION DataSetType = 0
	// 1 is reserved
	// 2 is reserved
	// 3 is reserved
	MALICIOUS DataSetType = 4
	ECHO      DataSetType = 5
)

var DataSetType_name = map[int32]string{
	0: "CATEGORIZATION",
	4: "MALICIOUS",
	5: "ECHO",
}
var DataSetType_value = map[string]int32{
	"CATEGORIZATION": 0,
	"MALICIOUS":      4,
	"ECHO":           5,
}

func (DataSetType) EnumDescriptor() ([]byte, []int) { return fileDescriptorDataset, []int{0} }

type DataSet_Malicious_Verdict int32

const (
	VERDICT_UNKNOWN   DataSet_Malicious_Verdict = 0
	VERDICT_CLEAN     DataSet_Malicious_Verdict = 1
	VERDICT_MALICIOUS DataSet_Malicious_Verdict = 2
)

var DataSet_Malicious_Verdict_name = map[int32]string{
	0: "VERDICT_UNKNOWN",
	1: "VERDICT_CLEAN",
	2: "VERDICT_MALICIOUS",
}
var DataSet_Malicious_Verdict_value = map[string]int32{
	"VERDICT_UNKNOWN":   0,
	"VERDICT_CLEAN":     1,
	"VERDICT_MALICIOUS": 2,
}

func (DataSet_Malicious_Verdict) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDataset, []int{0, 1, 0}
}

// DataSet
type DataSet struct {
	Categorization *DataSet_Categorization `protobuf:"bytes,1,opt,name=categorization" json:"categorization,omitempty"`
	Malicious      *DataSet_Malicious      `protobuf:"bytes,5,opt,name=malicious" json:"malicious,omitempty"`
	Echo           *DataSet_Echo           `protobuf:"bytes,6,opt,name=echo" json:"echo,omitempty"`
}

func (m *DataSet) Reset()                    { *m = DataSet{} }
func (*DataSet) ProtoMessage()               {}
func (*DataSet) Descriptor() ([]byte, []int) { return fileDescriptorDataset, []int{0} }

func (m *DataSet) GetCategorization() *DataSet_Categorization {
	if m != nil {
		return m.Categorization
	}
	return nil
}

func (m *DataSet) GetMalicious() *DataSet_Malicious {
	if m != nil {
		return m.Malicious
	}
	return nil
}

func (m *DataSet) GetEcho() *DataSet_Echo {
	if m != nil {
		return m.Echo
	}
	return nil
}

// Categorization
type DataSet_Categorization struct {
	Value []Category         `protobuf:"varint,3,rep,packed,name=value,enum=zvelo.msg.Category" json:"value,omitempty"`
	Error *google_rpc.Status `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
}

func (m *DataSet_Categorization) Reset()                    { *m = DataSet_Categorization{} }
func (*DataSet_Categorization) ProtoMessage()               {}
func (*DataSet_Categorization) Descriptor() ([]byte, []int) { return fileDescriptorDataset, []int{0, 0} }

func (m *DataSet_Categorization) GetValue() []Category {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *DataSet_Categorization) GetError() *google_rpc.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

// Malicious
type DataSet_Malicious struct {
	Category Category                  `protobuf:"varint,6,opt,name=category,proto3,enum=zvelo.msg.Category" json:"category,omitempty"`
	Verdict  DataSet_Malicious_Verdict `protobuf:"varint,7,opt,name=verdict,proto3,enum=zvelo.msg.DataSet_Malicious_Verdict" json:"verdict,omitempty"`
	Error    *google_rpc.Status        `protobuf:"bytes,8,opt,name=error" json:"error,omitempty"`
}

func (m *DataSet_Malicious) Reset()                    { *m = DataSet_Malicious{} }
func (*DataSet_Malicious) ProtoMessage()               {}
func (*DataSet_Malicious) Descriptor() ([]byte, []int) { return fileDescriptorDataset, []int{0, 1} }

func (m *DataSet_Malicious) GetCategory() Category {
	if m != nil {
		return m.Category
	}
	return UNKNOWN_CATEGORY
}

func (m *DataSet_Malicious) GetVerdict() DataSet_Malicious_Verdict {
	if m != nil {
		return m.Verdict
	}
	return VERDICT_UNKNOWN
}

func (m *DataSet_Malicious) GetError() *google_rpc.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

// Echo
type DataSet_Echo struct {
	Url   string             `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Error *google_rpc.Status `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *DataSet_Echo) Reset()                    { *m = DataSet_Echo{} }
func (*DataSet_Echo) ProtoMessage()               {}
func (*DataSet_Echo) Descriptor() ([]byte, []int) { return fileDescriptorDataset, []int{0, 2} }

func (m *DataSet_Echo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *DataSet_Echo) GetError() *google_rpc.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*DataSet)(nil), "zvelo.msg.DataSet")
	proto.RegisterType((*DataSet_Categorization)(nil), "zvelo.msg.DataSet.Categorization")
	proto.RegisterType((*DataSet_Malicious)(nil), "zvelo.msg.DataSet.Malicious")
	proto.RegisterType((*DataSet_Echo)(nil), "zvelo.msg.DataSet.Echo")
	proto.RegisterEnum("zvelo.msg.DataSetType", DataSetType_name, DataSetType_value)
	proto.RegisterEnum("zvelo.msg.DataSet_Malicious_Verdict", DataSet_Malicious_Verdict_name, DataSet_Malicious_Verdict_value)
}
func (x DataSetType) String() string {
	s, ok := DataSetType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DataSet_Malicious_Verdict) String() string {
	s, ok := DataSet_Malicious_Verdict_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *DataSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&msg.DataSet{")
	if this.Categorization != nil {
		s = append(s, "Categorization: "+fmt.Sprintf("%#v", this.Categorization)+",\n")
	}
	if this.Malicious != nil {
		s = append(s, "Malicious: "+fmt.Sprintf("%#v", this.Malicious)+",\n")
	}
	if this.Echo != nil {
		s = append(s, "Echo: "+fmt.Sprintf("%#v", this.Echo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DataSet_Categorization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msg.DataSet_Categorization{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DataSet_Malicious) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&msg.DataSet_Malicious{")
	s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	s = append(s, "Verdict: "+fmt.Sprintf("%#v", this.Verdict)+",\n")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DataSet_Echo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msg.DataSet_Echo{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDataset(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (this *DataSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataSet{`,
		`Categorization:` + strings.Replace(fmt.Sprintf("%v", this.Categorization), "DataSet_Categorization", "DataSet_Categorization", 1) + `,`,
		`Malicious:` + strings.Replace(fmt.Sprintf("%v", this.Malicious), "DataSet_Malicious", "DataSet_Malicious", 1) + `,`,
		`Echo:` + strings.Replace(fmt.Sprintf("%v", this.Echo), "DataSet_Echo", "DataSet_Echo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataSet_Categorization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataSet_Categorization{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Status", "google_rpc.Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataSet_Malicious) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataSet_Malicious{`,
		`Category:` + fmt.Sprintf("%v", this.Category) + `,`,
		`Verdict:` + fmt.Sprintf("%v", this.Verdict) + `,`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Status", "google_rpc.Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataSet_Echo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataSet_Echo{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Status", "google_rpc.Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDataset(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}

func init() { proto.RegisterFile("zvelo/msg/dataset.proto", fileDescriptorDataset) }

var fileDescriptorDataset = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x7d, 0xc9, 0x39, 0x71, 0xae, 0x34, 0xb8, 0x57, 0x50, 0xac, 0x08, 0x5d, 0x4a, 0xc5,
	0x10, 0x40, 0xd8, 0x52, 0xd9, 0x32, 0x54, 0x0a, 0x6e, 0x44, 0x1d, 0xda, 0x44, 0x72, 0xd2, 0x82,
	0xba, 0x20, 0xc7, 0x35, 0x8e, 0xa5, 0x84, 0x8b, 0xec, 0x73, 0xa4, 0x74, 0x62, 0x83, 0xb1, 0x1f,
	0x21, 0x91, 0x18, 0xf8, 0x28, 0x8c, 0x1d, 0x19, 0x1b, 0xb3, 0x74, 0xec, 0xc4, 0x8c, 0x72, 0x76,
	0x12, 0x0a, 0x2d, 0x95, 0xba, 0xdd, 0xbd, 0xfb, 0xbd, 0x77, 0xef, 0xff, 0x7f, 0x77, 0xa8, 0x70,
	0x32, 0x74, 0x7a, 0x54, 0xeb, 0x07, 0xae, 0x76, 0x6c, 0x31, 0x2b, 0x70, 0x98, 0x3a, 0xf0, 0x29,
	0xa3, 0x38, 0xc7, 0x0f, 0xd4, 0x7e, 0xe0, 0x16, 0x95, 0x25, 0x63, 0x5b, 0xcc, 0x71, 0xa9, 0x3f,
	0x8a, 0xa1, 0x62, 0xc1, 0xa5, 0xd4, 0xed, 0x39, 0x9a, 0x3f, 0xb0, 0xb5, 0x80, 0x59, 0x2c, 0x0c,
	0x92, 0x83, 0x17, 0xae, 0xc7, 0xba, 0x61, 0x47, 0xb5, 0x69, 0x5f, 0x73, 0xa9, 0x4b, 0x35, 0x1e,
	0xee, 0x84, 0x1f, 0xf8, 0x8e, 0x6f, 0xf8, 0x2a, 0xc6, 0x37, 0x7f, 0x89, 0x28, 0xbb, 0x63, 0x31,
	0xab, 0xe5, 0x30, 0x6c, 0xa0, 0x7c, 0x72, 0x8b, 0x77, 0x62, 0x31, 0x8f, 0x7e, 0x54, 0xc0, 0x06,
	0x28, 0xaf, 0x6c, 0x3d, 0x56, 0x17, 0x1d, 0xa9, 0x09, 0xab, 0xea, 0x57, 0x40, 0xf3, 0xaf, 0x44,
	0x5c, 0x41, 0xb9, 0xbe, 0xd5, 0xf3, 0x6c, 0x8f, 0x86, 0x81, 0x22, 0xf2, 0x2a, 0x8f, 0xae, 0xa9,
	0xb2, 0x3f, 0x67, 0xcc, 0x25, 0x8e, 0x9f, 0x23, 0xe8, 0xd8, 0x5d, 0xaa, 0x64, 0x78, 0x5a, 0xe1,
	0x9a, 0xb4, 0x9a, 0xdd, 0xa5, 0x26, 0x87, 0x8a, 0x9f, 0x01, 0xca, 0x5f, 0xed, 0x05, 0x3f, 0x45,
	0xe2, 0xd0, 0xea, 0x85, 0x8e, 0x92, 0xde, 0x48, 0x97, 0xf3, 0x5b, 0xeb, 0x7f, 0x14, 0x48, 0xc8,
	0x91, 0x19, 0x13, 0xb8, 0x8c, 0x44, 0xc7, 0xf7, 0xa9, 0xaf, 0x40, 0x7e, 0x17, 0x56, 0x63, 0x57,
	0x55, 0x7f, 0x60, 0xab, 0x2d, 0xee, 0xaa, 0x19, 0x03, 0x95, 0x07, 0xe3, 0x71, 0x49, 0xb8, 0x18,
	0x97, 0x84, 0x2f, 0x93, 0x92, 0x70, 0x3a, 0x29, 0x09, 0xe3, 0x49, 0x49, 0xa8, 0x43, 0x09, 0xc8,
	0xa9, 0x3a, 0x94, 0x52, 0x72, 0xba, 0xf8, 0x35, 0x85, 0x72, 0x0b, 0x3d, 0x58, 0x43, 0xd2, 0x7c,
	0x62, 0x5c, 0xc8, 0x0d, 0x7d, 0x2c, 0x20, 0xbc, 0x8d, 0xb2, 0x43, 0xc7, 0x3f, 0xf6, 0x6c, 0xa6,
	0x64, 0x39, 0xff, 0xe4, 0x7f, 0x7e, 0xa9, 0x87, 0x31, 0x6b, 0xce, 0x93, 0x96, 0x52, 0xa4, 0x5b,
	0xa4, 0x6c, 0xee, 0xa2, 0x6c, 0x92, 0x8d, 0xd7, 0xd1, 0xfd, 0xc3, 0x9a, 0xb9, 0x63, 0xe8, 0xed,
	0xf7, 0x07, 0x8d, 0x37, 0x8d, 0xe6, 0xdb, 0x86, 0x2c, 0xe0, 0x35, 0xb4, 0x3a, 0x0f, 0xea, 0x7b,
	0xb5, 0x6a, 0x43, 0x06, 0xf8, 0x21, 0x5a, 0x9b, 0x87, 0xf6, 0xab, 0x7b, 0x86, 0x6e, 0x34, 0x0f,
	0x5a, 0x72, 0xea, 0x76, 0x53, 0xea, 0x50, 0x4a, 0xcb, 0xb0, 0x0e, 0x25, 0x28, 0x8b, 0x75, 0x28,
	0x89, 0x72, 0xa6, 0xf8, 0x0e, 0xc1, 0xd9, 0xf8, 0xb0, 0x8c, 0xd2, 0xa1, 0xdf, 0xe3, 0x2f, 0x2c,
	0x67, 0xce, 0x96, 0x4b, 0x05, 0xa9, 0x3b, 0x0d, 0xe3, 0xc6, 0x6e, 0xfe, 0xed, 0x23, 0x2b, 0x4b,
	0xcf, 0x2a, 0x68, 0x25, 0x71, 0xb5, 0x3d, 0x1a, 0x38, 0x18, 0xa3, 0xbc, 0x5e, 0x6d, 0xd7, 0x5e,
	0x37, 0x4d, 0xe3, 0xa8, 0xda, 0x36, 0x9a, 0x33, 0x23, 0x56, 0x51, 0x6e, 0xa9, 0x16, 0x62, 0x09,
	0xc1, 0x9a, 0xbe, 0xdb, 0x94, 0xc5, 0x57, 0xdb, 0x67, 0x53, 0x22, 0xfc, 0x98, 0x12, 0xe1, 0x7c,
	0x4a, 0xc0, 0xe5, 0x94, 0x80, 0x4f, 0x11, 0x01, 0xdf, 0x22, 0x02, 0xbe, 0x47, 0x04, 0x9c, 0x45,
	0x04, 0x9c, 0x47, 0x04, 0x5c, 0x44, 0x44, 0xb8, 0x8c, 0x08, 0x38, 0xfd, 0x49, 0x84, 0xa3, 0x7b,
	0xf1, 0x2c, 0x3d, 0xfe, 0x97, 0x3b, 0x19, 0xfe, 0xf7, 0x5e, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0xeb, 0x7b, 0x91, 0x0d, 0x03, 0x04, 0x00, 0x00,
}
