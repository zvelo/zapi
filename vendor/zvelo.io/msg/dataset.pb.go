// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zvelo/msg/dataset.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_rpc "google.golang.org/genproto/googleapis/rpc/status"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DataSetType int32

const (
	CATEGORIZATION DataSetType = 0
	// 1 is reserved
	// 2 is reserved
	// 3 is reserved
	MALICIOUS DataSetType = 4
	ECHO      DataSetType = 5
)

var DataSetType_name = map[int32]string{
	0: "CATEGORIZATION",
	4: "MALICIOUS",
	5: "ECHO",
}
var DataSetType_value = map[string]int32{
	"CATEGORIZATION": 0,
	"MALICIOUS":      4,
	"ECHO":           5,
}

func (DataSetType) EnumDescriptor() ([]byte, []int) { return fileDescriptorDataset, []int{0} }

// DataSet
type DataSet struct {
	Categorization *DataSet_Categorization `protobuf:"bytes,1,opt,name=categorization" json:"categorization,omitempty"`
	Malicious      *DataSet_Malicious      `protobuf:"bytes,5,opt,name=malicious" json:"malicious,omitempty"`
	Echo           *DataSet_Echo           `protobuf:"bytes,6,opt,name=echo" json:"echo,omitempty"`
}

func (m *DataSet) Reset()                    { *m = DataSet{} }
func (*DataSet) ProtoMessage()               {}
func (*DataSet) Descriptor() ([]byte, []int) { return fileDescriptorDataset, []int{0} }

func (m *DataSet) GetCategorization() *DataSet_Categorization {
	if m != nil {
		return m.Categorization
	}
	return nil
}

func (m *DataSet) GetMalicious() *DataSet_Malicious {
	if m != nil {
		return m.Malicious
	}
	return nil
}

func (m *DataSet) GetEcho() *DataSet_Echo {
	if m != nil {
		return m.Echo
	}
	return nil
}

// Categorization
type DataSet_Categorization struct {
	Value []Category         `protobuf:"varint,3,rep,packed,name=value,enum=zvelo.msg.Category" json:"value,omitempty"`
	Error *google_rpc.Status `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
}

func (m *DataSet_Categorization) Reset()                    { *m = DataSet_Categorization{} }
func (*DataSet_Categorization) ProtoMessage()               {}
func (*DataSet_Categorization) Descriptor() ([]byte, []int) { return fileDescriptorDataset, []int{0, 0} }

func (m *DataSet_Categorization) GetValue() []Category {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *DataSet_Categorization) GetError() *google_rpc.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

// Malicious
type DataSet_Malicious struct {
	Error    *google_rpc.Status `protobuf:"bytes,8,opt,name=error" json:"error,omitempty"`
	Category []Category         `protobuf:"varint,9,rep,packed,name=category,enum=zvelo.msg.Category" json:"category,omitempty"`
}

func (m *DataSet_Malicious) Reset()                    { *m = DataSet_Malicious{} }
func (*DataSet_Malicious) ProtoMessage()               {}
func (*DataSet_Malicious) Descriptor() ([]byte, []int) { return fileDescriptorDataset, []int{0, 1} }

func (m *DataSet_Malicious) GetError() *google_rpc.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *DataSet_Malicious) GetCategory() []Category {
	if m != nil {
		return m.Category
	}
	return nil
}

// Echo
type DataSet_Echo struct {
	Url   string             `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Error *google_rpc.Status `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *DataSet_Echo) Reset()                    { *m = DataSet_Echo{} }
func (*DataSet_Echo) ProtoMessage()               {}
func (*DataSet_Echo) Descriptor() ([]byte, []int) { return fileDescriptorDataset, []int{0, 2} }

func (m *DataSet_Echo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *DataSet_Echo) GetError() *google_rpc.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*DataSet)(nil), "zvelo.msg.DataSet")
	proto.RegisterType((*DataSet_Categorization)(nil), "zvelo.msg.DataSet.Categorization")
	proto.RegisterType((*DataSet_Malicious)(nil), "zvelo.msg.DataSet.Malicious")
	proto.RegisterType((*DataSet_Echo)(nil), "zvelo.msg.DataSet.Echo")
	proto.RegisterEnum("zvelo.msg.DataSetType", DataSetType_name, DataSetType_value)
}
func (x DataSetType) String() string {
	s, ok := DataSetType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *DataSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&msg.DataSet{")
	if this.Categorization != nil {
		s = append(s, "Categorization: "+fmt.Sprintf("%#v", this.Categorization)+",\n")
	}
	if this.Malicious != nil {
		s = append(s, "Malicious: "+fmt.Sprintf("%#v", this.Malicious)+",\n")
	}
	if this.Echo != nil {
		s = append(s, "Echo: "+fmt.Sprintf("%#v", this.Echo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DataSet_Categorization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msg.DataSet_Categorization{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DataSet_Malicious) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msg.DataSet_Malicious{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DataSet_Echo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msg.DataSet_Echo{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDataset(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (this *DataSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataSet{`,
		`Categorization:` + strings.Replace(fmt.Sprintf("%v", this.Categorization), "DataSet_Categorization", "DataSet_Categorization", 1) + `,`,
		`Malicious:` + strings.Replace(fmt.Sprintf("%v", this.Malicious), "DataSet_Malicious", "DataSet_Malicious", 1) + `,`,
		`Echo:` + strings.Replace(fmt.Sprintf("%v", this.Echo), "DataSet_Echo", "DataSet_Echo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataSet_Categorization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataSet_Categorization{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Status", "google_rpc.Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataSet_Malicious) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataSet_Malicious{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Status", "google_rpc.Status", 1) + `,`,
		`Category:` + fmt.Sprintf("%v", this.Category) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataSet_Echo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataSet_Echo{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Status", "google_rpc.Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDataset(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}

func init() { proto.RegisterFile("zvelo/msg/dataset.proto", fileDescriptorDataset) }

var fileDescriptorDataset = []byte{
	// 507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xb1, 0x6f, 0xd3, 0x40,
	0x14, 0xc6, 0xef, 0x9a, 0x73, 0x72, 0xbe, 0x42, 0x74, 0x3a, 0x90, 0x62, 0x45, 0xe8, 0x52, 0x98,
	0x02, 0x08, 0x5b, 0x2a, 0x5b, 0x06, 0xa4, 0x10, 0x22, 0xb0, 0x45, 0x89, 0xe4, 0x04, 0x09, 0x75,
	0x73, 0x8c, 0x71, 0x2c, 0x39, 0x5c, 0x64, 0x9f, 0x2b, 0xa5, 0x13, 0x1b, 0x8c, 0xfd, 0x13, 0x92,
	0x05, 0xf1, 0xa7, 0x30, 0x76, 0x64, 0x6c, 0xcc, 0xd2, 0xb1, 0x23, 0x23, 0xea, 0xd9, 0x4d, 0x28,
	0xb4, 0xaa, 0xc4, 0x76, 0xe7, 0xf7, 0x7b, 0xdf, 0xfb, 0xfc, 0x3d, 0x9b, 0x34, 0x0e, 0x0f, 0x82,
	0x58, 0x58, 0xd3, 0x34, 0xb4, 0xde, 0x7b, 0xd2, 0x4b, 0x03, 0x69, 0xce, 0x12, 0x21, 0x05, 0xd3,
	0x55, 0xc1, 0x9c, 0xa6, 0x61, 0xd3, 0xd8, 0x30, 0xbe, 0x27, 0x83, 0x50, 0x24, 0xf3, 0x02, 0x6a,
	0x36, 0x42, 0x21, 0xc2, 0x38, 0xb0, 0x92, 0x99, 0x6f, 0xa5, 0xd2, 0x93, 0x59, 0x5a, 0x16, 0x9e,
	0x84, 0x91, 0x9c, 0x64, 0x63, 0xd3, 0x17, 0x53, 0x2b, 0x14, 0xa1, 0xb0, 0xd4, 0xe3, 0x71, 0xf6,
	0x41, 0xdd, 0xd4, 0x45, 0x9d, 0x0a, 0xfc, 0xc1, 0x2f, 0x44, 0x6a, 0x2f, 0x3c, 0xe9, 0x0d, 0x03,
	0xc9, 0x6c, 0x52, 0x2f, 0xa7, 0x44, 0x87, 0x9e, 0x8c, 0xc4, 0x47, 0x03, 0xee, 0xc0, 0xf6, 0xf6,
	0xee, 0x7d, 0x73, 0xed, 0xc8, 0x2c, 0x59, 0xb3, 0x77, 0x09, 0x74, 0xff, 0x6a, 0x64, 0x1d, 0xa2,
	0x4f, 0xbd, 0x38, 0xf2, 0x23, 0x91, 0xa5, 0x86, 0xa6, 0x54, 0xee, 0x5d, 0xa1, 0xb2, 0x77, 0xc1,
	0xb8, 0x1b, 0x9c, 0x3d, 0x26, 0x28, 0xf0, 0x27, 0xc2, 0xa8, 0xaa, 0xb6, 0xc6, 0x15, 0x6d, 0x7d,
	0x7f, 0x22, 0x5c, 0x05, 0x35, 0x3f, 0x43, 0x52, 0xbf, 0xec, 0x85, 0x3d, 0x24, 0xda, 0x81, 0x17,
	0x67, 0x81, 0x51, 0xd9, 0xa9, 0xb4, 0xeb, 0xbb, 0x77, 0xfe, 0x10, 0x28, 0xc9, 0xb9, 0x5b, 0x10,
	0xac, 0x4d, 0xb4, 0x20, 0x49, 0x44, 0x62, 0x20, 0x35, 0x8b, 0x99, 0x45, 0xaa, 0x66, 0x32, 0xf3,
	0xcd, 0xa1, 0x4a, 0xd5, 0x2d, 0x80, 0xce, 0xdd, 0xc5, 0xa2, 0x05, 0x4e, 0x17, 0x2d, 0xf0, 0x65,
	0xd9, 0x02, 0x47, 0xcb, 0x16, 0x58, 0x2c, 0x5b, 0xc0, 0x41, 0x18, 0xd2, 0x2d, 0x07, 0xe1, 0x2d,
	0x5a, 0x69, 0x7e, 0x85, 0x44, 0x5f, 0xbf, 0xcf, 0x46, 0x19, 0xdf, 0xa0, 0xcc, 0x2c, 0x82, 0x2f,
	0x76, 0x6b, 0xe8, 0xd7, 0x3b, 0x5e, 0x43, 0x37, 0x5b, 0x71, 0x10, 0xae, 0x50, 0xe4, 0x20, 0x8c,
	0xa8, 0xe6, 0x20, 0xac, 0xd1, 0xaa, 0x83, 0x70, 0x95, 0xd6, 0x1c, 0x84, 0x6b, 0x14, 0x37, 0xdf,
	0x11, 0x74, 0x1e, 0x20, 0xa3, 0xa4, 0x92, 0x25, 0xb1, 0xda, 0xb1, 0xee, 0x9e, 0x1f, 0x37, 0xa6,
	0xb7, 0xfe, 0x2b, 0x8e, 0x6b, 0x9d, 0xfd, 0xeb, 0xa9, 0x46, 0xf1, 0xa3, 0x0e, 0xd9, 0x2e, 0x17,
	0x3a, 0x9a, 0xcf, 0x02, 0xc6, 0x48, 0xbd, 0xd7, 0x1d, 0xf5, 0x5f, 0x0e, 0x5c, 0x7b, 0xbf, 0x3b,
	0xb2, 0x07, 0x6f, 0x28, 0x60, 0xb7, 0x89, 0xbe, 0xd7, 0x7d, 0x6d, 0xf7, 0xec, 0xc1, 0xdb, 0x21,
	0x45, 0x0c, 0x13, 0xd4, 0xef, 0xbd, 0x1a, 0x50, 0xed, 0xf9, 0xb3, 0xe3, 0x15, 0x07, 0x3f, 0x56,
	0x1c, 0x9c, 0xac, 0x38, 0x3c, 0x5b, 0x71, 0xf8, 0x29, 0xe7, 0xf0, 0x5b, 0xce, 0xe1, 0xf7, 0x9c,
	0xc3, 0xe3, 0x9c, 0xc3, 0x93, 0x9c, 0xc3, 0xd3, 0x9c, 0x83, 0xb3, 0x9c, 0xc3, 0xa3, 0x9f, 0x1c,
	0xec, 0xdf, 0x2a, 0x32, 0x8d, 0xd4, 0xdf, 0x34, 0xae, 0xaa, 0xaf, 0xff, 0xe9, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x48, 0x31, 0xab, 0x36, 0x85, 0x03, 0x00, 0x00,
}
